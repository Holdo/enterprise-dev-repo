<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="sap.m" xmlns:n0="sap.ui.core" xmlns:n1="sap.m">
<xsd:import namespace="sap.ui.core"/>
<xsd:element name="ActionListItem" type="n1:_ActionListItemType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;sap.m.ActionListItem&lt;/code&gt; can be used like a &lt;code&gt;button&lt;/code&gt; to fire actions when pressed.
&lt;b&gt;Note:&lt;/b&gt; The inherited &lt;code&gt;selected&lt;/code&gt; property of the &lt;code&gt;sap.m.ListItemBase&lt;/code&gt; is not supported.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ActionSelect" type="n1:_ActionSelectType" substitutionGroup="n1:Select">
<xsd:annotation>
<xsd:documentation>The ActionSelect control provides a list of predefined items that allows end users to choose options and additionally trigger some actions.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ActionSheet" type="n1:_ActionSheetType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>ActionSheet is a special kind of control which contains one or more sap.m.Button(s) and the ActionSheet will be closed when one of the buttons is tapped. It looks similar as a sap.m.Dialog in iPhone and Android while as a sap.m.Popover in iPad.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="App" type="n1:_AppType" substitutionGroup="n1:NavContainer">
<xsd:annotation>
<xsd:documentation>App is the root element of a UI5 mobile application. It inherits from NavContainer and thus provides its navigation capabilities.
It also adds certain header tags to the HTML page which are considered useful for mobile apps.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Bar" type="n1:_BarType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The Bar control can be used as a header, sub-header and a footer in a page.
It has the capability to center a content like a title, while having other controls on the left and right side.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Breadcrumbs" type="n1:_BreadcrumbsType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Enables users to navigate between items by providing a list of links to previous steps in the user's
navigation path. The last three steps can be accessed as links directly The remaining links prior to them
are available in a drop-down menu.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="BusyDialog" type="n1:_BusyDialogType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>BusyDialog is used to indicate that the system is busy and the user has to wait.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="BusyIndicator" type="n1:_BusyIndicatorType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Control to indicate that the system is busy with some task and the user has to wait.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Button" type="n1:_ButtonType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Enables users to trigger actions. For the button UI, you can define some text or an icon, or both.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Carousel" type="n1:_CarouselType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The Carousel control can be used to navigate through a list of sap.m controls just like flipping through the pages of a book by swiping right or left. An indicator shows the current position within the control list. When displayed in a desktop browser, a left- and right-arrow button is displayed on the carousel's sides, which can be used to navigate through the carousel.

Note: when displa Internet Explorer 9, page changes are not animated.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="CheckBox" type="n1:_CheckBoxType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The CheckBox control allows the user to select one or multiple items from a list. To select each item the user has to select the square box in front of it.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Column" type="n1:_ColumnType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;sap.m.Column&lt;/code&gt; allows to define column specific properties that will be applied when rendering the &lt;code&gt;sap.m.Table&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ColumnListItem" type="n1:_ColumnListItemType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>&lt;code&gt;sap.m.ColumnListItem&lt;/code&gt; can be used with the &lt;code&gt;cells&lt;/code&gt; aggregation to create rows for the &lt;code&gt;sap.m.Table&lt;/code&gt; control.
The &lt;code&gt;columns&lt;/code&gt; aggregation of the &lt;code&gt;sap.m.Table&lt;/code&gt; should match with the cells aggregation.

&lt;b&gt;Note:&lt;/b&gt; This control should only be used within the &lt;code&gt;sap.m.Table&lt;/code&gt; control.
The inherited &lt;code&gt;counter&lt;/code&gt; property of &lt;code&gt;sap.m.ListItemBase&lt;/code&gt; is not supported.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ComboBox" type="n1:_ComboBoxType" substitutionGroup="n1:ComboBoxBase">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;sap.m.ComboBox&lt;/code&gt; control combines a dropdown list with items and a text field with a button,
allowing the user to either type a value directly or choose from the list of existing items.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ComboBoxBase" type="n1:_ComboBoxBaseType" substitutionGroup="n1:ComboBoxTextField">
<xsd:annotation>
<xsd:documentation>An abstract class for combo boxes.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ComboBoxTextField" type="n1:_ComboBoxTextFieldType" substitutionGroup="n1:InputBase">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;sap.m.ComboBoxTextField&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="CustomListItem" type="n1:_CustomListItemType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>This control with a content aggregation can be used to customize standard list items that we don't provide. List mode and ListItem type are applied to CustomListItems as well.
&lt;b&gt;Note:&lt;/b&gt; Even though the content aggregation allows any control, complex responsive layout controls (e.g. &lt;code&gt;Table, Form&lt;/code&gt;) should not be aggregated as content.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="CustomTile" type="n1:_CustomTileType" substitutionGroup="n1:Tile">
<xsd:annotation>
<xsd:documentation>Use the CustomTile control to display application specific content in the Tile control.
The tile width is 8.5em and height is 10em.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DatePicker" type="n1:_DatePickerType" substitutionGroup="n1:InputBase">
<xsd:annotation>
<xsd:documentation>This is a date input control with a calendar as date picker.

A date can be entered using a calendar that opens in a popup. Alternatively a value can be entered directly in the input field by typing it in.
(This is only possible on desktop devices, on mobile devices keyboard input is not possible.)
If a date is entered by typing it into the input field, it must fit to the used date format and locale. (See &lt;code&gt;sap.ui.core.format.DateFormat&lt;/code&gt;)

There are two options to provide a date for the &lt;code&gt;DatePicker&lt;/code&gt;.
You can put a date as a string to the property &lt;code&gt;value&lt;/code&gt; or you can put a JavaScript Date object to the property &lt;code&gt;dateValue&lt;/code&gt;.
Only one of the properties should be used at one time, but they are synchronized internally.
What property you should use depends on the use case of the application:
&lt;ul&gt;
&lt;li&gt;Use the &lt;code&gt;value&lt;/code&gt; property if you want to bind the &lt;code&gt;DatePicker&lt;/code&gt; to a model using the &lt;code&gt;sap.ui.model.type.Date&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;value&lt;/code&gt; property if the date is provided as a string from the backend or inside the application (e.g. as ABAP type DATS field).&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;dateValue&lt;/code&gt; property if the date is already provided as a JavaScript Date object or you want to work with a JavaScript Date object.&lt;/li&gt;
&lt;/ul&gt;

All formatting and parsing of dates from and to strings is done using the {@link sap.ui.core.format.DateFormat}, so read the corresponding documentation if you need some information about this.

Supported format options are pattern-based on Unicode LDML Date Format notation. {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}

For example, if the &lt;code&gt;valueFormat&lt;/code&gt; is "yyyy-MM-dd", &lt;code&gt;displayFormat&lt;/code&gt; is "MMM d, y" and the used locale is English,
a valid &lt;code&gt;value&lt;/code&gt; string is "2015-07-30", which leads to an output of "Jul 30, 2015".

If no &lt;code&gt;placeholder&lt;/code&gt; is set to the &lt;code&gt;DatePicker&lt;/code&gt; the used &lt;code&gt;displayFormat&lt;/code&gt; is shown as placeholder.
If another placeholder is needed, it must be set.

Internally the &lt;code&gt;sap.ui.unified.Calendar&lt;/code&gt; is used, but it is only needed if the &lt;code&gt;DatePicker&lt;/code&gt; is opened. This means that it is not needed for the initial rendering.
If the &lt;code&gt;sap.ui.unified&lt;/code&gt; library is not loaded before the &lt;code&gt;DatePicker&lt;/code&gt; is opened, it will be loaded upon opening.
This could lead to a waiting time before a &lt;code&gt;DatePicker&lt;/code&gt; is opened the first time. To prevent this, applications using the &lt;code&gt;DatePicker&lt;/code&gt; should also load
the &lt;code&gt;sap.ui.unified&lt;/code&gt; library.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DateRangeSelection" type="n1:_DateRangeSelectionType" substitutionGroup="n1:DatePicker">
<xsd:annotation>
<xsd:documentation>This is a date range input control with a calendar as date picker.

A date range can be entered using a calendar that opens in a popup. Alternatively a value can be entered directly in the input field by typing it in.
(This is only possible on desktop devices, on mobile devices keyboard input is not possible.)
If a date range is entered by typing it into the input field, it must fit to the used date format and locale. (See &lt;code&gt;sap.ui.core.format.DateFormat&lt;/code&gt;)

There are two options to provide a date for the &lt;code&gt;DateRangeSelection&lt;/code&gt;.
You can put a date range as a string to the property &lt;code&gt;value&lt;/code&gt; or you can put JavaScript Date objects to the properties &lt;code&gt;dateValue&lt;/code&gt; and &lt;code&gt;secondDateValue&lt;/code&gt;.
Only one of the properties should be used at one time, but they are synchronized internally.
What property to use depends on the use case of the application.
&lt;ul&gt;
&lt;li&gt;Use the &lt;code&gt;value&lt;/code&gt; property if the date range is already provided as a formatted string.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;dateValue&lt;/code&gt; and &lt;code&gt;secondDateValue&lt;/code&gt; properties if the date range is already provided as JavaScript Date objects or you want to work with JavaScript Date objects.&lt;/li&gt;
&lt;/ul&gt;

All formatting and parsing of dates from and to strings is done using the {@link sap.ui.core.format.DateFormat}, so read the corresponding documentation if you need some information about this.

Supported format options are pattern-based on Unicode LDML Date Format notation. {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}

For example, if the &lt;code&gt;displayFormat&lt;/code&gt; is "MMM d, y", &lt;code&gt;delimiter&lt;/code&gt; is "-" and the used locale is English,
a valid &lt;code&gt;value&lt;/code&gt; string is "Jul 29, 2015 - Jul 31, 2015" and it will be displayed in the same way in the input field.

If no &lt;code&gt;placeholder&lt;/code&gt; is set to the &lt;code&gt;DatePicker&lt;/code&gt; the used &lt;code&gt;displayFormat&lt;/code&gt; is shown as placeholder.
If another placeholder is needed, it must be set.

Internally the &lt;code&gt;sap.ui.unified.Calendar&lt;/code&gt; is used, but it is only needed if the &lt;code&gt;DateRangeSelection&lt;/code&gt; is opened. This means that it is not needed for the initial rendering.
If the &lt;code&gt;sap.ui.unified&lt;/code&gt; library is not loaded before the &lt;code&gt;DateRangeSelection&lt;/code&gt; is opened, it will be loaded upon opening.
This could lead to a waiting time before a &lt;code&gt;DateRangeSelection&lt;/code&gt; is opened the first time. To prevent this, applications using the &lt;code&gt;DateRangeSelection&lt;/code&gt; should also load
the &lt;code&gt;sap.ui.unified&lt;/code&gt; library.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DateTimeInput" type="n1:_DateTimeInputType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Allows end users to interact with date and/or time and select from a date and/or time pad.

&lt;b&gt;Note:&lt;/b&gt; This control should not be used any longer, instead please use the dedicated &lt;code&gt;sap.m.DatePicker&lt;/code&gt;, &lt;code&gt;sap.m.TimePicker&lt;/code&gt; or &lt;code&gt;sap.m.DateTimePicker&lt;/code&gt; control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DateTimePicker" type="n1:_DateTimePickerType" substitutionGroup="n1:DatePicker">
<xsd:annotation>
<xsd:documentation>This is a date input control with a calendar and a time selector as date time picker.

A date can be entered using a calendar or time selector that opens in a popup. Alternatively a value can be entered directly in the input field by typing it in.
If a date is entered by typing it into the input field, it must fit the used date format and locale. (See &lt;code&gt;sap.ui.core.format.DateFormat&lt;/code&gt;)

There are two options to provide a date for the &lt;code&gt;DateTimePicker&lt;/code&gt;.
You can put a date as a string to the property &lt;code&gt;value&lt;/code&gt; or you can put a JavaScript Date object to the property &lt;code&gt;dateValue&lt;/code&gt;.
Only one of the properties should be used at one time, but they are synchronized internally.
What property you should use depends on the use case of the application:
&lt;ul&gt;
&lt;li&gt;Use the &lt;code&gt;value&lt;/code&gt; property if you want to bind the &lt;code&gt;DateTimePicker&lt;/code&gt; to a model using the &lt;code&gt;sap.ui.model.type.DateTime&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;value&lt;/code&gt; property if the date is provided as a string from the back end or inside the application (e.g. as ABAP type DATS field).&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;dateValue&lt;/code&gt; property if the date is already provided as a JavaScript Date object or you want to work with a JavaScript Date object.&lt;/li&gt;
&lt;/ul&gt;

All formatting and parsing of dates to and from strings is done using the {@link sap.ui.core.format.DateFormat}, so please read the corresponding documentation if you need more information about this.

Supported format options are pattern-based on Unicode LDML Date Format notation. {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}

For example, if the &lt;code&gt;valueFormat&lt;/code&gt; is "yyyy-MM-dd-HH-mm-ss", &lt;code&gt;displayFormat&lt;/code&gt; is "MMM d, y, HH:mm:ss" and the used locale is English,
a valid &lt;code&gt;value&lt;/code&gt; string is "2015-07-30-10-30-15", which leads to an output of "Jul 30, 2015, 10:30:15".

If no &lt;code&gt;placeholder&lt;/code&gt; is set to the &lt;code&gt;DateTimePicker&lt;/code&gt;, the used &lt;code&gt;displayFormat&lt;/code&gt; is shown as a placeholder.
If another placeholder is needed, it must be set.

Internally the &lt;code&gt;sap.ui.unified.Calendar&lt;/code&gt; is used, but it is only needed if the &lt;code&gt;DateTimePicker&lt;/code&gt; is opened. This means that it is not needed for the initial rendering.
If the &lt;code&gt;sap.ui.unified&lt;/code&gt; library is not loaded before the &lt;code&gt;DateTimePicker&lt;/code&gt; is opened, it will be loaded upon opening.
This could lead to a waiting time before a &lt;code&gt;DateTimePicker&lt;/code&gt; is opened the first time. To prevent this, applications using the &lt;code&gt;DateTimePicker&lt;/code&gt; should also load
the &lt;code&gt;sap.ui.unified&lt;/code&gt; library.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Dialog" type="n1:_DialogType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The Dialog control is used to interrupt the current processing of an application to prompt the user for information or a response.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DisplayListItem" type="n1:_DisplayListItemType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>&lt;code&gt;sap.m.DisplayListItem&lt;/code&gt; can be used to represent a label and a value.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DraftIndicator" type="n1:_DraftIndicatorType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A draft indicator is {@link sap.m.Label}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FacetFilter" type="n1:_FacetFilterType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The FacetFilter control is used to provide filtering functionality with multiple parameters.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FacetFilterItem" type="n1:_FacetFilterItemType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>Represents a value for the FacetFilterList control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FacetFilterList" type="n1:_FacetFilterListType" substitutionGroup="n1:List">
<xsd:annotation>
<xsd:documentation>FacetFilterList represents a list of values for the FacetFilter control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FeedContent" type="n1:_FeedContentType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Displays a tile containing the text of the feed, a subheader, and a numeric value.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FeedInput" type="n1:_FeedInputType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The Feed Input allows the user to enter text for a new feed entry and then post it.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FeedListItem" type="n1:_FeedListItemType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>The control provides a set of properties for text, sender information, time stamp.
Beginning with release 1.23 the new feature expand / collapse was introduced, which uses the property maxCharacters.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FlexBox" type="n1:_FlexBoxType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The FlexBox control builds the container for a flexible box layout.

Browser support:
This control is not supported in Internet Explorer 9!</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FlexItemData" type="n1:_FlexItemDataType" substitutionGroup="n0:LayoutData">
<xsd:annotation>
<xsd:documentation>Holds layout data for a FlexBox|HBox|VBox</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FormattedText" type="n1:_FormattedTextType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The FormattedText control allows the usage of a limited set of tags for inline display of formatted text in HTML format.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GenericTile" type="n1:_GenericTileType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Displays the title, description, and a customizable main area.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GroupHeaderListItem" type="n1:_GroupHeaderListItemType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>&lt;code&gt;sap.m.GroupHeaderListItem&lt;/code&gt; is used to display the title of a group and act as separator between groups in &lt;code&gt;sap.m.List&lt;/code&gt; and &lt;code&gt;sap.m.Table&lt;/code&gt;.
&lt;b&gt;Note:&lt;/b&gt; The inherited properties &lt;code&gt;unread&lt;/code&gt;, &lt;code&gt;selected&lt;/code&gt;, &lt;code&gt;counter&lt;/code&gt; and &lt;code&gt;press&lt;/code&gt; event from &lt;code&gt;sap.m.ListItemBase&lt;/code&gt; are not supported.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GrowingList" type="n1:_GrowingListType" substitutionGroup="n1:List">
<xsd:annotation>
<xsd:documentation>sap.m.GrowingList control is the container for all list items and inherits from sap.m.List control. Everything like the selection, deletion, unread states and inset style are also maintained here. In addition the control provides a loading mechanism to request data from the model and append the list items to the list. The request is started manually by tapping on the trigger at the end of the list.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="HBox" type="n1:_HBoxType" substitutionGroup="n1:FlexBox">
<xsd:annotation>
<xsd:documentation>The HBox control builds the container for a horizontal flexible box layout. HBox is a convenience control as it is just a specialized FlexBox control.

Browser support:
This control is not supported in Internet Explorer 9!</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="IconTabBar" type="n1:_IconTabBarType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The IconTabBar control represents a collection of tabs with associated content.

IconTabBar covers the following use cases:
- Filter – There is only one main content for all tabs. The main content can be filtered, based on the selected tab.
- Normal tab bar - The contents of each tab are independent from each other.
- Combination of the above - There can be both filtered and independent contents.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="IconTabFilter" type="n1:_IconTabFilterType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>Represents a selectable item inside an IconTabBar.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="IconTabHeader" type="n1:_IconTabHeaderType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>This control displays a number of IconTabFilters and IconTabSeparators. If the available horizontal
space is exceeded, a horizontal scrolling appears.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="IconTabSeparator" type="n1:_IconTabSeparatorType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Represents an Icon used to separate 2 tab filters.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Image" type="n1:_ImageType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A wrapper around the IMG tag. The image can be loaded from a remote or local server.

Density related image will be loaded if image with density awareness name in format [imageName]@[densityValue].[extension] is provided. The valid desity values are 1, 1.5, 2. If the original devicePixelRatio isn't one of the three valid numbers, it's rounded up to the nearest one.

There are various size setting options available, and the images can be combined with actions.

From version 1.30, new image mode sap.m.ImageMode.Background is added. When this mode is set, the src property is set using the css style 'background-image'. The properties 'backgroundSize', 'backgroundPosition', 'backgroundRepeat' have effect only when image is in sap.m.ImageMode.Background mode. In order to make the high density image correctly displayed, the 'backgroundSize' should be set to the dimension of the normal density version.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ImageContent" type="n1:_ImageContentType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>This control can be displayed as image content in a tile.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Input" type="n1:_InputType" substitutionGroup="n1:InputBase">
<xsd:annotation>
<xsd:documentation>Enables users to input data.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="InputBase" type="n1:_InputBaseType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;sap.m.InputBase&lt;/code&gt; control provides a base functionality of the Input controls, e.g. &lt;code&gt;sap.m.Input&lt;/code&gt;, &lt;code&gt;sap.m.DatePicker&lt;/code&gt;, &lt;code&gt;sap.m.TextArea&lt;/code&gt;, &lt;code&gt;sap.m.ComboBox&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="InputListItem" type="n1:_InputListItemType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>List item should be used for a label and an input field.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Label" type="n1:_LabelType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The Label control is used in a UI5 mobile application to provide label text for other controls. Design such as bold, and text alignment can be specified.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Link" type="n1:_LinkType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A hyperlink control which can be used to trigger actions or to navigate to other applications or web pages.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="List" type="n1:_ListType" substitutionGroup="n1:ListBase">
<xsd:annotation>
<xsd:documentation>The List control provides a container for all types of list items.
For mobile devices, the recommended limit of list items is 100 to assure proper performance. To improve initial rendering of large lists, use the "growing" feature. Please refer to the SAPUI5 Developer Guide for more information..</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ListBase" type="n1:_ListBaseType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;sap.m.ListBase&lt;/code&gt; control provides a base functionality of the &lt;code&gt;sap.m.List&lt;/code&gt; and &lt;code&gt;sap.m.Table&lt;/code&gt; controls. Selection, deletion, unread states and inset style are also maintained in &lt;code&gt;sap.m.ListBase&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; The ListBase including all contained items may be completely re-rendered when the data of a bound model is changed. Due to the limited hardware resources of mobile devices this can lead to longer delays for lists that contain many items. As such the usage of a list is not recommended for these use cases.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ListItemBase" type="n1:_ListItemBaseType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>ListItemBase contains the base features of all specific list items.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MaskInput" type="n1:_MaskInputType" substitutionGroup="n1:InputBase">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;sap.m.MaskInput&lt;/code&gt; control allows users to easily enter data in a certain format and in a fixed-width input
(for example: date, time, phone number, credit card number, currency, IP address, MAC address, and others).</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MaskInputRule" type="n1:_MaskInputRuleType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;sap.m.MaskInputRule&lt;/code&gt; control holds the mapping of a single &lt;code&gt;maskFormatSymbol&lt;/code&gt;
to the regular expression &lt;code&gt;regex&lt;/code&gt; that defines the allowed characters for the rule.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Menu" type="n1:_MenuType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;sap.m.Menu&lt;/code&gt; control represents a hierarchical menu.
When opened on mobile devices it occupies the whole screen.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MenuButton" type="n1:_MenuButtonType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;sap.m.MenuButton&lt;/code&gt; control enables the user to show a hierarchical menu.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MenuItem" type="n1:_MenuItemType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;MenuItem&lt;/code&gt; control is used for creating items for the &lt;code&gt;sap.m.Menu&lt;/code&gt;.
It is derived from a core &lt;code&gt;sap.ui.core.Item&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MessagePage" type="n1:_MessagePageType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>MessagePage is displayed when there is no data or matching content. There are different use cases where a MessagePage might be visualized, for example:
	- The search query returned no results
	- The app contains no items
	- There are too many items
	- The application is loading
The layout is unchanged but the text varies depending on the use case.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MessagePopover" type="n1:_MessagePopoverType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A MessagePopover is a Popover containing a summarized list with messages.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MessagePopoverItem" type="n1:_MessagePopoverItemType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>Items provide information about Error Messages in the page.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MessageStrip" type="n1:_MessageStripType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>MessageStrip is a control that enables the embedding of application-related messages in the application.
There are 4 types of messages: Information, Success, Warning and Error.
Each message can have a close button, so that it can be removed from the UI if needed.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MultiComboBox" type="n1:_MultiComboBoxType" substitutionGroup="n1:ComboBoxBase">
<xsd:annotation>
<xsd:documentation>The MultiComboBox control provides a list box with items and a text field allowing the user to either type a value directly into the control or choose from the list of existing items.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MultiInput" type="n1:_MultiInputType" substitutionGroup="n1:Input">
<xsd:annotation>
<xsd:documentation>MultiInput provides functionality to add / remove / enter tokens</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="NavContainer" type="n1:_NavContainerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The NavContainer control handles hierarchic navigation between Pages or other fullscreen controls.

All children of this control will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="NewsContent" type="n1:_NewsContentType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>This control displays the news content text and subheader in a tile.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="NotificationListBase" type="n1:_NotificationListBaseType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>The NotificationListBase is the base class for NotificationListItem and NotificationListGroup.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="NotificationListGroup" type="n1:_NotificationListGroupType" substitutionGroup="n1:NotificationListBase">
<xsd:annotation>
<xsd:documentation>The NotificationListItemGroup control is used for grouping NotificationListItems of the same type.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="NotificationListItem" type="n1:_NotificationListItemType" substitutionGroup="n1:NotificationListBase">
<xsd:annotation>
<xsd:documentation>The NotificationListItem control is suitable for showing notifications to the user.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="NumericContent" type="n1:_NumericContentType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Shows numeric values used for example in tiles colored according to their meaning and displays deviations.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ObjectAttribute" type="n1:_ObjectAttributeType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The ObjectAttribute control displays a text field that can be normal or active. The ObjectAttribute fires a press event when the user selects active text.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ObjectHeader" type="n1:_ObjectHeaderType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>ObjectHeader is a display control that enables the user to easily identify a specific object. The object header title is the key identifier of the object and additional text and icons can be used to further distinguish it from other objects.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ObjectIdentifier" type="n1:_ObjectIdentifierType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The ObjectIdentifier is a display control that enables the user to easily identify a specific object. The ObjectIdentifier title is the key identifier of the object and additional text and icons can be used to further distinguish it from other objects.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ObjectListItem" type="n1:_ObjectListItemType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>ObjectListItem is a display control that provides summary information about an object as a list item. The ObjectListItem title is the key identifier of the object. Additional text and icons can be used to further distinguish it from other objects. Attributes and statuses can be used to provide additional meaning about the object to the user.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ObjectMarker" type="n1:_ObjectMarkerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;sap.m.ObjectMarker&lt;/code&gt; control represents one of the following predefined types:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Flagged&lt;/code&gt;
&lt;li&gt;&lt;code&gt;Favorite&lt;/code&gt;
&lt;li&gt;&lt;code&gt;Draft&lt;/code&gt;
&lt;li&gt;&lt;code&gt;Locked&lt;/code&gt;
&lt;li&gt;&lt;code&gt;Unsaved Changes&lt;/code&gt;
&lt;/ul&gt;</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ObjectNumber" type="n1:_ObjectNumberType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The ObjectNumber control displays number and number unit properties for an object. The number can be displayed using semantic
colors to provide additional meaning about the object to the user.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ObjectStatus" type="n1:_ObjectStatusType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Status information that can be either text with a value state, or an icon.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="OverflowToolbar" type="n1:_OverflowToolbarType" substitutionGroup="n1:Toolbar">
<xsd:annotation>
<xsd:documentation>The OverflowToolbar control is a container based on sap.m.Toolbar, that provides overflow when its content does not fit in the visible area.

Note: It is recommended that you use OverflowToolbar over {@link sap.m.Toolbar}, unless you want to avoid overflow in favor of shrinking.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="OverflowToolbarLayoutData" type="n1:_OverflowToolbarLayoutDataType" substitutionGroup="n1:ToolbarLayoutData">
<xsd:annotation>
<xsd:documentation>Holds layout data for the OverflowToolbar items.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nColumnsItem" type="n1:_P13nColumnsItemType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>Type for &lt;code&gt;columnsItems&lt;/code&gt; aggregation in P13nColumnsPanel control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nColumnsPanel" type="n1:_P13nColumnsPanelType" substitutionGroup="n1:P13nPanel">
<xsd:annotation>
<xsd:documentation>The P13nColumnsPanel control is used to define column-specific settings for table personalization.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nConditionPanel" type="n1:_P13nConditionPanelType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The ConditionPanel Control will be used to implement the Sorting, Filtering and Grouping panel of the new Personalization dialog.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nDialog" type="n1:_P13nDialogType" substitutionGroup="n1:Dialog">
<xsd:annotation>
<xsd:documentation>The P13nDialog control provides a dialog that contains one or more panels. On each of the panels, one or more changes with regards to a
       table can be processed. For example, a panel to set a column to invisible, change the order of the columns or a panel to sort or filter
       tables.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nDimMeasureItem" type="n1:_P13nDimMeasureItemType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>Type for &lt;code&gt;columnsItems&lt;/code&gt; aggregation in P13nDimMeasurePanel control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nDimMeasurePanel" type="n1:_P13nDimMeasurePanelType" substitutionGroup="n1:P13nPanel">
<xsd:annotation>
<xsd:documentation>The P13nDimMeasurePanel control is used to define chart-specific settings like chart type, the visibility, the order and roles of
       dimensions and measures for table personalization.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nFilterItem" type="n1:_P13nFilterItemType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>Type for &lt;code&gt;filterItems&lt;/code&gt; aggregation in P13nFilterPanel control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nFilterPanel" type="n1:_P13nFilterPanelType" substitutionGroup="n1:P13nPanel">
<xsd:annotation>
<xsd:documentation>The P13nFilterPanel control is used to define filter-specific settings for table personalization.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nGroupItem" type="n1:_P13nGroupItemType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>Type for &lt;code&gt;groupItems&lt;/code&gt; aggregation in P13nGroupPanel control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nGroupPanel" type="n1:_P13nGroupPanelType" substitutionGroup="n1:P13nPanel">
<xsd:annotation>
<xsd:documentation>The P13nGroupPanel control is used to define group-specific settings for table personalization.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nItem" type="n1:_P13nItemType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Base type for &lt;code&gt;items&lt;/code&gt; aggregation in P13nPanel control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nPanel" type="n1:_P13nPanelType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Base type for &lt;code&gt;panels&lt;/code&gt; aggregation in P13nDialog control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nSortItem" type="n1:_P13nSortItemType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>Type for &lt;code&gt;sortItems&lt;/code&gt; aggregation in P13nSortPanel control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nSortPanel" type="n1:_P13nSortPanelType" substitutionGroup="n1:P13nPanel">
<xsd:annotation>
<xsd:documentation>The P13nSortPanel control is used to define settings for sorting in table personalization.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Page" type="n1:_PageType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A page is a basic container for a mobile application screen. Usually one page is displayed at a time (in landscape mode or on tablets depending on the layout two pages might be displayed side-by-side).</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="PageAccessibleLandmarkInfo" type="n1:_PageAccessibleLandmarkInfoType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Settings for accessible landmarks which can be applied to the container elements of a &lt;code&gt;sap.m.Page&lt;/code&gt; control.
These landmarks are e.g. used by assistive technologies (like screenreaders) to provide a meaningful page overview.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="PagingButton" type="n1:_PagingButtonType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Enables users to navigate between items/entities.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Panel" type="n1:_PanelType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The Panel control is a container for controls which has a header and content.
The header is always visible while the content can be collapsed if the Panel is expandable.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="PlanningCalendar" type="n1:_PlanningCalendarType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;PlanningCalendar&lt;/code&gt; can display rows with appointments for different persons.
It is possible to define different views and switch between the views.
You can add your own buttons or other controls to the toolbar.

&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;PlanningCalendar&lt;/code&gt; uses parts of the &lt;code&gt;sap.ui.unified&lt;/code&gt; library.
If the &lt;code&gt;sap.ui.unified&lt;/code&gt; library is not loaded before the &lt;code&gt;PlanningCalendar&lt;/code&gt; is loaded,
it will be loaded after the &lt;code&gt;PlanningCalendar&lt;/code&gt; is loaded.
This could lead to a waiting time before a &lt;code&gt;PlanningCalendar&lt;/code&gt; is used for the first time.
To prevent this, applications using the &lt;code&gt;PlanningCalendar&lt;/code&gt; should also load the &lt;code&gt;sap.ui.unified&lt;/code&gt; library.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="PlanningCalendarRow" type="n1:_PlanningCalendarRowType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Row in the &lt;code&gt;PlanningCalendar&lt;/code&gt;.

This element holds the data of one row in the &lt;code&gt;PlanningCalendar&lt;/code&gt;. Once the header information (e.g. person information)
is assigned, the appointments are assigned.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="PlanningCalendarView" type="n1:_PlanningCalendarViewType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>View of the &lt;code&gt;PlanningCalendar&lt;/code&gt;.

The &lt;code&gt;PlanningCalendarView&lt;/code&gt; defines the granularity of the output. It defines what type of intervals (hours, days or months)
and how many intervals are shown.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Popover" type="n1:_PopoverType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Popover is used to present information temporarily but in a way that does not take over the entire screen. The popover content is layered on top of your existing content and it remains visible until the user taps outside of the popover (when modal is set to false) or you explicitly dismiss it (when modal is set to true). The switching between modal and non-modal can also be done when the popover is already opened.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ProgressIndicator" type="n1:_ProgressIndicatorType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Shows the progress of a process in a graphical way. To indicate the progress, the inside of the ProgressIndicator is filled with a color.
Additionally, a user-defined string can be displayed on the ProgressIndicator.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="PullToRefresh" type="n1:_PullToRefreshType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>PullToRefresh control. Put it as the first control in contents of a scroll container or a scrollable page. Do not place it into a page with disabled scrolling.
On touch devices it gets hidden by default and when the user pulls down the page far enough, it gets visible and triggers the "refresh" event.
In non-touch browsers where scrollbars are used for scrolling, it is always visible and triggers the "refresh" event when clicked.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="QuickView" type="n1:_QuickViewType" substitutionGroup="n1:QuickViewBase">
<xsd:annotation>
<xsd:documentation>The QuickView control renders a responsive popover (sap.m.Popover or sap.m.Dialog)
and displays information of an object in a business-card format. It also allows this object to be linked to
another object using one of the links in the responsive popover. Clicking that link updates the information in the
popover with the data of the linked object. Unlimited number of objects can be linked.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="QuickViewBase" type="n1:_QuickViewBaseType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>QuickViewBase class provides base functionality for QuickView and QuickViewCard.
Do not use it directly.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="QuickViewCard" type="n1:_QuickViewCardType" substitutionGroup="n1:QuickViewBase">
<xsd:annotation>
<xsd:documentation>The QuickViewCard control displays information of an object in a business-card format.
It also allows this object to be linked to another object using one of the links.
Clicking that link updates the information with the data of the linked object.
Unlimited number of objects can be linked.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="QuickViewGroup" type="n1:_QuickViewGroupType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>QuickViewGroup consists of a title (optional) and an entity of group elements.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="QuickViewGroupElement" type="n1:_QuickViewGroupElementType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>QuickViewGroupElement is a combination of one label and another control (Link or Text) associated to this label.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="QuickViewPage" type="n1:_QuickViewPageType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>QuickViewPage consists of  a page header, an object icon or image,
an object name with short description, and an object information divided in groups.
The control uses the sap.m.SimpleForm control to display information.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="RadioButton" type="n1:_RadioButtonType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>RadioButton is a control similar to CheckBox, but it allows the user to choose only one of the predefined set of options.

Usually, RadioButton is used in a group with other RadioButtons (with the groupName property or by using sap.m.RadioButtonGroup), thus providing a limited choice for the user.
An event is triggered when the user makes a change of the selection.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="RadioButtonGroup" type="n1:_RadioButtonGroupType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>This control is used as a wrapper for a group of sap.m.RadioButton controls, which then can be used as a single UI element.
You can select only one of the grouped radio buttons at a time.
The RadioButtonGroup lets you do things like attach a single event handler on a group of buttons, rather than on each individual button.
The grouped radio buttons can be arranged within different number of columns.
Based on the number of specified columns and the number of radio buttons used, different layout types can be achieved - as a 'matrix',
horizontally or vertically aligned radio buttons.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="RangeSlider" type="n1:_RangeSliderType" substitutionGroup="n1:Slider">
<xsd:annotation>
<xsd:documentation>A range slider is a user interface control that enables the user
to select a value range in a predifined numerical interval.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="RatingIndicator" type="n1:_RatingIndicatorType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Is used to rate content. The amount of rating symbols can be specified, as well as the URIs to the
image icons which shall be used as rating symbols. When the user performs a rating, an event is fired.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ResponsivePopover" type="n1:_ResponsivePopoverType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>This control acts responsively to the type of device. It acts as a sap.m.Popover on desktop and tablet, while on phone it acts as a sap.m.Dialog with stretch set to true.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ScrollContainer" type="n1:_ScrollContainerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The ScrollContainer is a control that can display arbitrary content within a limited screen area and provides touch scrolling to make all content accessible.

Note that it is not recommended to have nested scrolling areas that scroll into the same direction (e.g. a ScrollContainer that scrolls vertically inside a Page control with scrolling enabled). This is currently not considered a valid use-case of a good UI and the behavior will feel wrong.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SearchField" type="n1:_SearchFieldType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Enables users to input a search string.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SegmentedButton" type="n1:_SegmentedButtonType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>SegmentedButton is a horizontal control made of multiple buttons, which can display a title or an image. It automatically resizes the buttons to fit proportionally within the control. When no width is set, the control uses the available width.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SegmentedButtonItem" type="n1:_SegmentedButtonItemType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>The SegmentedButtonItem control is used for creating buttons for the sap.m.SegmentedButton.
It is derived from a core sap.ui.core.Item.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Select" type="n1:_SelectType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;sap.m.Select&lt;/code&gt; control provides a list of items that allows users to select an item.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SelectDialog" type="n1:_SelectDialogType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A SelectDialog is a dialog containing a list, search functionality to filter it and a confirmation/cancel button. The control can be used when the user should select one or multiple items out of many.

The list used in the SelectDialog is a growing list and can be filled with a any kind of list item. The search field triggers the events "search" and "liveChange" where a filter function can be applied to the list binding.

After selecting an item in single selection mode or after confirming in multi selection mode, the dialog will be closed and the event "confirm" is fired with the items that have been selected. By default, the selection will also be reset to allow for a new selection when opening the dialog again.

When cancelling the selection, the event "change" will be fired and the selection is restored to the state when the dialog was opened.

NOTE: The growing functionality of the list does not support two-way Binding, so if you use this control with a JSON model make sure the binding mode is set to "OneWay" and that you update the selection model manually with the items passed in the "confirm" event.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SelectList" type="n1:_SelectListType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;sap.m.SelectList&lt;/code&gt; displays a list of items that allows the user to select an item.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Shell" type="n1:_ShellType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The Shell control can be used as root element of applications. It can contain an App or a &lt;code&gt;SplitApp&lt;/code&gt; control.
The Shell provides some overarching functionality for the overall application and takes care of visual adaptation, such as a frame around the App, on desktop browser platforms.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SlideTile" type="n1:_SlideTileType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The control that displays multiple GenericTile controls as changing slides.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Slider" type="n1:_SliderType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A slider is a user interface control that enables the user to adjust values in a specified numerical range.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SplitApp" type="n1:_SplitAppType" substitutionGroup="n1:SplitContainer">
<xsd:annotation>
<xsd:documentation>SplitApp is another root element of a UI5 mobile application besides App control. It maintains two NavContainers if running on tablet and one - on phone.
The display of master NavContainer depends on the portrait/landscape mode of the device and the mode of SplitApp.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SplitContainer" type="n1:_SplitContainerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>SplitContainer maintains two NavContainers if running on tablet or desktop and one NavContainer - on phone.
The display of the master NavContainer depends on the portrait/landscape mode of the device and the mode of SplitContainer.

NOTE: This control must be rendered as a full screen control in order to make the show/hide master area work properly.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="StandardListItem" type="n1:_StandardListItemType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>&lt;code&gt;sap.m.StandardListItem&lt;/code&gt; is a list item providing the most common use cases, e.g. image, title and description.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="StandardTile" type="n1:_StandardTileType" substitutionGroup="n1:Tile">
<xsd:annotation>
<xsd:documentation>The StandardTile control is displayed in the tile container.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SuggestionItem" type="n1:_SuggestionItemType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>Display suggestion list items.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Switch" type="n1:_SwitchType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A switch is a user interface control on mobile devices that is used for change between binary states. The user can also drag the button handle or tap to change the state.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="TabContainer" type="n1:_TabContainerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The TabContainer control represents a collection of tabs with associated content.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="TabContainerItem" type="n1:_TabContainerItemType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>An item to be used in a TabContainer.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="TabStripSelectList" type="n1:_TabStripSelectListType" substitutionGroup="n1:SelectList">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;sap.m.TabStripSelectList&lt;/code&gt; displays a list of items that allows the user to select an item.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Table" type="n1:_TableType" substitutionGroup="n1:ListBase">
<xsd:annotation>
<xsd:documentation>&lt;code&gt;sap.m.Table&lt;/code&gt; control provides a set of sophisticated and convenience functions for responsive table design.
To render the &lt;code&gt;sap.m.Table&lt;/code&gt; properly, the order of the &lt;code&gt;columns&lt;/code&gt; aggregation should match with the order of the items &lt;code&gt;cells&lt;/code&gt; aggregation. Also &lt;code&gt;sap.m.Table&lt;/code&gt; requires at least one visible &lt;code&gt;sap.m.Column&lt;/code&gt; in &lt;code&gt;columns&lt;/code&gt; aggregation.
For mobile devices, the recommended limit of table rows is 100 (based on 4 columns) to assure proper performance. To improve initial rendering on large tables, use the &lt;code&gt;growing&lt;/code&gt; feature.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="TableSelectDialog" type="n1:_TableSelectDialogType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>TableSelectDialog provides you with an easier way to create a dialog that contains a list with grouping and search functionalities.
The Table used in a SelectDialog is a Table with Columns. After selecting an item, the dialog is closed and a callback function returns the item being selected.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Text" type="n1:_TextType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The Text control can be used for embedding longer text paragraphs, that need text wrapping, into your application.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="TextArea" type="n1:_TextAreaType" substitutionGroup="n1:InputBase">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;sap.m.TextArea&lt;/code&gt; enables multi-line text input.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Tile" type="n1:_TileType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A tile to be displayed in the tile container. Use this
tile as the base class for specialized tile implementations.
Use the renderer _addOuterClass methods to add a style class to the main
surface of the Tile. In this class set the background color, gradients
or background images.
Instead of implementing the default render method in the renderer, implement
your content HTML in the _renderContent method of the specialized tile.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="TileContainer" type="n1:_TileContainerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A container that arranges same-size tiles nicely on carousel pages.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="TileContent" type="n1:_TileContentType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>This control is used within the GenericTile control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Title" type="n1:_TitleType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The Title control represents a single line of text with explicit header / title semantics.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ToggleButton" type="n1:_ToggleButtonType" substitutionGroup="n1:Button">
<xsd:annotation>
<xsd:documentation>The ToggleButton Control is a Button that can be toggled between pressed and normal state</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Token" type="n1:_TokenType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;sap.m.Token&lt;/code&gt; is a container of a single text item with a delete icon if the token is in edit mode.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Tokenizer" type="n1:_TokenizerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Tokenizer displays multiple tokens</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Toolbar" type="n1:_ToolbarType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The Toolbar control is a horizontal container that is most commonly used to display buttons, labels, selects and various other input controls.

By default, Toolbar items are shrinkable if they have percent-based width (e.g. Input, Slider) or implement the {@link sap.ui.core.IShrinkable} interface (e.g. Text, Label). This behavior can be overridden by providing {@link sap.m.ToolbarLayoutData} for the Toolbar items.

Note: It is recommended that you use {@link sap.m.OverflowToolbar} over Toolbar, unless you want to avoid overflow in favor of shrinking.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ToolbarLayoutData" type="n1:_ToolbarLayoutDataType" substitutionGroup="n0:LayoutData">
<xsd:annotation>
<xsd:documentation>Defines layout data for the toolbar items.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ToolbarSeparator" type="n1:_ToolbarSeparatorType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Creates a visual separator (theme dependent: padding, margin, line) between the preceding and succeeding toolbar item.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ToolbarSpacer" type="n1:_ToolbarSpacerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>This control can be used to add horizontal space between toolbar items.
Note: ToolbarLayoutData should not be used with this control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="UploadCollection" type="n1:_UploadCollectionType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>This control allows users to upload single or multiple files from their devices (desktop PC, tablet or phone) and attach them into the application.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="UploadCollectionItem" type="n1:_UploadCollectionItemType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Items provide information about the uploaded files.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="UploadCollectionParameter" type="n1:_UploadCollectionParameterType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Represents a parameter for the UploadCollection.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="UploadCollectionToolbarPlaceholder" type="n1:_UploadCollectionToolbarPlaceholderType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>This control needs to be used when you would like to create a customizable toolbar for the UploadCollection. Always a FileUploader instance is
required in the toolbar, the FileUploader will be placed in the position defined by the application.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="VBox" type="n1:_VBoxType" substitutionGroup="n1:FlexBox">
<xsd:annotation>
<xsd:documentation>The VBox control builds the container for a vertical flexible box layout. VBox is a convenience control as it is just a specialized FlexBox control.

Browser support:
This control is not supported in Internet Explorer 9!</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ViewSettingsCustomItem" type="n1:_ViewSettingsCustomItemType" substitutionGroup="n1:ViewSettingsItem">
<xsd:annotation>
<xsd:documentation>The ViewSettingsCustomItem control is used for modelling custom filters in the ViewSettingsDialog.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ViewSettingsCustomTab" type="n1:_ViewSettingsCustomTabType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>The ViewSettingsCustomTab control is used for adding custom tabs in the ViewSettingsDialog.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ViewSettingsDialog" type="n1:_ViewSettingsDialogType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The ViewSettingsDialog control provides functionality to easily select the options for sorting, grouping, and filtering data. It is a composite control, consisting of a modal popover and several internal lists. There are three different tabs (Sort, Group, Filter) in the dialog that can be activated by filling the respective associations. If only one association is filled, the other tabs are automatically hidden. The selected options can be used to create sorters and filters for the table.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ViewSettingsFilterItem" type="n1:_ViewSettingsFilterItemType" substitutionGroup="n1:ViewSettingsItem">
<xsd:annotation>
<xsd:documentation>A ViewSettingsFilterItem control is used for modelling filter behaviour in the ViewSettingsDialog.
It is derived from a core Item, but does not support the base class properties like textDirection and enabled.
Setting these properties will not have any effects.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ViewSettingsItem" type="n1:_ViewSettingsItemType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>ViewSettingsItem is used for modelling filter behaviour in the ViewSettingsDialog.
It is derived from a core Item, but does not support the base class properties "textDirection" and "enabled", setting these properties will not have any effects.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Wizard" type="n1:_WizardType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The Wizard control enables users to accomplish a single goal
which consists of multiple dependable sub-tasks.
Each sub-task is provided in the form of a WizardStep.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="WizardStep" type="n1:_WizardStepType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The WizardStep is a container control which should be used mainly to aggregate user input controls.
It gives the developer the ability to validate, invalidate the step and define subsequent steps.
Note: The WizardStep control control is supposed to be used only as an aggregation of the Wizard control,
and should not be used as a standalone one.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="AddAction" type="n1:_AddActionType" substitutionGroup="n1:SemanticButton">
<xsd:annotation>
<xsd:documentation>An AddAction button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.

See {@link sap.m.semantic.MasterPage#addAction}, {@link sap.m.semantic.FullscreenPage#addAction}, {@link sap.m.semantic.DetailPage#addAction}</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="CancelAction" type="n1:_CancelActionType" substitutionGroup="n1:SemanticButton">
<xsd:annotation>
<xsd:documentation>A CancelAction button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DeleteAction" type="n1:_DeleteActionType" substitutionGroup="n1:SemanticButton">
<xsd:annotation>
<xsd:documentation>A DeleteAction button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DetailPage" type="n1:_DetailPageType" substitutionGroup="n1:ShareMenuPage">
<xsd:annotation>
<xsd:documentation>A DetailPage is a {@link sap.m.semantic.ShareMenuPage} that supports semantic content of the following types:

&lt;ul&gt;
	&lt;li&gt;{@link sap.m.semantic.AddAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.MainAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.PositiveAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.NegativeAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.ForwardAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.EditAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.SaveAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.DeleteAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.CancelAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.FlagAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.FavoriteAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.OpenInAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.DiscussInJamAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.ShareInJamAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.SendEmailAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.SendMessageAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.PrintAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.MessagesIndicator}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.DraftIndicator}&lt;/li&gt;
&lt;/ul&gt;</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DiscussInJamAction" type="n1:_DiscussInJamActionType" substitutionGroup="n1:SemanticButton">
<xsd:annotation>
<xsd:documentation>A DiscussInJamAction button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="EditAction" type="n1:_EditActionType" substitutionGroup="n1:SemanticButton">
<xsd:annotation>
<xsd:documentation>An EditAction button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FavoriteAction" type="n1:_FavoriteActionType" substitutionGroup="n1:SemanticToggleButton">
<xsd:annotation>
<xsd:documentation>A FavoriteAction button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FilterAction" type="n1:_FilterActionType" substitutionGroup="n1:SemanticButton">
<xsd:annotation>
<xsd:documentation>A FilterAction button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FilterSelect" type="n1:_FilterSelectType" substitutionGroup="n1:SemanticSelect">
<xsd:annotation>
<xsd:documentation>A FilterSelect button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FlagAction" type="n1:_FlagActionType" substitutionGroup="n1:SemanticToggleButton">
<xsd:annotation>
<xsd:documentation>A FlagAction button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ForwardAction" type="n1:_ForwardActionType" substitutionGroup="n1:SemanticButton">
<xsd:annotation>
<xsd:documentation>A ForwardAction button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FullscreenPage" type="n1:_FullscreenPageType" substitutionGroup="n1:ShareMenuPage">
<xsd:annotation>
<xsd:documentation>A FullscreenPage is a {@link sap.m.semantic.ShareMenuPage} that supports semantic content of the following types:

&lt;ul&gt;
 &lt;li&gt;{@link sap.m.semantic.AddAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.MainAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.PositiveAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.NegativeAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.ForwardAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.EditAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.SaveAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.DeleteAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.CancelAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.FlagAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.FavoriteAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.OpenInAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.DiscussInJamAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.ShareInJamAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.SendEmailAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.SendMessageAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.PrintAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.MessagesIndicator}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.DraftIndicator}&lt;/li&gt;
&lt;/ul&gt;</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GroupAction" type="n1:_GroupActionType" substitutionGroup="n1:SemanticButton">
<xsd:annotation>
<xsd:documentation>A GroupAction button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GroupSelect" type="n1:_GroupSelectType" substitutionGroup="n1:SemanticSelect">
<xsd:annotation>
<xsd:documentation>A GroupSelect button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MainAction" type="n1:_MainActionType" substitutionGroup="n1:SemanticButton">
<xsd:annotation>
<xsd:documentation>A MainAction button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MasterPage" type="n1:_MasterPageType" substitutionGroup="n1:SemanticPage">
<xsd:annotation>
<xsd:documentation>A MasterPage is a {@link sap.m.semantic.SemanticPage} that supports semantic content of the following types:

&lt;ul&gt;
	&lt;li&gt;{@link sap.m.semantic.AddAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.MainAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.PositiveAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.NegativeAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.ForwardAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.EditAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.SaveAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.DeleteAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.CancelAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.MultiSelectAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.FlagAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.FavoriteAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.SortAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.SortSelect}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.FilterAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.FilterSelect}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.GroupAction}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.GroupSelect}&lt;/li&gt;
	&lt;li&gt;{@link sap.m.semantic.MessagesIndicator}&lt;/li&gt;
&lt;/ul&gt;</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MessagesIndicator" type="n1:_MessagesIndicatorType" substitutionGroup="n1:SemanticButton">
<xsd:annotation>
<xsd:documentation>A MessagesIndicator button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MultiSelectAction" type="n1:_MultiSelectActionType" substitutionGroup="n1:SemanticToggleButton">
<xsd:annotation>
<xsd:documentation>A MultiSelectAction button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="NegativeAction" type="n1:_NegativeActionType" substitutionGroup="n1:SemanticButton">
<xsd:annotation>
<xsd:documentation>A NegativeAction button has default semantic-specific properties and
is eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="OpenInAction" type="n1:_OpenInActionType" substitutionGroup="n1:SemanticButton">
<xsd:annotation>
<xsd:documentation>An OpenInAction button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="PositiveAction" type="n1:_PositiveActionType" substitutionGroup="n1:SemanticButton">
<xsd:annotation>
<xsd:documentation>A PositiveAction button has default semantic-specific properties and
is eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="PrintAction" type="n1:_PrintActionType" substitutionGroup="n1:SemanticButton">
<xsd:annotation>
<xsd:documentation>A PrintAction button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SaveAction" type="n1:_SaveActionType" substitutionGroup="n1:SemanticButton">
<xsd:annotation>
<xsd:documentation>A SaveAction button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SemanticButton" type="n1:_SemanticButtonType" substitutionGroup="n1:SemanticControl">
<xsd:annotation>
<xsd:documentation>A semantic button is either a {@link sap.m.Button} or {@link sap.m.OverflowButton} ,
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SemanticControl" type="n1:_SemanticControlType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>A semantic control is an abstraction for either a {@link sap.m.semantic.SemanticButton} or {@link sap.m.semantic.SemanticSelect} ,
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SemanticPage" type="n1:_SemanticPageType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A semantic page is an enhanced {@link sap.m.Page}, that can contain controls with semantic meaning @see sap.m.semantic.SemanticControl.&lt;br&gt;

Content specified in the {@link sap.m.semantic.SemanticPage#semanticControls} aggregations will be automatically positioned in dedicated sections of the footer or the header of the page, depending on the control's semantics.&lt;br&gt;
For example, a semantic button of type {@link sap.m.semantic.PositiveAction} will be positioned in the right side of the footer, and in logically correct sequence order with respect to any other included semantic controls.&lt;br&gt;

The full list of what we internally define for semantic content is:
 &lt;ul&gt;
     &lt;li&gt;Visual properties (e.g. AddAction will be styled as an icon button)&lt;/li&gt;
     &lt;li&gt;Position in the page (UX guidelines specify that some buttons should be in the header only, while others are in the footer or the "share" menu, so we do the correct positioning)&lt;/li&gt;
     &lt;li&gt;Sequence order (UX guidelines define a specific sequence order of semantic controls with respect to each other)&lt;/li&gt;
     &lt;li&gt;Default localized tooltip for icon-only buttons&lt;/li&gt;
     &lt;li&gt;Overflow behavior (UX quidelines define which buttons are allowed to go to the overflow of the toolbar when the screen gets narrower). For icon buttons, we ensure that the text label of the button appears when the button is in overflow, as specified by UX.&lt;/li&gt;
     &lt;li&gt;Screen reader support (invisible text for reading the semantic type)&lt;/li&gt;
 &lt;/ul&gt;

In addition to the predefined semantic controls, the SemanticPage can host also custom application-provided controls. It preserves most of the API of {@link sap.m.Page} for specifying page content.&lt;br&gt;</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SemanticSelect" type="n1:_SemanticSelectType" substitutionGroup="n1:SemanticControl">
<xsd:annotation>
<xsd:documentation>A semantic select is a {@link sap.m.Select} eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SemanticToggleButton" type="n1:_SemanticToggleButtonType" substitutionGroup="n1:SemanticButton">
<xsd:annotation>
<xsd:documentation>A SemanticToggleButton is eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SendEmailAction" type="n1:_SendEmailActionType" substitutionGroup="n1:SemanticButton">
<xsd:annotation>
<xsd:documentation>A SendEmailAction button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SendMessageAction" type="n1:_SendMessageActionType" substitutionGroup="n1:SemanticButton">
<xsd:annotation>
<xsd:documentation>A SendMessageAction button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ShareInJamAction" type="n1:_ShareInJamActionType" substitutionGroup="n1:SemanticButton">
<xsd:annotation>
<xsd:documentation>A ShareInJamAction button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ShareMenuPage" type="n1:_ShareMenuPageType" substitutionGroup="n1:SemanticPage">
<xsd:annotation>
<xsd:documentation>A ShareMenuPage is a {@link sap.m.semantic.SemanticPage} with support for "share" menu in the footer.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SortAction" type="n1:_SortActionType" substitutionGroup="n1:SemanticButton">
<xsd:annotation>
<xsd:documentation>A SortAction button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SortSelect" type="n1:_SortSelectType" substitutionGroup="n1:SemanticSelect">
<xsd:annotation>
<xsd:documentation>A SortSelect button has default semantic-specific properties and is
eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<!--type definition for UIElement 'sap.m.ActionListItem'-->
<xsd:complexType name="_ActionListItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the text that appears in the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ActionSelect'-->
<xsd:complexType name="_ActionSelectType">
<xsd:complexContent>
<xsd:extension base="n1:_SelectType">
<xsd:attribute name="buttons" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Buttons to be added to the ActionSelect content.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ActionSheet'-->
<xsd:complexType name="_ActionSheetType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="buttons" minOccurs="0">
<xsd:annotation>
<xsd:documentation>These buttons are added to the content area in ActionSheet control. When button is tapped, the ActionSheet is closed before the tap event listener is called.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="placement" type="n1:_PlacementTypeType">
<xsd:annotation>
<xsd:documentation>The ActionSheet behaves as a sap.m.Popover in iPad and this property is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal, sap.m.PlacementType.HorizontalPreferedLeft, sap.m.PlacementType.HorizontalPreferedRight, sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferedTop, sap.m.PlacementType.VerticalPreferedBottom. The default value is sap.m.PlacementType.Bottom.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showCancelButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this is set to true, there will be a cancel button shown below the action buttons. There won't be any cancel button shown in iPad regardless of this property. The default value is set to true.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancelButtonText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This is the text displayed in the cancelButton. Default value is "Cancel", and it's translated according to the current locale setting. This property will be ignored when running either in iPad or showCancelButton is set to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Title will be shown in the header area in iPhone and every Android devices. This property will be ignored in tablets and desktop browser.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancelButtonTap" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the cancelButton is tapped. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by tapping outside.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired before the ActionSheet is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired after the ActionSheet is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired before the ActionSheet is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired after the ActionSheet is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancelButtonPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the cancelButton is clicked. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by clicking outside.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.App'-->
<xsd:complexType name="_AppType">
<xsd:complexContent>
<xsd:extension base="n1:_NavContainerType">
<xsd:attribute name="homeIcon" type="n0:_anyType">
<xsd:annotation>
<xsd:documentation>The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".

Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.

This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.

A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.

One example is:

app.setHomeIcon({
'phone':'phone-icon.png',
'phone@2':'phone-retina.png',
'tablet':'tablet-icon.png',
'tablet@2':'tablet-retina.png',
'icon':'desktop.ico'
});

The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.
If an object is given but one of the sizes is not given, the largest given icon will be used for this size.

On Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting the "homeIconPrecomposed" property to "true".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundColor" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Background color of the App. If set, this color will override the default background defined by the theme. So this should only be set when really required.
Any configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting.
Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundImage" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Background image of the App. If set, this image will override the default background defined by the theme. So this should only be set when really required.
This background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting.
Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundRepeat" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the background image (if configured) should be proportionally stretched to cover the whole App (false) or whether it should be tiled (true).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundOpacity" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
This can be used to make the application content better readable by making the background image partly transparent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="orientationChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the orientation (portrait/landscape) of the device is changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Bar'-->
<xsd:complexType name="_BarType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="contentLeft" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Represents the left content area, usually containing a button or an app icon. If it is overlapped by the right content, its content will disappear and the text will show an ellipsis.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="contentMiddle" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Represents the middle content area. Controls such as label, segmented buttons or select can be placed here. The content is centrally positioned if there is enough space. If the right or left content overlaps the middle content, the middle content will be centered in the space between the left and the right content.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="contentRight" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Represents the right content area. Controls such as action buttons or search field can be placed here.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="enableFlexBox" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this flag is set to true, contentMiddle will be rendered as a HBox and layoutData can be used to allocate available space.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="translucent" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the Bar is partially translucent.
It is only applied for touch devices.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="design" type="n1:_BarDesignType">
<xsd:annotation>
<xsd:documentation>Determines the design of the bar. If set to auto, it becomes dependent on the place where the bar is placed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Breadcrumbs'-->
<xsd:complexType name="_BreadcrumbsType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'links'-->
<xsd:element ref="n1:Link" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="links" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A list of all the active link elements in the Breadcrumbs control.
&lt;b&gt;Note:&lt;/b&gt; Enabling the property &lt;code&gt;wrapping&lt;/code&gt; of the link will not work
since it's incompatible with the concept of the control.
The other properties will work, but their effect may be undesirable.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Link" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="currentLocationText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the text of current/last element in the Breadcrumbs path.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.BusyDialog'-->
<xsd:complexType name="_BusyDialogType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Optional text displayed inside the dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets the title of the BusyDialog. The default value is an empty string.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIcon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon, used from the BusyIndicator. This icon is invisible in iOS platform and it is density aware. You can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screens.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIconRotationSpeed" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Defines the rotation speed of the given image. If GIF file is used, the speed has to be set to 0. The value is in milliseconds.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this is set to &lt;code&gt;false&lt;/code&gt;, the source image will be loaded directly without attempting to fetch the density perfect image for high density devices.
By default, this is set to &lt;code&gt;true&lt;/code&gt; but then one or more requests are sent trying to get the density perfect version of the image.

If bandwidth is the key for the application, set this value to &lt;code&gt;false&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIconWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of the provided icon with default value "44px".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIconHeight" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Height of the provided icon with default value "44px".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancelButtonText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The text of the cancel button. The default text is "Cancel" (translated to the respective language).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showCancelButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if the cancel button will be rendered inside the busy dialog. The default value is set to &lt;code&gt;false&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="close" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when the busy dialog is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.BusyIndicator'-->
<xsd:complexType name="_BusyIndicatorType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines text to be displayed below the busy indicator.
It can be used to inform the user of the current operation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Options for the text direction are RTL and LTR.
Alternatively, the control can inherit the text direction from its parent container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIcon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon URL if an icon is used as the busy indicator.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIconRotationSpeed" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Defines the rotation speed of the given image.
If a .gif is used, the speed has to be set to 0.
The unit is in ms.
&lt;b&gt;Note:&lt;/b&gt; Values are considered valid when greater than or equal to 0.
If invalid value is provided the speed defaults to 0.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this is set to false, the src image will be loaded directly without attempting
to fetch the density perfect image for high density device.
By default, this is set to true but then one or more requests are sent to the server,
trying to get the density perfect version of the specified image.
If bandwidth is the key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIconWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of the provided icon. By default 44px are used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIconHeight" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Height of the provided icon. By default 44px are used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="size" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the size of the busy indicator.
The animation consists of three circles, each of which will be this size.
Therefore the total width of the control amounts to three times the given size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="design" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Setting this property will not have any effect on the appearance of the BusyIndicator
in versions greater than or equal to 1.32.1</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Button'-->
<xsd:complexType name="_ButtonType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Button text</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n1:_ButtonTypeType">
<xsd:annotation>
<xsd:documentation>Type of a button (e.g. Default, Accept, Reject, Back, etc.)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon to be displayed as graphical element within the button. This can be an image or an icon from the icon font.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconFirst" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true (default), the display sequence is 1. icon 2. control text</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activeIcon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The source property of an alternative icon for the active (depressed) state of the button.
Both active and default icon properties should be defined and have the same type: image or icon font.
If the &lt;code&gt;icon&lt;/code&gt; property is not set or has a different type, the active icon is not displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If only one version of image is provided, set this value to false to avoid the attempt of fetching density perfect image.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tap" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user taps the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user clicks on the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Carousel'-->
<xsd:complexType name="_CarouselType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'pages'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="pages" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content which the carousel displays.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The height of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="loop" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether the carousel should loop, i.e show the first page after the last page is reached and vice versa.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showPageIndicator" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Show or hide carousel's page indicator.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="pageIndicatorPlacement" type="n1:_PlacementTypeType">
<xsd:annotation>
<xsd:documentation>Defines where the carousel's page indicator is displayed. Possible values are sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. Other values are ignored and the default value will be applied. The default value is sap.m.PlacementType.Bottom.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showBusyIndicator" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Show or hide busy indicator in the carousel when loading pages after swipe.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="busyIndicatorSize" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Size of the busy indicators which can be displayed in the carousel.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activePage" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Provides getter and setter for the currently displayed page. For the setter, argument may be the control itself, which must be member of the carousel's page list, or the control's id.
The getter will return the control id</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="loadPage" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Carousel requires a new page to be loaded. This event may be used to fill the content of that page</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="unloadPage" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Carousel does not display a page any longer and unloads it. This event may be used to clean up the content of that page.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="pageChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after a carousel swipe has been completed. It is triggered both by physical swipe events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId' functions.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.CheckBox'-->
<xsd:complexType name="_CheckBoxType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence/>
<xsd:attribute name="selected" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Stores the state of the checkbox whether it is selected or not.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Disables the Checkbox. Disabled controls are not interactive and are rendered differently according to the theme.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The 'name' property to be used in the HTML code, for example for HTML forms that send data to the server via submit.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the text displayed next to the checkbox</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Aligns the text of the checkbox. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of the checkbox`s label</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activeHandling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Flag to switch on activeHandling, when it is switched off, there will be no visual changes on active state. Default value is 'true'</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the user shall be allowed to edit the state of the checkbox</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Accepts the core enumeration ValueState.type that supports 'None', 'Error', 'Warning' and 'Success'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Column'-->
<xsd:complexType name="_ColumnType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<!--default aggregation 'header'-->
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="header" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Control to be displayed in the column header.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="footer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Control to be displayed in the column footer.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the column. If you leave it empty then this column covers the remaining space.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Horizontal alignment of the column content. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".

NOTE: Control with a "textAlign" property inherits the horizontal alignment.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="vAlign" type="n0:_VerticalAlignType">
<xsd:annotation>
<xsd:documentation>Vertical alignment of the cells in a column. Possible values are "Inherit", "Top", "Middle", "Bottom"
This property does not affect the vertical alignment of header and footer.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="styleClass" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSS class name for column contents(header, cells and footer of column). This property can be used for different column styling. If column is shown as pop-in then this class name is applied to related pop-in row.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether or not the column is visible. Invisible columns are not rendered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minScreenWidth" type="xsd:string">
<xsd:annotation>
<xsd:documentation>By default column is always shown. If you set this property, control checks the minimum width of the screen to show or hide this column.
As you can give specific CSS sizes(e.g: "480px" or "40em"), you can also use sap.m.ScreenSize enumeration(e.g: "Phone", "Tablet", "Desktop", "Small", "Medium", "Large", ....).

sap.m.Column.MediaQuery1-&gt;Range1 = 199

This property can be used for responsive design. e.g: "40em"(or "640px" or "Tablet") setting shows this column in iPad(and Desktop) but hides in iPhone.
Please also see "demandPopin" property</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="demandPopin" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>According to your minScreenWidth settings, the column can be hidden in different screen sizes.
Setting this property to true, shows this column as pop-in instead of hiding it.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="popinHAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Horizontal alignment of the pop-in content. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".

NOTE: Controls with a text align do not inherit the horizontal alignment.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="popinDisplay" type="n1:_PopinDisplayType">
<xsd:annotation>
<xsd:documentation>Defines enumerated display options for the pop-in.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mergeDuplicates" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set "true" to merge repeating cells(duplicates) into one cell block.
Please see "mergeFunctionName" property to customize this property.
Note: This feature must not be used together with two-way binding. This property is ignored if a column is shown in the pop-in.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mergeFunctionName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the value getter(serialization) function if "mergeDuplicates" property is set "true"
Control itself uses this function to compare values of two repeating cells.
Default value "getText" is suitable for Label and Text control.
e.g. For "Icon" control "getSrc" can be used.
Note: You can pass one string parameter to given function after "#" sign. e.g. "data#myparameter"</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ColumnListItem'-->
<xsd:complexType name="_ColumnListItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:sequence>
<!--default aggregation 'cells'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="cells" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Every &lt;code&gt;control&lt;/code&gt; inside the &lt;code&gt;cells&lt;/code&gt; aggregation defines one cell of the row.
&lt;b&gt;Note:&lt;/b&gt; The order of the &lt;code&gt;cells&lt;/code&gt; aggregation must match the order of the &lt;code&gt;columns&lt;/code&gt; aggregation of &lt;code&gt;sap.m.Table&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="vAlign" type="n0:_VerticalAlignType">
<xsd:annotation>
<xsd:documentation>Sets the vertical alignment of all the cells within the table row (including selection and navigation).
&lt;b&gt;Note:&lt;/b&gt; &lt;code&gt;vAlign&lt;/code&gt; property of &lt;code&gt;sap.m.Column&lt;/code&gt; overrides the property for cell vertical alignment if both are set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ComboBox'-->
<xsd:complexType name="_ComboBoxType">
<xsd:complexContent>
<xsd:extension base="n1:_ComboBoxBaseType">
<xsd:attribute name="selectedKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key of the selected item.

&lt;b&gt;Note:&lt;/b&gt; If duplicate keys exist, the first item matching the key is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedItemId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>ID of the selected item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSecondaryValues" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the text values of the &lt;code&gt;additionalText&lt;/code&gt; property of a
{@link sap.ui.core.ListItem} are shown.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets or retrieves the selected item from the aggregation named items.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the user types something that matches with an item in the list;
it is also fired when the user presses on a list item, or when navigating via keyboard.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ComboBoxBase'-->
<xsd:complexType name="_ComboBoxBaseType">
<xsd:complexContent>
<xsd:extension base="n1:_ComboBoxTextFieldType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Defines the items contained within this control.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="loadItems" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the end user moves the cursor to the text field, performs
an action that requires items to be loaded, and items are not already loaded. For example,
pressing F4 to open the dropdown list or typing something in the text field fires the event.

&lt;b&gt;Note:&lt;/b&gt; We strongly recommend to only use this feature in performance critical scenarios.
Loading the items lazily (on demand) to defer initialization has several implications for the end user
experience. For example, the busy indicator has to be shown while the items are being loaded and
assistive technology software also has to announce the state changes (which may be confusing
for some screen reader users).

&lt;b&gt;Note&lt;/b&gt;: Currently the &lt;code&gt;sap.m.MultiComboBox&lt;/code&gt; does not support this event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ComboBoxTextField'-->
<xsd:complexType name="_ComboBoxTextFieldType">
<xsd:complexContent>
<xsd:extension base="n1:_InputBaseType">
<xsd:attribute name="maxWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the maximum width of the text field.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the dropdown arrow button is shown.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.CustomListItem'-->
<xsd:complexType name="_CustomListItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content of this list item</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.CustomTile'-->
<xsd:complexType name="_CustomTileType">
<xsd:complexContent>
<xsd:extension base="n1:_TileType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Defines the content of the CustomTile.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.DatePicker'-->
<xsd:complexType name="_DatePickerType">
<xsd:complexContent>
<xsd:extension base="n1:_InputBaseType">
<xsd:attribute name="displayFormat" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The date is displayed in the input field using this format. By default, the medium format of the used locale is used.

Supported format options are pattern-based on Unicode LDML Date Format notation. {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
&lt;b&gt;Note:&lt;/b&gt; If you use data binding on the &lt;code&gt;value&lt;/code&gt; property with type &lt;code&gt;sap.ui.model.type.Date&lt;/code&gt; this property will be ignored.
The format defined in the binding will be used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueFormat" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The date string expected and returned in the &lt;code&gt;value&lt;/code&gt; property uses this format. By default the short format of the used locale is used.


Supported format options are pattern-based on Unicode LDML Date Format notation. {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}

For example, if the date string represents an ABAP DATS type, the format should be "yyyyMMdd".

&lt;b&gt;Note:&lt;/b&gt; If data binding on &lt;code&gt;value&lt;/code&gt; property with type &lt;code&gt;sap.ui.model.type.Date&lt;/code&gt; is used, this property will be ignored.
The format defined in the binding will be used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dateValue" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The date as JavaScript Date object. This is independent from any formatter.

&lt;b&gt;Note:&lt;/b&gt; If this property is used, the &lt;code&gt;value&lt;/code&gt; property should not be changed from the caller.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayFormatType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Displays date in this given type in input field. Default value is taken from locale settings.
Accepted are values of &lt;code&gt;sap.ui.core.CalendarType&lt;/code&gt; or an empty string. If no type is set, the default type of the
configuration is used.
&lt;b&gt;Note:&lt;/b&gt; If data binding on &lt;code&gt;value&lt;/code&gt; property with type &lt;code&gt;sap.ui.model.type.Date&lt;/code&gt; is used, this property will be ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="secondaryCalendarType" type="n0:_CalendarTypeType">
<xsd:annotation>
<xsd:documentation>If set, the days in the calendar popup are also displayed in this calendar type
If not set, the dates are only displayed in the primary calendar type</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minDate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Minimum date that can be shown and selected in the &lt;code&gt;DatePicker&lt;/code&gt;. This must be a JavaScript date object.

&lt;b&gt;Note:&lt;/b&gt; If the &lt;code&gt;minDate&lt;/code&gt; is set to be after the &lt;code&gt;maxDate&lt;/code&gt;,
the &lt;code&gt;maxDate&lt;/code&gt; and the &lt;code&gt;minDate&lt;/code&gt; are switched before rendering.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxDate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Maximum date that can be shown and selected in the &lt;code&gt;DatePicker&lt;/code&gt;. This must be a JavaScript date object.

&lt;b&gt;Note:&lt;/b&gt; If the &lt;code&gt;maxDate&lt;/code&gt; is set to be before the &lt;code&gt;minDate&lt;/code&gt;,
the &lt;code&gt;maxDate&lt;/code&gt; and the &lt;code&gt;minDate&lt;/code&gt; are switched before rendering.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.DateRangeSelection'-->
<xsd:complexType name="_DateRangeSelectionType">
<xsd:complexContent>
<xsd:extension base="n1:_DatePickerType">
<xsd:attribute name="delimiter" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Delimiter between start and end date. Default value is "-".
If no delimiter is given, the one defined for the used locale is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="secondDateValue" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The end date of the range as JavaScript Date object. This is independent from any formatter.

&lt;b&gt;Note:&lt;/b&gt; If this property is used, the &lt;code&gt;value&lt;/code&gt; property should not be changed from the caller.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="from" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Start date of the range.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="to" type="xsd:string">
<xsd:annotation>
<xsd:documentation>End date of the range.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.DateTimeInput'-->
<xsd:complexType name="_DateTimeInputType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence/>
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the value of the control.

The new value must be in the format set by &lt;code&gt;valueFormat&lt;/code&gt;.

The "Now" literal can also be assigned as a parameter to show the current date and/or time.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the user can interact with the control or not.
&lt;b&gt;Note:&lt;/b&gt; Disabled controls cannot be focused and they are out of the tab-chain.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether the control can be modified by the user or not.
&lt;b&gt;Note:&lt;/b&gt; A user can tab to non-editable control, highlight it, and copy the text from it.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Visualizes the validation state of the control, e.g. &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;Warning&lt;/code&gt;, &lt;code&gt;Success&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueStateText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the text that appears in the value state message pop-up. If this is not specified, a default text is shown from the resource bundle.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showValueStateMessage" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the value state message should be shown or not.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the name of the control for the purposes of form submission.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="placeholder" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines a short hint intended to aid the user with data entry when the control has no value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Defines the horizontal alignment of the text that is shown inside the input field.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Defines the text directionality of the input field, e.g. &lt;code&gt;RTL&lt;/code&gt;, &lt;code&gt;LTR&lt;/code&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n1:_DateTimeInputTypeType">
<xsd:annotation>
<xsd:documentation>Type of DateTimeInput (e.g. Date, Time, DateTime)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayFormat" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Displays date value in this given format in text field. Default value is taken from locale settings.
If you use data-binding on value property with type sap.ui.model.type.Date then you can ignore this property or the latter wins.
If the user's browser supports native picker then this property is overwritten by browser with locale settings.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueFormat" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Given value property should match with valueFormat to parse date. Default value is taken from locale settings.
You can only set and get value in this format.
If you use data-binding on value property with type sap.ui.model.type.Date you can ignore this property or the latter wins.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dateValue" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This property as JavaScript Date Object can be used to assign a new value which is independent from valueFormat.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs that label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event gets fired when the selection has finished and the value has changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.DateTimePicker'-->
<xsd:complexType name="_DateTimePickerType">
<xsd:complexContent>
<xsd:extension base="n1:_DatePickerType">
<xsd:sequence/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Dialog'-->
<xsd:complexType name="_DialogType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content inside the dialog.&lt;br/&gt;&lt;b&gt;Note:&lt;/b&gt; When the content of the &lt;code&gt;Dialog&lt;/code&gt; is comprised of controls that use &lt;code&gt;position: absolute&lt;/code&gt;, such as &lt;code&gt;SplitContainer&lt;/code&gt;, the dialog has to have either &lt;code&gt;stretch: true&lt;/code&gt; or &lt;code&gt;contentHeight&lt;/code&gt; set.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="subHeader" minOccurs="0">
<xsd:annotation>
<xsd:documentation>When subHeader is assigned to Dialog, it's rendered directly after the main header in Dialog. SubHeader is out of the content area and won't be scrolled when content's size is bigger than the content area's size.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="customHeader" minOccurs="0">
<xsd:annotation>
<xsd:documentation>CustomHeader is only supported in theme sap_bluecrystal. When it's set, the icon, title and showHeader are properties ignored. Only the customHeader is shown as the header of the dialog.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="beginButton" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The button which is rendered to the left side (right side in RTL mode) of the endButton in the footer area inside the dialog. From UI5 version 1.21.1, there's a new aggregation "buttons" created with which more than 2 buttons can be added to the footer area of dialog. If the new "buttons" aggregation is set, any change made to this aggregation has no effect anymore. When runs on the phone, this button (and the endButton together when set) is (are) rendered at the center of the footer area. When runs on the other platforms, this button (and the endButton together when set) is (are) rendered at the right side (left side in RTL mode) of the footer area.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="endButton" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The button which is rendered to the right side (left side in RTL mode) of the beginButton in the footer area inside the dialog. From UI5 version 1.21.1, there's a new aggregation "buttons" created with which more than 2 buttons can be added to the footer area of dialog. If the new "buttons" aggregation is set, any change made to this aggregation has no effect anymore. When runs on the phone, this button (and the beginButton together when set) is (are) rendered at the center of the footer area. When runs on the other platforms, this button (and the beginButton together when set) is (are) rendered at the right side (left side in RTL mode) of the footer area.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="buttons" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Buttons can be added to the footer area of dialog through this aggregation. When this aggregation is set, any change to beginButton and endButton has no effect anymore. Buttons which are inside this aggregation are aligned at the right side (left side in RTL mode) of the footer instead of in the middle of the footer.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon displayed in the dialog's header. This icon is invisible on the iOS platform and it's density aware. You can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Title text appears in the dialog header.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showHeader" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the header is shown inside the dialog. If this property is set to true, the text and icon property are ignored. This property has a default value true.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n1:_DialogTypeType">
<xsd:annotation>
<xsd:documentation>The type of the dialog. In theme sap_bluecrystal, the type "message" will limit the dialog's width within 480px on tablet and desktop.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="state" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>The state affects the icon and the title color. If other than "None" is set, a predefined icon will be added to the dialog. Setting icon property will overwrite the predefined icon. The default value is "None" which doesn't add any icon to the Dialog control. This property is by now only supported by blue crystal theme.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="stretchOnPhone" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the dialog will displayed on full screen on a phone.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="stretch" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines  if the dialog will be stretched to full screen. This property is only applicable to standard dialog and message type dialog ignores this property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Preferred width of content in Dialog. This property affects the width of dialog on phone in landscape mode, tablet or desktop, because the dialog has a fixed width on phone in portrait mode. If the preferred width is less than the minimum width of dilaog or more than the available width of the screen, it will be overwritten by the min or max value. The current mininum value of dialog width on tablet is 400px.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentHeight" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Preferred height of content in Dialog. If the preferred height is bigger than the available space on screen, it will be overwritten by the maximum available height on screen in order to make sure that dialog isn't cut off.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="horizontalScrolling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if user can scroll horizontally inside dialog when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the dialog, this property needs to be set to false to disable the scrolling in dialog in order to make the scrolling in the child control work properly.
Dialog detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="verticalScrolling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if user can scroll vertically inside dialog when the content is bignger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the dialog, this property needs to be set to false to disable the scrolling in dialog in order to make the scrolling in the child control work properly.
Dialog detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resizable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the dialog is resizable. the dialog is resizable. If this property is set to true, the dialog will have a resize handler in it's bottom right corner. This property has a default value false. The Dialog can be resizable only in desktop mode.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="draggable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the dialog is draggable. If this property is set to true, the dialog will be draggable by it's header. This property has a default value false. The Dialog can be draggable only in desktop mode.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="leftButton" type="xsd:string">
<xsd:annotation>
<xsd:documentation>LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored. Setting leftButton will also set the beginButton internally.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="rightButton" type="xsd:string">
<xsd:annotation>
<xsd:documentation>RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored. Setting rightButton will also set the endButton internally.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialFocus" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Focus is set to the dialog in the sequence of leftButton and rightButton when available. But if some other control needs to get the focus other than one of those two buttons, set the initialFocus with the control which should be focused on. Setting initialFocus to input controls doesn't open the on screen keyboard on mobile device, this is due to the browser limitation that the on screen keyboard can't be opened with javascript code. The opening of on screen keyboard must be triggered by real user action.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired before the dialog is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired after the dialog is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired before the dialog is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired after the dialog is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.DisplayListItem'-->
<xsd:complexType name="_DisplayListItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:attribute name="label" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the label of the list item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the value of the list item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Defines the &lt;code&gt;value&lt;/code&gt; text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.DraftIndicator'-->
<xsd:complexType name="_DraftIndicatorType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence/>
<xsd:attribute name="state" type="n1:_DraftIndicatorStateType">
<xsd:annotation>
<xsd:documentation>State of the indicator. Could be "Saving", "Saved" and "Clear".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minDisplayTime" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Minimum time in milliseconds for showing the draft indicator</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.FacetFilter'-->
<xsd:complexType name="_FacetFilterType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'lists'-->
<xsd:element ref="n1:FacetFilterList" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="lists" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Collection of FacetFilterList controls.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:FacetFilterList" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="showPersonalization" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt; and the FacetFilter type is &lt;code&gt;Simple&lt;/code&gt;, then the Add Facet icon will be displayed and each facet button will also have a Facet Remove icon displayed beside it, allowing the user to deactivate the facet.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n1:_FacetFilterTypeType">
<xsd:annotation>
<xsd:documentation>Defines the default appearance of the FacetFilter on the device. Possible values are &lt;code&gt;Simple&lt;/code&gt; (default) and &lt;code&gt;Light&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveSearch" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables/disables live search on all search fields except for the FacetFilterList search.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSummaryBar" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Shows the summary bar instead of the FacetFilter buttons bar when set to &lt;code&gt;true&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showReset" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Shows/hides the FacetFilter Reset button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showPopoverOKButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, an OK button is displayed for every FacetFilterList popover. This button allows the user to close the popover from within the popover instead of having to click outside of it.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="reset" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the Reset button is pressed to inform that all FacetFilterLists need to be reset.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.FacetFilterItem'-->
<xsd:complexType name="_FacetFilterItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:attribute name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Can be used as input for subsequent actions.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the text to be displayed for the item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="count" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Defines the number of objects that match this item in the target data set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.FacetFilterList'-->
<xsd:complexType name="_FacetFilterListType">
<xsd:complexContent>
<xsd:extension base="n1:_ListType">
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the title of the facet. The facet title is displayed on the facet button when the FacetFilter type is set to &lt;code&gt;Simple&lt;/code&gt;. It is also displayed as a list item in the facet page of the dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="wordWrap" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the item text wraps when it is too long.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="multiSelect" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether multiple or single selection is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="active" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that the list is displayed as a button when the FacetFilter type is set to &lt;code&gt;Simple&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableCaseInsensitiveSearch" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, enables case-insensitive search for OData.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="allCount" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Determines the number of objects that match this item in the target data set when all filter items are selected.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="sequence" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Sequence that determines the order in which FacetFilterList is shown on the FacetFilter. Lists are rendered by ascending order of sequence.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Unique identifier for this filter list.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showRemoveFacetIcon" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether remove icon for facet is visible or hidden.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="retainListSequence" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Retains the list sequence if it is inactive and made active again.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataType" type="n1:_FacetFilterListDataTypeType">
<xsd:annotation>
<xsd:documentation>FacetFilterList data type. Only String data type will provide search function.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="listOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired before the filter list is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="listClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Triggered after the list of items is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.FeedContent'-->
<xsd:complexType name="_FeedContentType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence/>
<xsd:attribute name="size" type="n1:_SizeType">
<xsd:annotation>
<xsd:documentation>Updates the size of the chart. If not set then the default size is applied based on the device tile.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The content text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="subheader" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The subheader.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The actual value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueColor" type="n1:_ValueColorType">
<xsd:annotation>
<xsd:documentation>The semantic color of the value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="truncateValueTo" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The number of characters to display for the value property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when the user chooses the feed content.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.FeedInput'-->
<xsd:complexType name="_FeedInputType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set this flag to "false" to disable both text input and post button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxLength" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The maximum length (the maximum number of characters) for the feed input's value. By default this is not limited.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="placeholder" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The placeholder text shown in the input area as long as the user has not entered any text value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The text value of the feed input. As long as the user has not entered any text the post button is disabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon to be displayed as a graphical element within the feed input. This can be an image or an icon from the icon font.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showIcon" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to "true" (default), icons will be displayed. In case no icon is provided the standard placeholder will be displayed. if set to "false" icons are hidden</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Some mobile devices support higher resolution images while others do not. Therefore, you should provide image resources for all relevant densities.
If the property is set to "true", one or more requests are sent to the server to try and get the perfect density version of an image. If an image of a certain density is not available, the image control falls back to the default image, which should be provided.

If you do not have higher resolution images, you should set the property to "false" to avoid unnecessary round-trips.

Please be aware that this property is relevant only for images and not for icons.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="buttonTooltip" type="n0:_TooltipBaseType">
<xsd:annotation>
<xsd:documentation>Sets a new tooltip for Submit button. The tooltip can either be a simple string (which in most cases will be rendered as the title attribute of this element)
or an instance of sap.ui.core.TooltipBase.
If a new tooltip is set, any previously set tooltip is deactivated.
The default value is set language dependent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelForPicture" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text for Picture which will be read by screenreader.
If a new ariaLabelForPicture is set, any previously set ariaLabelForPicture is deactivated.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="post" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The Post event is triggered when the user has entered a value and pressed the post button. After firing this event, the value is reset.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.FeedListItem'-->
<xsd:complexType name="_FeedListItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon to be displayed as graphical element within the FeedListItem. This can be an image or an icon from the icon font. If no icon is provided, a default person-placeholder icon is displayed.
Icon is only shown if showIcon = true.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activeIcon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon displayed when the list item is active.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="sender" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sender of the chunk</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The FeedListItem text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="info" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The Info text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="timestamp" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This chunks timestamp</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="senderActive" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If true, sender string is an link, which will fire 'senderPress' events. If false, sender is normal text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconActive" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If true, icon is an link, which will fire 'iconPress' events. If false, icon is normal image</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is the key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showIcon" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to "true" (default), icons will be displayed, if set to false icons are hidden</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxCharacters" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The expand and collapse feature is set by default and uses 300 characters on mobile devices and 500 characters on desktops as limits. Based on these values, the text of the FeedListItem is collapsed once text reaches these limits. In this case, only the specified number of characters is displayed. By clicking on the text link More, the entire text can be displayed. The text link Less collapses the text. The application is able to set the value to its needs.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="senderPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when name of the sender is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the icon is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.FlexBox'-->
<xsd:complexType name="_FlexBoxType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Flex items within the FlexBox layout</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The height of the FlexBox. Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width of the FlexBox. Note that when a percentage is given, for the width to work as expected, the width of the surrounding container must be defined.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayInline" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the flexbox is in block or inline mode.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="direction" type="n1:_FlexDirectionType">
<xsd:annotation>
<xsd:documentation>Determines the direction of the layout of child elements.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fitContainer" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the flexbox will be sized to completely fill its container. If the FlexBox is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the FlexBox to fit the entire viewport.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="renderType" type="n1:_FlexRendertypeType">
<xsd:annotation>
<xsd:documentation>Determines whether the layout is rendered as a series of divs or as an unordered list (ul)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="justifyContent" type="n1:_FlexJustifyContentType">
<xsd:annotation>
<xsd:documentation>Determines the layout behavior along the main axis.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="alignItems" type="n1:_FlexAlignItemsType">
<xsd:annotation>
<xsd:documentation>Determines the layout behavior of items along the cross-axis. "Baseline" is not supported in Internet Explorer 10.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="wrap" type="n1:_FlexWrapType">
<xsd:annotation>
<xsd:documentation>Determines the wrapping behavior of the flex container. This property has no effect in older browsers, e.g. Android Native 4.3 and below.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="alignContent" type="n1:_FlexAlignContentType">
<xsd:annotation>
<xsd:documentation>Determines the layout behavior of container lines when there's extra space along the cross-axis. This property has no effect in Internet Explorer 10.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.FlexItemData'-->
<xsd:complexType name="_FlexItemDataType">
<xsd:complexContent>
<xsd:extension base="n0:_LayoutDataType">
<xsd:attribute name="alignSelf" type="n1:_FlexAlignSelfType">
<xsd:annotation>
<xsd:documentation>Determines cross-axis alignment of individual element (not currently supported in Internet Explorer)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="order" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Determines the display order of flex items independent of their source code order.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="growFactor" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Determines the flexibility of the flex item when allocatable space is remaining.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="shrinkFactor" type="xsd:float">
<xsd:annotation>
<xsd:documentation>The shrink factor determines how much the flex item will shrink relative to the rest of the flex items in the flex container when negative free space is distributed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="baseSize" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The base size is the initial main size of the item for the flex algorithm. If set to "auto", this will be the computed size of the item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minHeight" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The minimum height of the flex item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxHeight" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The maximum height of the flex item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The minimum height of the flex item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The maximum height of the flex item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="styleClass" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The style class will be applied to the flex item and can be used for CSS selectors</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.FormattedText'-->
<xsd:complexType name="_FormattedTextType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="htmlText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text in HTML format.
The following tags are supported:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abbr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blockquote&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;br&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;code&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;em&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strong&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;span&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ul&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;li&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;class, style,&lt;/code&gt; and &lt;code&gt;target&lt;/code&gt; attributes are allowed.
If &lt;code&gt;target&lt;/code&gt; is not set, links open in a new window by default.
&lt;p&gt;Only safe &lt;code&gt;href&lt;/code&gt; attributes can be used. See {@link jQuery.sap.validateUrl}.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Optional width of the control in CSS units.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Optional height of the control in CSS units.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.GenericTile'-->
<xsd:complexType name="_GenericTileType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="tileContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The switchable view that depends on the tile type.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:TileContent" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="icon" minOccurs="0">
<xsd:annotation>
<xsd:documentation>An icon or image to be displayed in the control.
This aggregation is deprecated since version 1.36.0, to display an icon or image use sap.m.TileContent control instead.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="mode" type="n1:_GenericTileModeType">
<xsd:annotation>
<xsd:documentation>The mode of the GenericTile.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="header" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The header of the tile.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="subheader" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The subheader of the tile.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="failedText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The message that appears when the control is in the Failed state.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="size" type="n1:_SizeType">
<xsd:annotation>
<xsd:documentation>The size of the tile. If not set, then the default size is applied based on the device.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="frameType" type="n1:_FrameTypeType">
<xsd:annotation>
<xsd:documentation>The frame type: 1x1 or 2x1.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundImage" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The URI of the background image.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="headerImage" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The image to be displayed as a graphical element within the header. This can be an image or an icon from the icon font.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="state" type="n1:_LoadStateType">
<xsd:annotation>
<xsd:documentation>The load status.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="imageDescription" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Description of a header image that is used in the tooltip.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when the user chooses the tile.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.GroupHeaderListItem'-->
<xsd:complexType name="_GroupHeaderListItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the title of the group header.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="count" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the count of items in the group, but it could also be an amount which represents the sum of all amounts in the group.
&lt;b&gt;Note:&lt;/b&gt; Will not be displayed if not set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="upperCase" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, the title is capitalized automatically. To disable this automation, set this property to &lt;b&gt;false&lt;/b&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Defines the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.GrowingList'-->
<xsd:complexType name="_GrowingListType">
<xsd:complexContent>
<xsd:extension base="n1:_ListType">
<xsd:attribute name="threshold" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of items requested from the server. To activate this you should set growing property to "true"</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="triggerText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text which is displayed on the trigger at the end of the list. The default is a translated text ("Load More Data") coming from the messagebundle properties.
This property can be used only if growing property is set "true" and scrollToLoad property is set "false".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="scrollToLoad" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If you set this property to true then user needs to scroll end to trigger loading a new page. Default value is false which means user needs to scroll end and then click button to load new page.
NOTE: This property can be set true, if growing property is set "true" and if you only have one instance of this control inside the scroll container(e.g Page).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.HBox'-->
<xsd:complexType name="_HBoxType">
<xsd:complexContent>
<xsd:extension base="n1:_FlexBoxType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.IconTabBar'-->
<xsd:complexType name="_IconTabBarType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The items displayed in the IconTabBar.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Represents the contents displayed below the IconTabBar.
If there are multiple contents, they are rendered after each other.
The developer has to manage to display the right one or use the content aggregation
inside the IconTabFilter (which will be displayed instead if it is set).</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="showSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether the current selection should be visualized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expandable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines if the tabs are collapsible and expandable.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expanded" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if the actual tab content is expanded or not.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key of the selected tab item.

If the key has no corresponding aggregated item, no changes will apply.
If duplicate keys exists the first item matching the key is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="upperCase" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the text of the icon tab filter (not the count) is displayed in uppercase.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="stretchContentHeight" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the IconTabBar height is stretched to the maximum possible height
of its parent container. As a prerequisite, the height of the parent container must be
defined as a fixed value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="applyContentPadding" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the IconTabBar content fits to the full area.
The paddings are removed if it's set to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundDesign" type="n1:_BackgroundDesignType">
<xsd:annotation>
<xsd:documentation>Specifies the background color of the IconTabBar.

Depending on the theme, you can change the state of
the background color to "Solid", "Translucent", or "Transparent".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when an item is selected.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expand" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Indicates that the tab will expand or collapse.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.IconTabFilter'-->
<xsd:complexType name="_IconTabFilterType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content displayed for this item (optional).

If this content is set, it is displayed instead of the general content inside the IconTabBar.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="count" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Represents the "count" text, which is displayed in the tab filter.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showAll" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables special visualization for disabled filter (show all items).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Specifies the icon to be displayed for the tab filter.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconColor" type="n0:_IconColorType">
<xsd:annotation>
<xsd:documentation>Specifies the icon color.

If an icon font is used, the color can be chosen from the icon colors (sap.ui.core.IconColor).
Possible semantic colors are: Neutral, Positive, Critical, Negative.
Instead of the semantic icon color the brand color can be used, this is named Default.
Semantic colors and brand colors should not be mixed up inside one IconTabBar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, it sends one or more requests,
trying to get the density perfect version of the image if this version of
the image doesn't exist on the server. Default value is set to true.

If bandwidth is key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the tab filter is rendered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="design" type="n1:_IconTabFilterDesignType">
<xsd:annotation>
<xsd:documentation>Specifies whether the icon and the texts are placed vertically or horizontally.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.IconTabHeader'-->
<xsd:complexType name="_IconTabHeaderType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The items displayed in the IconTabHeader.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="showSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether the current selection is visualized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key of the selected item.

If the key has no corresponding aggregated item, no changes will apply.
If duplicate keys exists the first item matching, the key is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the control is rendered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when an item is selected.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.IconTabSeparator'-->
<xsd:complexType name="_IconTabSeparatorType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The icon to display for this separator. If no icon is given, a separator line is used instead.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, it sends one or more requests,
trying to get the density perfect version of the image if this version of
the image doesn't exist on the server. Default value is set to true.

If bandwidth is key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Image'-->
<xsd:complexType name="_ImageType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="src" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Relative or absolute path to URL where the image file is stored. The path will be adapted to the density aware format according to the density of the device following the convention that [imageName]@[densityValue].[extension]</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this property always needs to be set. Otherwise the output DOM element has a 0 size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this property always needs to be set. Otherwise the output DOM element has a 0 size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="decorative" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>A decorative image is included for design reasons. Accessibility tools will ignore decorative images.

Note: If the Image has an image map (useMap is set), this property will be overridden (the image will not be rendered as decorative).
A decorative image has no ALT attribute, so the Alt property is ignored if the image is decorative.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="alt" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The alternative text that is displayed in case the Image is not available, or cannot be displayed.
If the image is set to decorative this property is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useMap" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the image map that defines the clickable areas</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="densityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.

By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is the key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activeSrc" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The source property which is used when the image is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mode" type="n1:_ImageModeType">
<xsd:annotation>
<xsd:documentation>Defines how the src and the activeSrc is output to the Dom Element. When set to sap.m.ImageMode.Image which is the default value, the src (activeSrc) is set to the 'src' attribute of the 'img' tag. When set to sap.m.ImageMode.Background, the src (activeSrc) is set to the CSS style 'background-image' and the root DOM element is rendered as a 'span' tag instead of an 'img' tag.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundSize" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the size of the image in sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style 'background-size'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundPosition" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the position of the image in sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style 'background-position'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundRepeat" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines whether the source image is repeated when the output DOM element is bigger than the source. This property is set on the output DOM element using CSS style 'background-repeat'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tap" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user clicks on the control. (This event is deprecated, use the press event instead)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user clicks on the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="load" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the image resource is loaded.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="error" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the image resource can't be loaded. If densityAware is set to true, the event is fired when none of the fallback resources can be loaded.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ImageContent'-->
<xsd:complexType name="_ImageContentType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence/>
<xsd:attribute name="src" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The image to be displayed as a graphical element within the imageContent. This can be an image or an icon from the icon font.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="description" type="n0:_anyType">
<xsd:annotation>
<xsd:documentation>Description of image.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when the user chooses the image content.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Input'-->
<xsd:complexType name="_InputType">
<xsd:complexContent>
<xsd:extension base="n1:_InputBaseType">
<xsd:sequence>
<!--default aggregation 'suggestionItems'-->
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="suggestionItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>SuggestItems are the items which will be shown in the suggestion popup. Changing this aggregation (by calling addSuggestionItem, insertSuggestionItem, removeSuggestionItem, removeAllSuggestionItems, destroySuggestionItems) after input is rendered will open/close the suggestion popup. o display suggestions with two text values, it is also possible to add sap.ui.core/ListItems as SuggestionItems (since 1.21.1). For the selected ListItem, only the first value is returned to the input field.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="suggestionColumns" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The suggestionColumns and suggestionRows are for tabular input suggestions. This aggregation allows for binding the table columns; for more details see the aggregation "suggestionRows".</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Column" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="suggestionRows" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The suggestionColumns and suggestionRows are for tabular input suggestions. This aggregation allows for binding the table cells.
The items of this aggregation are to be bound directly or to set in the suggest event method.
Note: If this aggregation is filled, the aggregation suggestionItems will be ignored.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ColumnListItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="type" type="n1:_InputTypeType">
<xsd:annotation>
<xsd:documentation>HTML type of the internal &lt;code&gt;input&lt;/code&gt; tag (e.g. Text, Number, Email, Phone).
The particular effect of this property differs depending on the browser and the current language settings,
especially for the type Number.&lt;br&gt;
This parameter is intended to be used with touch devices that use different soft keyboard layouts depending on the given input type.&lt;br&gt;
Only the default value &lt;code&gt;sap.m.InputType.Text&lt;/code&gt; may be used in combination with data model formats.
&lt;code&gt;sap.ui.model&lt;/code&gt; defines extended formats that are mostly incompatible with normal HTML
representations for numbers and dates.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxLength" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Maximum number of characters. Value '0' means the feature is switched off.
This parameter is not compatible with the input type &lt;code&gt;sap.m.InputType.Number&lt;/code&gt;.
If the input type is set to &lt;code&gt;Number&lt;/code&gt;, the &lt;code&gt;maxLength&lt;/code&gt; value is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dateFormat" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Only used if type=date and no datepicker is available.
The data is displayed and the user input is parsed according to this format.
NOTE: The value property is always of the form RFC 3339 (YYYY-MM-dd).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showValueHelp" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, a value help indicator will be displayed inside the control. When clicked the event "valueHelpRequest" will be fired.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSuggestion" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this is set to true, suggest event is fired when user types in the input. Changing the suggestItems aggregation in suggest event listener will show suggestions within a popup. When runs on phone, input will first open a dialog where the input and suggestions are shown. When runs on a tablet, the suggestions are shown in a popup next to the input.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueHelpOnly" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, direct text input is disabled and the control will trigger the event "valueHelpRequest" for all user interactions. The properties "showValueHelp", "editable", and "enabled" must be set to true, otherwise the property will have no effect</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filterSuggests" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether to filter the provided suggestions before showing them to the user.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxSuggestionWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>If set, the value of this parameter will control the horizontal size of the suggestion list to display more data. This allows suggestion lists to be wider than the input field if there is enough space available. By default, the suggestion list is always as wide as the input field.
Note: The value will be ignored if the actual width of the input field is larger than the specified parameter value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="startSuggestion" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Minimum length of the entered text in input before suggest event is fired. The default value is 1 which means the suggest event is fired after user types in input. When it's set to 0, suggest event is fired when input with no text gets focus.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTableSuggestionValueHelp" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>For tabular suggestions, this flag will show/hide the button at the end of the suggestion table that triggers the event "valueHelpRequest" when pressed. The default value is true.

NOTE: If suggestions are not tabular or no suggestions are used, the button will not be displayed and this flag is without effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The description is a text after the input field, e.g. units of measurement, currencies.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fieldWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>This property only takes effect if the description property is set. It controls the distribution of space between the input field and the description text. The default value is 50% leaving the other 50% for the description.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueLiveUpdate" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates when the value gets updated with the user changes: At each keystroke (true) or first when the user presses enter or tabs out (false).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the value of the input is changed - e.g. at each keypress</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueHelpRequest" type="xsd:string">
<xsd:annotation>
<xsd:documentation>When the value help indicator is clicked, this event will be fired.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="suggest" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when user types in the input and showSuggestion is set to true. Changing the suggestItems aggregation will show the suggestions within a popup.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="suggestionItemSelected" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when suggestionItem shown in suggestion popup are selected. This event is only fired when showSuggestion is set to true and there are suggestionItems shown in the suggestion popup.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="submit" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when user presses the &lt;code&gt;Enter&lt;/code&gt; key on the input.

&lt;b&gt;Note:&lt;/b&gt;
The event is fired independent of whether there was a change before or not. If a change was performed the event is fired after the change event.
The event is also fired when an item of the select list is selected via &lt;code&gt;Enter&lt;/code&gt;.
The event is only fired on an input which allows text input (&lt;code&gt;editable&lt;/code&gt;, &lt;code&gt;enabled&lt;/code&gt; and not &lt;code&gt;valueHelpOnly&lt;/code&gt;).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.InputBase'-->
<xsd:complexType name="_InputBaseType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the value of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the user can interact with the control or not.
&lt;b&gt;Note:&lt;/b&gt; Disabled controls cannot be focused and they are out of the tab-chain.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Visualizes the validation state of the control, e.g. &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;Warning&lt;/code&gt;, &lt;code&gt;Success&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the name of the control for the purposes of form submission.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="placeholder" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines a short hint intended to aid the user with data entry when the control has no value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether the control can be modified by the user or not.
&lt;b&gt;Note:&lt;/b&gt; A user can tab to non-editable control, highlight it, and copy the text from it.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueStateText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the text that appears in the value state message pop-up. If this is not specified, a default text is shown from the resource bundle.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showValueStateMessage" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the value state message should be shown or not.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Defines the horizontal alignment of the text that is shown inside the input field.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Defines the text directionality of the input field, e.g. &lt;code&gt;RTL&lt;/code&gt;, &lt;code&gt;LTR&lt;/code&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs that label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Is fired when the text in the input field has changed and the focus leaves the input field or the enter key is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.InputListItem'-->
<xsd:complexType name="_InputListItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Content controls can be added</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="label" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Label of the list item</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the label text directionality with enumerated options. By default, the label inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Label'-->
<xsd:complexType name="_LabelType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="design" type="n1:_LabelDesignType">
<xsd:annotation>
<xsd:documentation>Sets the design of a Label to either Standard or Bold.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the Label text to be displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Available alignment settings are "Begin", "Center", "End", "Left", and "Right".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Determines the width of the label.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="required" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that user input is required in the input this label labels.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelFor" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to the labeled control.
By default the label set the for attribute to the ID of the labeled control. This can be changed by implementing the function getIdForLabel on the labelled control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Link'-->
<xsd:complexType name="_LinkType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Link text to be displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the link can be triggered by the user.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="target" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Options are the standard values for window.open() supported by browsers: _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered. This property is only used when the href property is set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of the link (CSS-size such as % or px). When it is set, this is the exact size. When left blank, the text defines the size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="href" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The link target URI. Supports standard hyperlink behavior. If a JavaScript action should be triggered, this should not be set, but instead an event handler for the "press" event should be registered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="wrapping" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the link text is allowed to wrap when there is not sufficient space.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Sets the horizontal alignment of the text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the parent DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="subtle" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Subtle links look more like standard text than like links. They should only be used to help with visual hierarchy between large data lists of important and less important links. Subtle links should not be used in any other use case.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emphasized" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Emphasized links look visually more important than regular links.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user triggers the link control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.List'-->
<xsd:complexType name="_ListType">
<xsd:complexContent>
<xsd:extension base="n1:_ListBaseType">
<xsd:sequence>
<xsd:element name="columns" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Defines columns of the list.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Column" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="backgroundDesign" type="n1:_BackgroundDesignType">
<xsd:annotation>
<xsd:documentation>Sets the background style of the list. Depending on the theme, you can change the state of the background from &lt;code&gt;Solid&lt;/code&gt; to &lt;code&gt;Translucent&lt;/code&gt; or to &lt;code&gt;Transparent&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ListBase'-->
<xsd:complexType name="_ListBaseType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n1:ListItemBase" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Defines the items contained within this control.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ListItemBase" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="swipeContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>User can swipe to bring in this control on the right hand side of an item.
&lt;b&gt;Note:&lt;/b&gt; For non-touch devices, this functionality is ignored.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="headerToolbar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The header area can be used as a toolbar to add extra controls for user interactions.
&lt;b&gt;Note:&lt;/b&gt; When set, this overwrites the &lt;code&gt;headerText&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Toolbar" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="infoToolbar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A toolbar that is placed below the header to show extra information to the user.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Toolbar" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="inset" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines the indentation of the container. Setting it to &lt;code&gt;true&lt;/code&gt; indents the list.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="headerText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the header text that appears in the control.
&lt;b&gt;Note:&lt;/b&gt; If &lt;code&gt;headerToolbar&lt;/code&gt; aggregation is set, then this property is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="headerDesign" type="n1:_ListHeaderDesignType">
<xsd:annotation>
<xsd:documentation>Defines the header style of the control. Possible values are &lt;code&gt;Standard&lt;/code&gt; and &lt;code&gt;Plain&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="footerText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the footer text that appears in the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mode" type="n1:_ListModeType">
<xsd:annotation>
<xsd:documentation>Defines the mode of the control (e.g. &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;SingleSelect&lt;/code&gt;, &lt;code&gt;MultiSelect&lt;/code&gt;, &lt;code&gt;Delete&lt;/code&gt;).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the width of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="includeItemInSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether the items are selectable by clicking on the item itself (&lt;code&gt;true&lt;/code&gt;) rather than having to set the selection control first.
&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;SingleSelectMaster&lt;/code&gt; mode also provides this functionality by default.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showUnread" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Activates the unread indicator for all items, if set to &lt;code&gt;true&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="noDataText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This text is displayed when the control contains no items.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showNoData" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether or not the text specified in the &lt;code&gt;noDataText&lt;/code&gt; property is displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableBusyIndicator" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>When this property is set to &lt;code&gt;true&lt;/code&gt;, the control will automatically display a busy indicator when it detects that data is being loaded. This busy indicator blocks the interaction with the items until data loading is finished.
By default, the busy indicator will be shown after one second. This behavior can be customized by setting the &lt;code&gt;busyIndicatorDelay&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="modeAnimationOn" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines if animations will be shown while switching between modes.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSeparators" type="n1:_ListSeparatorsType">
<xsd:annotation>
<xsd:documentation>Defines which item separator style will be used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="swipeDirection" type="n1:_SwipeDirectionType">
<xsd:annotation>
<xsd:documentation>Defines the direction of the swipe movement (e.g LeftToRight, RightToLeft, Both) to display the control defined in the &lt;code&gt;swipeContent&lt;/code&gt; aggregation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="growing" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, enables the growing feature of the control to load more items by requesting from the model.
&lt;b&gt;Note:&lt;/b&gt;: This feature only works when an &lt;code&gt;items&lt;/code&gt; aggregation is bound. Growing must not be used together with two-way binding.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="growingThreshold" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Defines the number of items to be requested from the model for each grow.
This property can only be used if the &lt;code&gt;growing&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="growingTriggerText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the text displayed on the growing button. The default is a translated text ("More") coming from the message bundle.
This property can only be used if the &lt;code&gt;growing&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="growingScrollToLoad" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, the user can scroll down to load more items. Otherwise a growing button is displayed at the bottom of the control.
&lt;b&gt;Note:&lt;/b&gt; This property can only be used if the &lt;code&gt;growing&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt; and only if there is one instance of &lt;code&gt;sap.m.List&lt;/code&gt; or &lt;code&gt;sap.m.Table&lt;/code&gt; inside the scrollable scroll container (e.g &lt;code&gt;sap.m.Page&lt;/code&gt;).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="rememberSelections" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, this control remembers the selections after a binding update has been performed (e.g. sorting, filtering).
&lt;b&gt;Note:&lt;/b&gt; If &lt;code&gt;items&lt;/code&gt; aggregation is not bound then this property is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="keyboardMode" type="n1:_ListKeyboardModeType">
<xsd:annotation>
<xsd:documentation>Defines keyboard handling behavior of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when selection is changed via user interaction. In &lt;code&gt;MultiSelect&lt;/code&gt; mode, this event is also fired on deselection.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when selection is changed via user interaction inside the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="delete" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when delete icon is pressed by user.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="swipe" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires after user's swipe action and before the &lt;code&gt;swipeContent&lt;/code&gt; is shown. On the &lt;code&gt;swipe&lt;/code&gt; event handler, &lt;code&gt;swipeContent&lt;/code&gt; can be changed according to the swiped item.
Calling the &lt;code&gt;preventDefault&lt;/code&gt; method of the event cancels the swipe action.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="growingStarted" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires before the new growing chunk is requested from the model.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="growingFinished" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires after the new growing chunk has been fetched from the model and processed by the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="updateStarted" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires before &lt;code&gt;items&lt;/code&gt; binding is updated (e.g. sorting, filtering)

&lt;b&gt;Note:&lt;/b&gt; Event handler should not invalidate the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="updateFinished" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires after &lt;code&gt;items&lt;/code&gt; binding is updated and processed by the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="itemPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when an item is pressed unless the item's &lt;code&gt;type&lt;/code&gt; property is &lt;code&gt;Inactive&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ListItemBase'-->
<xsd:complexType name="_ListItemBaseType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="type" type="n1:_ListTypeType">
<xsd:annotation>
<xsd:documentation>Defines the visual indication and behavior of the list items, e.g. &lt;code&gt;Active&lt;/code&gt;, &lt;code&gt;Navigation&lt;/code&gt;, &lt;code&gt;Detail&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="unread" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Activates the unread indicator for the list item, if set to &lt;code&gt;true&lt;/code&gt;.
&lt;b&gt;Note:&lt;/b&gt; This flag is ignored when the &lt;code&gt;showUnread&lt;/code&gt; property of the parent is set to &lt;code&gt;false&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selected" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines the selected state of the list items.
&lt;b&gt;Note:&lt;/b&gt; Binding the &lt;code&gt;selected&lt;/code&gt; property in single selection modes may cause unwanted results if you have more than one selected items in your binding.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="counter" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Defines the counter value of the list items.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tap" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when the user taps on the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="detailTap" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when the user taps on the detail button of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when the user clicks on the control.
&lt;b&gt;Note:&lt;/b&gt; This event is not fired when the parent &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;SingleSelectMaster&lt;/code&gt; or when the &lt;code&gt;includeItemInSelection&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;.
If there is an interactive element that handles its own &lt;code&gt;press&lt;/code&gt; event then the list item's &lt;code&gt;press&lt;/code&gt; event is not fired.
Also see {@link sap.m.ListBase#attachItemPress}.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="detailPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when the user clicks on the detail button of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.MaskInput'-->
<xsd:complexType name="_MaskInputType">
<xsd:complexContent>
<xsd:extension base="n1:_InputBaseType">
<xsd:sequence>
<xsd:element name="rules" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A list of validation rules (one rule per mask character).</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:MaskInputRule" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="placeholderSymbol" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines a placeholder symbol. Shown at the position where there is no user input yet.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mask" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Mask defined by its characters type (respectively, by its length).
You should consider the following important facts:
1. The mask characters normally correspond to an existing rule (one rule per unique char).
Characters which don't, are considered immutable characters (for example, the mask '2099', where '9' corresponds to a rule
for digits, has the characters '2' and '0' as immutable).
2. Adding a rule corresponding to the &lt;code&gt;placeholderSymbol&lt;/code&gt; is not recommended and would lead to an unpredictable behavior.
3. You can use the special escape character '^' called "Caret" prepending a rule character to make it immutable.
Use the double escape '^^' if you want to make use of the escape character as a immutable one.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.MaskInputRule'-->
<xsd:complexType name="_MaskInputRuleType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="maskFormatSymbol" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the symbol used in the mask format which will accept a certain range of characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="regex" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the allowed characters as a regular expression.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Menu'-->
<xsd:complexType name="_MenuType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n1:MenuItem" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Defines the items contained within this control.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:MenuItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the &lt;code&gt;Menu&lt;/code&gt; title.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="itemSelected" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when a &lt;code&gt;MenuItem&lt;/code&gt; is selected.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="closed" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the menu is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.MenuButton'-->
<xsd:complexType name="_MenuButtonType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="menu" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Defines the menu that opens for this button.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Menu" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the text of the &lt;code&gt;MenuButton&lt;/code&gt;.
&lt;br/&gt;&lt;b&gt;Note:&lt;/b&gt; In &lt;code&gt;Split&lt;/code&gt; &lt;code&gt;buttonMode&lt;/code&gt; with &lt;code&gt;useDefaultActionOnly&lt;/code&gt;
set to &lt;code&gt;false&lt;/code&gt;, the text is changed to display the last selected item's text,
while in &lt;code&gt;Regular&lt;/code&gt; &lt;code&gt;buttonMode&lt;code&gt; the text stays unchanged.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n1:_ButtonTypeType">
<xsd:annotation>
<xsd:documentation>Defines the type of the &lt;code&gt;MenuButton&lt;/code&gt; (for example, Default, Accept, Reject, Back, etc.)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the &lt;code&gt;MenuButton&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Boolean property to enable the control (default is &lt;code&gt;true&lt;/code&gt;).
&lt;br/&gt;&lt;b&gt;Note:&lt;/b&gt; Depending on custom settings, the buttons that are disabled have other colors than the enabled ones.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Defines the icon to be displayed as a graphical element within the button.
It can be an image or an icon from the icon font.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activeIcon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The source property of an alternative icon for the active (pressed) state of the button.
Both active and default icon properties should be defined and of the same type - image or icon font.
If the &lt;code&gt;icon&lt;/code&gt; property is not set or has a different type, the active icon is not displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>When set to &lt;code&gt;true&lt;/code&gt; (default), one or more requests are sent trying to get the
density perfect version of image if this version of image doesn't exist on the server.
If only one version of image is provided, set this value to &lt;code&gt;false&lt;/code&gt; to
avoid the attempt of fetching density perfect image.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Specifies the element's text directionality with enumerated options.
By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="buttonMode" type="n1:_MenuButtonModeType">
<xsd:annotation>
<xsd:documentation>Defines whether the &lt;code&gt;MenuButton&lt;/code&gt; is set to &lt;code&gt;Regular&lt;/code&gt; or &lt;code&gt;Split&lt;/code&gt; mode.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useDefaultActionOnly" type="n0:_anyType">
<xsd:annotation>
<xsd:documentation>Controls whether the default action handler is invoked always or it is invoked only until a menu item is selected.
Usable only if &lt;code&gt;buttonMode&lt;/code&gt; is set to &lt;code&gt;Split&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="defaultAction" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the &lt;code&gt;buttonMode&lt;/code&gt; is set to &lt;code&gt;Split&lt;/code&gt; and the user presses the main button
unless &lt;code&gt;useDefaultActionOnly&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; and another action
from the menu has been selected previously.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.MenuItem'-->
<xsd:complexType name="_MenuItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n1:MenuItem" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Defines the sub-items contained within this element.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:MenuItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="icon" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the icon, which belongs to the item.
This can be an URI to an image or an icon font URI.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether the item should be visible on the screen. If set to &lt;code&gt;false&lt;/code&gt;,
a placeholder is rendered instead of the real item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="startsSection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether a visual separator should be rendered before the item.
&lt;b&gt;Note:&lt;/b&gt; If an item is invisible its separator is also not displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired after the item has been pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="propertyChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when a property of the item changes.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="aggregationChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when aggregation of the item changes.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.MessagePage'-->
<xsd:complexType name="_MessagePageType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="customText" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The (optional) custom Text control of this page.
Use this aggregation when the "text" (sap.m.Text) control needs to be replaced with a sap.m.Link control.
"text" and "textDirection" setters can be used for this aggregation.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Link" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="customDescription" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The (optional) custom description control of this page.
Use this aggregation when the "description" (sap.m.Text) control needs to be replaced with a sap.m.Link control.
"description" and "textDirection" setters can be used for this aggregation.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Link" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the main text displayed on the MessagePage.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the detailed description that shows additional information on the MessagePage.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the title in the header of MessagePage.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showHeader" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines the visibility of the MessagePage header.
Can be used to hide the header of the MessagePage when it's embedded in another page.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showNavButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines the visibility of the navigation button in MessagePage header.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Determines the icon displayed on the MessagePage.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Determines the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navButtonPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when Nav Button is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.MessagePopover'-->
<xsd:complexType name="_MessagePopoverType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n1:MessagePopoverItem" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A list with message items</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:MessagePopoverItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="headerButton" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A custom header button</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="asyncDescriptionHandler" type="n0:_anyType">
<xsd:annotation>
<xsd:documentation>Callback function for resolving a promise after description has been asynchronously loaded inside this function</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="asyncURLHandler" type="n0:_anyType">
<xsd:annotation>
<xsd:documentation>Callback function for resolving a promise after a link has been asynchronously validated inside this function</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="placement" type="n1:_VerticalPlacementTypeType">
<xsd:annotation>
<xsd:documentation>Determines the position, where the control will appear on the screen. Possible values are: sap.m.VerticalPlacementType.Top, sap.m.VerticalPlacementType.Bottom and sap.m.VerticalPlacementType.Vertical.
The default value is sap.m.VerticalPlacementType.Vertical. Setting this property while the control is open, will not cause any re-rendering and changing of the position. Changes will only be applied with the next interaction.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initiallyExpanded" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Sets the initial state of the control - expanded or collapsed. By default the control opens as expanded</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired after the popover is opened</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired after the popover is closed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired before the popover is opened</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired before the popover is closed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="itemSelect" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired when description is shown</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="listSelect" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired when one of the lists is shown when (not) filtered  by type</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="longtextLoaded" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired when the long text description data from a remote URL is loaded</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="urlValidated" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired when a validation of a URL from long text description is ready</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.MessagePopoverItem'-->
<xsd:complexType name="_MessagePopoverItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:attribute name="type" type="n0:_MessageTypeType">
<xsd:annotation>
<xsd:documentation>Specifies the type of the message</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the title of the message</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies detailed description of the message</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="markupDescription" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies if description should be interpreted as markup</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="longtextUrl" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Specifies long text description location URL</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.MessageStrip'-->
<xsd:complexType name="_MessageStripType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'link'-->
<xsd:element ref="n1:Link" minOccurs="0"/>
<xsd:element name="link" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Adds a sap.m.Link control which will be displayed at the end of the message.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Link" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the text of the message.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n0:_MessageTypeType">
<xsd:annotation>
<xsd:documentation>Determines the type of messages that are displayed in the MessageStrip.
Possible values are: Information (default), Success, Warning, Error.
If None is passed, the value is set to Information and a warning is displayed in the console.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIcon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Determines a custom icon which is displayed.
If none is set, the default icon for this message type is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showIcon" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines if an icon is displayed for the message.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showCloseButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines if the message has a close button in the upper right corner.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="close" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired after the container is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.MultiComboBox'-->
<xsd:complexType name="_MultiComboBoxType">
<xsd:complexContent>
<xsd:extension base="n1:_ComboBoxBaseType">
<xsd:attribute name="selectedKeys" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Keys of the selected items. If the key has no corresponding item, no changes will apply. If duplicate keys exists the first item matching the key is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedItems" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Provides getter and setter for the selected items from
the aggregation named items.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when selection of an item is changed.
Note: please do not use the "change" event inherited from sap.m.InputBase</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionFinish" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when user has finished a selection of items in a list box and list box has been closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.MultiInput'-->
<xsd:complexType name="_MultiInputType">
<xsd:complexContent>
<xsd:extension base="n1:_InputType">
<xsd:sequence>
<xsd:element name="tokens" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The currently displayed tokens</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Token" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="enableMultiLineMode" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, the MultiInput will be displayed in multi-line display mode.
In multi-line display mode, all tokens can be fully viewed and easily edited in the MultiInput.
The default value is false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxTokens" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The max number of tokens that is allowed in MultiInput.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tokenChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the tokens aggregation changed (add / remove token)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.NavContainer'-->
<xsd:complexType name="_NavContainerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'pages'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="pages" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content entities between which this NavContainer navigates. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.

These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="autoFocus" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the initial focus is set automatically on first rendering and after navigating to a new page.
This is useful when on touch devices the keyboard pops out due to the focus being automatically set on an input field.
If necessary the "afterShow" event can be used to focus another element.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The height of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the NavContainer is visible.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="defaultTransitionName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The type of the transition/animation to apply when "to()" is called without defining a transition type to use. The default is "slide". Other options are: "fade", "flip" and "show" - and the names of any registered custom transitions.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialPage" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This association can be used to define which page is displayed initially. If the given page does not exist or no page is given, the first page which has been added is considered as initial page.
This value should be set initially and not set/modified while the application is running.

This could be used not only for the initial display, but also if the user wants to navigate "up to top", so this page serves as a sort of "home/root page".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.
This event can be aborted by the application with preventDefault(), which means that there will be no navigation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the "navigate" event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.NewsContent'-->
<xsd:complexType name="_NewsContentType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence/>
<xsd:attribute name="size" type="n1:_SizeType">
<xsd:annotation>
<xsd:documentation>Updates the size of the chart. If not set then the default size is applied based on the device tile.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The content text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="subheader" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The subheader.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when the user chooses the news content.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.NotificationListBase'-->
<xsd:complexType name="_NotificationListBaseType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:sequence>
<xsd:element name="buttons" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Action buttons.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="priority" type="n0:_PriorityType">
<xsd:annotation>
<xsd:documentation>Determines the priority of the Notification.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the title of the NotificationListBase item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="datetime" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the due date of the NotificationListItem.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showButtons" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines the action buttons visibility.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showCloseButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines the visibility of the close button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="authorName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the notification group's author name.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="authorPicture" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Determines the URL of the notification group's author picture.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="close" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the notification is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.NotificationListGroup'-->
<xsd:complexType name="_NotificationListGroupType">
<xsd:complexContent>
<xsd:extension base="n1:_NotificationListBaseType">
<xsd:sequence>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The NotificationListItems inside the group.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:NotificationListItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="collapsed" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines if the group is collapsed or expanded.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="autoPriority" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines if the group will automatically set the priority based on the highest priority of its notifications or get its priority from the developer.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.NotificationListItem'-->
<xsd:complexType name="_NotificationListItemType">
<xsd:complexContent>
<xsd:extension base="n1:_NotificationListBaseType">
<xsd:sequence/>
<xsd:attribute name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the description of the NotificationListItem.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="truncate" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines if the text in the title and the description of the notification are truncated to the first two lines.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideShowMoreButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines it the "Show More" button should be hidden.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.NumericContent'-->
<xsd:complexType name="_NumericContentType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="animateTextChange" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, the change of the value will be animated.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="formatterValue" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, the value parameter contains a numeric value and scale. If set to false (default), the value parameter contains a numeric value only.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The icon to be displayed as a graphical element within the control. This can be an image or an icon from the icon font.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDescription" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Description of an icon that is used in the tooltip.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="indicator" type="n1:_DeviationIndicatorType">
<xsd:annotation>
<xsd:documentation>The indicator arrow that shows value deviation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="nullifyValue" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, the omitted value property is set to 0.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="scale" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The scaling prefix. Financial characters can be used for currencies and counters. The SI prefixes can be used for units. If the scaling prefix contains more than three characters, only the first three characters are displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="size" type="n1:_SizeType">
<xsd:annotation>
<xsd:documentation>Updates the size of the chart. If not set then the default size is applied based on the device tile.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="truncateValueTo" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The number of characters to display for the value property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The actual value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueColor" type="n1:_ValueColorType">
<xsd:annotation>
<xsd:documentation>The semantic color of the value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width of the chart. If it is not set, the size of the control is defined by the size property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="withMargin" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If the value is set to false, the content will fit to the whole size of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="state" type="n1:_LoadStateType">
<xsd:annotation>
<xsd:documentation>Indicates the load status.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when the user chooses the numeric content.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ObjectAttribute'-->
<xsd:complexType name="_ObjectAttributeType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="customContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>When the aggregation is set, it replaces the text, active and textDirection properties. This also ignores the press event. The provided control is displayed as an active link.
&lt;b&gt;Note:&lt;/b&gt; It will only allow sap.m.Text and sap.m.Link controls.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the ObjectAttribute title.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the ObjectAttribute text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="active" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if the ObjectAttribute text is selectable for the user.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Determines the direction of the text, not including the title.
Available options for the text direction are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from its parent control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when the user clicks on active text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ObjectHeader'-->
<xsd:complexType name="_ObjectHeaderType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'attributes'-->
<xsd:element ref="n1:ObjectAttribute" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="attributes" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The list of Object Attributes</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ObjectAttribute" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="firstStatus" minOccurs="0">
<xsd:annotation>
<xsd:documentation>First status shown on the right side of the attributes above the second status.
If it is not set the first attribute will expand to take the entire row.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ObjectStatus" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="secondStatus" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Second status shown on the right side of the attributes below the first status.
If it is not set the second attribute will expand to take the entire row.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ObjectStatus" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="statuses" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The list of Object sap.ui.core.Control. It will only allow sap.m.ObjectStatus and sap.m.ProgressIndicator controls.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="additionalNumbers" minOccurs="0">
<xsd:annotation>
<xsd:documentation>NOTE: Only applied if you set "responsive=false".
Additional object numbers and units are managed in this aggregation.
The numbers are hidden on tablet and phone size screens.
When only one number is provided, it is rendered with additional separator from the main ObjectHeader number.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ObjectNumber" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="headerContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>This aggregation takes only effect when you set "responsive" to true.
It can either be filled with an sap.m.IconTabBar or a sap.suite.ui.commons.HeaderContainer control. Overflow handling must be taken care of by the inner control. If used with an IconTabBar control, only the header will be displayed inside the object header, the content will be displayed below the ObjectHeader.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Object header title</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="number" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Object header number field</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="numberUnit" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Object header number units qualifier</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="intro" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Introductory text for the object header</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="introActive" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that the intro is clickable</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleActive" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that the title is clickable and is set only if a title is provided</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Object header icon.

&lt;b&gt;Note:&lt;/b&gt; Recursive resolution of binding expressions is not supported by the framework.
It works only in ObjectHeader, since it is a composite control and creates an Image control internally.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconActive" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that the object header icon is clickable</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconAlt" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Object header icon alternative text that is displayed in case the Image is not available, or cannot be displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is the key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="markFavorite" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Sets the favorite state to true or false. The showMarkers property must be true for this property to take effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="markFlagged" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Sets the flagged state to true or false. The showMarkers property must be true for this property to take effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showMarkers" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if object header supports showing markers such as flagged and favorite.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTitleSelector" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>When set to true, the selector arrow icon/image is shown and can be pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="numberState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Object header number and numberUnit value state.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="condensed" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>&lt;code&gt;ObjectHeader&lt;/code&gt; with title, one attribute, number, and number unit.&lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt; Only applied if the &lt;code&gt;responsive&lt;/code&gt; property is set to &lt;code&gt;false&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundDesign" type="n1:_BackgroundDesignType">
<xsd:annotation>
<xsd:documentation>This property is used to set the background color of the ObjectHeader. Possible values are "Solid", "Translucent" and "Transparent".
NOTE: The different types of ObjectHeader come with different default background.
- non responsive ObjectHeader: Transparent
- responsive ObjectHeader: Translucent
- condensed ObjectHeder: Solid</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="responsive" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this property is set to true the ObjectHeader is rendered with a different design and reacts responsively to the screen sizes.
Be aware that the design and behavior of the responsive ObjectHeader can change without further notification.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fullScreenOptimized" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Optimizes the display of the elements of the &lt;code&gt;ObjectHeader&lt;/code&gt;.&lt;br&gt;
Set this property to &lt;code&gt;true&lt;/code&gt; if your application uses a full-screen layout (as opposed to a master-detail or other split-screen layout).&lt;br&gt;
&lt;b&gt;Note&lt;/b&gt;: Only applied if the &lt;code&gt;responsive&lt;/code&gt; property is also set to &lt;code&gt;true&lt;/code&gt;.

If set to &lt;code&gt;true&lt;/code&gt;, the following situations apply:
&lt;ul&gt;
                &lt;li&gt;On desktop, 1-3 attributes/statuses - positioned as a third block on the right side of the Title/Number group&lt;/li&gt;
                &lt;li&gt;On desktop, 4+ attributes/statuses - 4 columns below the Title/Number&lt;/li&gt;
                &lt;li&gt;On tablet (portrait mode), always in 2 columns below the Title/Number&lt;/li&gt;
                &lt;li&gt;On tablet (landscape mode), 1-2 attributes/statuses - 2 columns below the Title/Number&lt;/li&gt;
                &lt;li&gt;On tablet (landscape mode), 3+ attributes/statuses - 3 columns below the Title/Number&lt;/li&gt;
&lt;/ul&gt;
On phone, the attributes and statuses are always positioned in 1 column below the Title/Number of the &lt;code&gt;ObjectHeader&lt;/code&gt;.&lt;br&gt;

If set to &lt;code&gt;false&lt;/code&gt;, the attributes and statuses are being positioned below the Title/Number of the &lt;code&gt;ObjectHeader&lt;/code&gt; in 2 or 3 columns depending on their number:
&lt;ul&gt;
               &lt;li&gt;On desktop, 1-4 attributes/statuses - 2 columns&lt;/li&gt;
               &lt;li&gt;On desktop, 5+ attributes/statuses - 3 columns&lt;/li&gt;
               &lt;li&gt;On tablet, always in 2 columns&lt;/li&gt;
&lt;/ul&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleHref" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The title link target URI. Supports standard hyperlink behavior. If an action should be triggered, this should not be set, but instead an event handler for the "titlePress" event should be registered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleTarget" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Options are _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="introHref" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The intro link target URI. Supports standard hyperlink behavior. If an action should be triggered, this should not be set, but instead an event handler for the "introPress" event should be registered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="introTarget" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Options are _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="introTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the intro text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="numberTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the number and unit directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleSelectorTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets custom text for the tooltip of the select title arrow. If not set, a default text of the tooltip will be displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleLevel" type="n0:_TitleLevelType">
<xsd:annotation>
<xsd:documentation>Defines the semantic level of the title.
This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.
Depending on this setting a HTML h1-h6 element is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titlePress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the title is active and the user taps/clicks on it</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="introPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the intro is active and the user taps/clicks on it</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the title icon is active and the user taps/clicks on it</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleSelectorPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the object header title selector (down-arrow) is pressed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ObjectIdentifier'-->
<xsd:complexType name="_ObjectIdentifierType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence/>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the object title.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the object text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="badgeNotes" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether or not the notes icon is displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="badgePeople" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether or not the address book icon is displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="badgeAttachments" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether or not the attachments icon is displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if the ObjectIdentifier is visible. An invisible ObjectIdentifier is not being rendered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleActive" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if the ObjectIdentifier's title is clickable.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs, which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titlePress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when the title is active and the user taps/clicks on it.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ObjectListItem'-->
<xsd:complexType name="_ObjectListItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:sequence>
<!--default aggregation 'attributes'-->
<xsd:element ref="n1:ObjectAttribute" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="attributes" minOccurs="0">
<xsd:annotation>
<xsd:documentation>List of attributes displayed below the title to the left of the status fields.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ObjectAttribute" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="firstStatus" minOccurs="0">
<xsd:annotation>
<xsd:documentation>First status text field displayed on the right side of the attributes.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ObjectStatus" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="secondStatus" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Second status text field displayed on the right side of the attributes.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ObjectStatus" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the ObjectListItem title.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="number" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the ObjectListItem number.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="numberUnit" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the number units qualifier of the ObjectListItem.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="intro" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the introductory text for the ObjectListItem.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>ObjectListItem icon displayed to the left of the title.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activeIcon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon displayed when the ObjectListItem is active.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image (in case this version of image dоesn't exist on the server).

If bandwidth is key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="markFavorite" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Sets the favorite state for the ObjectListItem.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="markFlagged" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Sets the flagged state for the ObjectListItem.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showMarkers" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, the ObjectListItem can be marked with icons such as favorite and flag.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="numberState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Defines the ObjectListItem number and numberUnit value state.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Determines the text direction of the item title.
Available options for the title direction are LTR (left-to-right) and RTL (right-to-left).
By default the item title inherits the text direction from its parent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="introTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Determines the text direction of the item intro.
Available options for the intro direction are LTR (left-to-right) and RTL (right-to-left).
By default the item intro inherits the text direction from its parent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="numberTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Determines the text direction of the item number.
Available options for the number direction are LTR (left-to-right) and RTL (right-to-left).
By default the item number inherits the text direction from its parent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="markLocked" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Sets the locked state of the ObjectListItem.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ObjectMarker'-->
<xsd:complexType name="_ObjectMarkerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence/>
<xsd:attribute name="type" type="n1:_ObjectMarkerTypeType">
<xsd:annotation>
<xsd:documentation>Sets one of the predefined types.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibility" type="n1:_ObjectMarkerVisibilityType">
<xsd:annotation>
<xsd:documentation>Sets one of the visibility states.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the &lt;code&gt;ObjectMarker&lt;/code&gt; is interactive and the user taps/clicks on it.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ObjectNumber'-->
<xsd:complexType name="_ObjectNumberType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="number" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the number field.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="numberUnit" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the number units qualifier.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emphasized" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if the object number should appear emphasized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="state" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Determines the object number's value state. Setting this state will cause the number to be rendered in state-specific colors (only blue-crystal theme).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="unit" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the number units qualifier. If numberUnit and unit are both set, the unit value is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Available options for the number and unit text direction are LTR(left-to-right) and RTL(right-to-left). By default, the control inherits the text direction from its parent control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Sets the horizontal alignment of the number and unit.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ObjectStatus'-->
<xsd:complexType name="_ObjectStatusType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the ObjectStatus title.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the ObjectStatus text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="state" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Defines the text value state.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon URI. This may be either an icon font or image path.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Determines the direction of the text, not including the title.
Available options for the text direction are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from its parent control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs, which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.OverflowToolbar'-->
<xsd:complexType name="_OverflowToolbarType">
<xsd:complexContent>
<xsd:extension base="n1:_ToolbarType">
<xsd:sequence/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.OverflowToolbarLayoutData'-->
<xsd:complexType name="_OverflowToolbarLayoutDataType">
<xsd:complexContent>
<xsd:extension base="n1:_ToolbarLayoutDataType">
<xsd:attribute name="moveToOverflow" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The OverflowToolbar item can or cannot move to the overflow area</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="stayInOverflow" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The OverflowToolbar item can or cannot stay in the overflow area</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="priority" type="n1:_OverflowToolbarPriorityType">
<xsd:annotation>
<xsd:documentation>Defines OverflowToolbar items priority, Available priorities ate NeverOverflow, High, Low, Disappear and AlwaysOverflow</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="group" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Defines OverflowToolbar items group number.
Default value is 0, which means that the control does not belong to any group.
Elements that belong to a group overflow together. The overall priority of the group is defined by the element with highest priority.
Elements that belong to a group are not allowed to have AlwaysOverflow or NeverOverflow priority.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nColumnsItem'-->
<xsd:complexType name="_P13nColumnsItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:attribute name="columnKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This property contains the unique table column key</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="index" type="xsd:int">
<xsd:annotation>
<xsd:documentation>This property contains the index of a table column</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property decides whether a P13nColumnsItem is visible</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This property contains the with of a table column.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="total" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property contains the total flag of a table column.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nColumnsPanel'-->
<xsd:complexType name="_P13nColumnsPanelType">
<xsd:complexContent>
<xsd:extension base="n1:_P13nPanelType">
<xsd:sequence>
<xsd:element name="columnsItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>List of columns that has been changed.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:P13nColumnsItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="visibleItemsThreshold" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Specifies a threshold of visible items. If the end user makes a lot of columns visible, this might cause performance to slow down.
When this happens, the user can receive a corresponding warning triggered by the &lt;code&gt;visibleItemsThreshold&lt;/code&gt; property. The
property needs to be activated and set to the required value by the consuming application to ensure that the warning message is
shown when the threshold has been exceeded. In the following example the message will be shown if more than 100 visible columns are
selected:

&lt;pre&gt;
customData&amp;gt;
core:CustomData key=&amp;quot;p13nDialogSettings&amp;quot;
value='\{&amp;quot;columns&amp;quot;:\{&amp;quot;visible&amp;quot;: true, &amp;quot;payload&amp;quot;: \{&amp;quot;visibleItemsThreshold&amp;quot;: 3\}\}\}' /&amp;gt;
/customData&amp;gt;
&lt;/pre&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="addColumnsItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event raised when a &lt;code&gt;columnsItem&lt;/code&gt; is added.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="changeColumnsItems" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event raised if &lt;code&gt;columnsItems&lt;/code&gt; is changed or new one needs to be created in the model.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="setData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event raised if &lt;code&gt;setData&lt;/code&gt; is called in model. The event serves the purpose of minimizing such calls since they can
take up a lot of performance.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nConditionPanel'-->
<xsd:complexType name="_P13nConditionPanelType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence/>
<xsd:attribute name="maxConditions" type="xsd:string">
<xsd:annotation>
<xsd:documentation>defines the max number of conditions on the ConditionPanel</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="exclude" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>exclude options for filter</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="containerQuery" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>defines if the mediaQuery or a ContainerResize will be used for layout update. When the P13nConditionPanel is used on a dialog the
property should be set to true!</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="autoAddNewRow" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>adds initial a new empty condition row</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="disableFirstRemoveIcon" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>makes the remove icon on the first condition row disabled when only one condition exist.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="alwaysShowAddIcon" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>makes the Add icon visible on each condition row. If is set to false the Add is only visible at the end and you can only append a
new condition.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="usePrevConditionSetting" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>new added condition use the settings from the previous condition as default.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="autoReduceKeyFieldItems" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>KeyField value can only be selected once. When you set the property to true the ConditionPanel will automatically offers on the
KeyField drop down only the keyFields which are not used. The default behavior is that in each keyField dropdown all keyfields are
listed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="layoutMode" type="xsd:string">
<xsd:annotation>
<xsd:documentation>can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
or"Phone" you can set a fixed layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showLabel" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>show additional labels in the condition</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayFormat" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This represents the displayFormat of the condition Values. With the value "UpperCase" the entered value of the condition will be
converted to upperCase.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="validationExecutor" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Calls the validation listener tbd...</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Workaround for updating the binding</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nDialog'-->
<xsd:complexType name="_P13nDialogType">
<xsd:complexContent>
<xsd:extension base="n1:_DialogType">
<xsd:sequence>
<xsd:element name="panels" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The dialog panels displayed in the dialog.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:P13nPanel" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="initialVisiblePanelType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This property determines which panel is initially shown when dialog is opened. Due to extensibility reason the type should be
&lt;code&gt;string&lt;/code&gt;. So it is feasible to add a custom panel without expanding the type.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showReset" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property determines whether the 'Restore' button is shown inside the dialog. If this property is set to true, clicking the
'Reset' button will trigger the &lt;code&gt;reset&lt;/code&gt; event sending a notification that model data must be reset.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showResetEnabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property determines whether the 'Restore' button is enabled and is taken into account only if &lt;code&gt;showReset&lt;/code&gt; is set
to &lt;code&gt;true&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="validationExecutor" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Calls the validation listener once all panel-relevant validation checks have been done. This callback function is called in order
to perform cross-model validation checks.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ok" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired if the 'ok' button in P13nDialog is clicked.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired if the 'cancel' button in P13nDialog is clicked.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="reset" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired if the 'reset' button in P13nDialog is clicked.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nDimMeasureItem'-->
<xsd:complexType name="_P13nDimMeasureItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:attribute name="columnKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the unique chart column key. In this context a column refers to dimensions or measures of a chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="index" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Specifies the order of visible dimensions or measures of a chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies the visibility of dimensions or measures.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="role" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the role of dimensions or measures. The role determines how dimensions and measures influence the chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nDimMeasurePanel'-->
<xsd:complexType name="_P13nDimMeasurePanelType">
<xsd:complexContent>
<xsd:extension base="n1:_P13nPanelType">
<xsd:sequence>
<xsd:element name="dimMeasureItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>List of columns that has been changed.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:P13nDimMeasureItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="availableChartTypes" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Specifies available chart types.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="chartTypeKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies a chart type key.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nFilterItem'-->
<xsd:complexType name="_P13nFilterItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:attribute name="operation" type="xsd:string">
<xsd:annotation>
<xsd:documentation>sap.m.P13nConditionOperation</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value1" type="xsd:string">
<xsd:annotation>
<xsd:documentation>value of the filter</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value2" type="xsd:string">
<xsd:annotation>
<xsd:documentation>to value of the between filter</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>key of the column</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="exclude" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>defines if the filter is an include or exclude filter item</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nFilterPanel'-->
<xsd:complexType name="_P13nFilterPanelType">
<xsd:complexContent>
<xsd:extension base="n1:_P13nPanelType">
<xsd:sequence>
<xsd:element name="filterItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Defines filter items.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:P13nFilterItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="maxIncludes" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the maximum number of include filters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxExcludes" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the maximum number of exclude filters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="containerQuery" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines if the &lt;code&gt;mediaQuery&lt;/code&gt; or a &lt;code&gt;ContainerResize&lt;/code&gt; is used for layout update. If the
&lt;code&gt;ConditionPanel&lt;/code&gt; is used in a dialog, the property must be set to &lt;code&gt;true&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="layoutMode" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
or"Phone" you can set a fixed layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="addFilterItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event raised if a filter item has been added.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="removeFilterItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Removes a filter item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="updateFilterItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Updates a filter item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nGroupItem'-->
<xsd:complexType name="_P13nGroupItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:attribute name="operation" type="xsd:string">
<xsd:annotation>
<xsd:documentation>sap.m.P13nConditionOperation</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>key of the column</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showIfGrouped" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>make the grouped column as normalcolumn visible</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nGroupPanel'-->
<xsd:complexType name="_P13nGroupPanelType">
<xsd:complexContent>
<xsd:extension base="n1:_P13nPanelType">
<xsd:sequence>
<xsd:element name="groupItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Defined group items.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:P13nGroupItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="maxGroups" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the maximum number of groups.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="containerQuery" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines if &lt;code&gt;mediaQuery&lt;/code&gt; or &lt;code&gt;ContainerResize&lt;/code&gt; is used for a layout update. If &lt;code&gt;ConditionPanel&lt;/code&gt;
is used in a dialog, the property must be set to true.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="layoutMode" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
or"Phone" you can set a fixed layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="addGroupItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event raised if a &lt;code&gt;GroupItem&lt;/code&gt; has been added.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="removeGroupItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Removes a group item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="updateGroupItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Updates a group item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nItem'-->
<xsd:complexType name="_P13nItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="columnKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Can be used as input for subsequent actions.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The text to be displayed for the item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines visibility of column</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="xsd:string">
<xsd:annotation>
<xsd:documentation>data type of the column (text, numeric or date is supported)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="precision" type="xsd:string">
<xsd:annotation>
<xsd:documentation>if type==numeric the precision will be used to format the entered value (maxIntegerDigits of the used Formatter)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="scale" type="xsd:string">
<xsd:annotation>
<xsd:documentation>if type==numeric the scale will be used to format the entered value (maxFractionDigits of the used Formatter)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxLength" type="xsd:string">
<xsd:annotation>
<xsd:documentation>specifies the number of characters which can be entered in the value fields of the condition panel</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines column width</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isDefault" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>the column with isDefault==true will be used as the selected column item on the conditionPanel</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="values" type="xsd:string">
<xsd:annotation>
<xsd:documentation>the array of values for type bool. e.g. ["", "Off", "On"]. The first entry can be empty (used to blank the value field). Next value
represent the false value, last entry the true value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="role" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines role. The role is reflected in the manner how the dimension will influence the chart layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="aggregationRole" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines aggregation role</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nPanel'-->
<xsd:complexType name="_P13nPanelType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n1:P13nItem" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Aggregation of items</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:P13nItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Title text appears in the panel.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleLarge" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Large title text appears e.g. in dialog header in case that only one panel is shown.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Panel type for generic use. Due to extensibility reason the type of &lt;code&gt;type&lt;/code&gt; property should be &lt;code&gt;string&lt;/code&gt;.
So it is feasible to add a custom panel without expanding the type.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="verticalScrolling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables the vertical Scrolling on the P13nDialog when the panel is shown.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="validationExecutor" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Callback method which is called in order to validate end user entry.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="validationListener" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Callback method which is called in order to register for validation result.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="changeNotifier" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Callback which notifies a change on this panel.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeNavigationTo" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Due to performance the data of the panel can be requested in lazy mode e.g. when the panel is displayed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nSortItem'-->
<xsd:complexType name="_P13nSortItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:attribute name="operation" type="xsd:string">
<xsd:annotation>
<xsd:documentation>sap.m.P13nConditionOperation</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>key of the column</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nSortPanel'-->
<xsd:complexType name="_P13nSortPanelType">
<xsd:complexContent>
<xsd:extension base="n1:_P13nPanelType">
<xsd:sequence>
<xsd:element name="sortItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>defined Sort Items</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:P13nSortItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="containerQuery" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>defines if the mediaQuery or a ContainerResize will be used for layout update. When the ConditionPanel is used on a dialog the
property should be set to true!</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="layoutMode" type="xsd:string">
<xsd:annotation>
<xsd:documentation>can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
or"Phone" you can set a fixed layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="addSortItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>event raised when a SortItem was added</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="removeSortItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>remove a sort item</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="updateSortItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>update a sort item</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Page'-->
<xsd:complexType name="_PageType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content of this page</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="customHeader" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The (optional) custom header of this page.
Use this aggregation only when a custom header is constructed where the default header consisting of title text + nav button is not sufficient.
If this aggregation is set, the simple properties "title", "showNavButton", "NavButtonText" and "icon" are not used.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="footer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The (optional) footer of this page. It is always located at the bottom of the page</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="subHeader" minOccurs="0">
<xsd:annotation>
<xsd:documentation>a subHeader will be rendered directly under the header</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="headerContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Controls to be added to the right side of the page header. Usually an application would use Button controls and limit the number to one when the application needs to run on smartphones. There is no automatic overflow handling when the space is insufficient.
When a customHeader is used, this aggregation will be ignored.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="landmarkInfo" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Accessible landmark settings to be applied on the containers of the &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If not set, no landmarks will be written.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:PageAccessibleLandmarkInfo" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The title text appearing in the page header bar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleLevel" type="n0:_TitleLevelType">
<xsd:annotation>
<xsd:documentation>Defines the semantic level of the title. Using "Auto" no explicit level information is written.
Used for accessibility purposes only.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showNavButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>A nav button will be rendered on the left area of header bar if this property is set to true.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showHeader" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether this page shall have a header.
If set to true, either the control under the "customHeader" aggregation is used, or if there is no such control, a Header control is constructed from the properties "title", "showNavButton", "navButtonText" and "icon" depending on the platform.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSubHeader" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether this page shall show the subheader.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navButtonText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The text of the nav button when running in iOS (if shown) in case it deviates from the default, which is "Back". This property is mvi-theme-dependent and will not have any effect in other themes.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navButtonTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The tooltip of the nav button

Since version 1.34</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableScrolling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enable vertical scrolling of page contents. Page headers and footers are fixed and do not scroll.
If set to false, there will be no scrolling at all.

The Page only allows vertical scrolling because horizontal scrolling is discouraged in general for full-page content. If it still needs to be achieved, disable the Page scrolling and use a ScrollContainer as full-page content of the Page. This allows you to freely configure scrolling. It can also be used to create horizontally-scrolling sub-areas of (vertically-scrolling) Pages.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>the icon that is rendered in the page header bar in non-iOS phone/tablet platforms. This property is theme-dependent and only has an effect in the MVI theme.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundDesign" type="n1:_PageBackgroundDesignType">
<xsd:annotation>
<xsd:documentation>This property is used to set the background color of a page. When a list is placed inside a page, the value "List" should be used to display a gray background. "Standard", with the value white, is used as default if not specified.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navButtonType" type="n1:_ButtonTypeType">
<xsd:annotation>
<xsd:documentation>This property is used to set the appearance of the NavButton. By default when showNavButton is set to true, a back button will be shown in iOS and an up button in other platforms. In case you want to show a normal button in the left header area, you can set the value to "Default".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showFooter" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether this page shall have a footer</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentOnlyBusy" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Decides which area is covered by the local BusyIndicator when &lt;code&gt;page.setBusy()&lt;/code&gt; is called. By default the entire page is covered, including headers and footer. When this property is set to "true", only the content area is covered (not header/sub header and footer), which is useful e.g. when there is a SearchField in the sub header and live search continuously updates the content area while the user is still able to type.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navButtonTap" type="xsd:string">
<xsd:annotation>
<xsd:documentation>this event is fired when Nav Button is tapped</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navButtonPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>this event is fired when Nav Button is pressed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.PageAccessibleLandmarkInfo'-->
<xsd:complexType name="_PageAccessibleLandmarkInfoType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="rootRole" type="n0:_AccessibleLandmarkRoleType">
<xsd:annotation>
<xsd:documentation>Landmark role of the root container of the corresponding &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If set to &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt;, no landmark will be added to the container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="rootLabel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Texts which describes the landmark of the root container of the corresponding &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If not set (and a landmark different than &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt; is defined), a predefined text
is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentRole" type="n0:_AccessibleLandmarkRoleType">
<xsd:annotation>
<xsd:documentation>Landmark role of the content container of the corresponding &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If set to &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt;, no landmark will be added to the container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentLabel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Texts which describes the landmark of the content container of the corresponding &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If not set (and a landmark different than &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt; is defined), a predefined text
is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="headerRole" type="n0:_AccessibleLandmarkRoleType">
<xsd:annotation>
<xsd:documentation>Landmark role of the header container of the corresponding &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If set to &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt;, no landmark will be added to the container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="headerLabel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Texts which describes the landmark of the header container of the corresponding &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If not set (and a landmark different than &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt; is defined), a predefined text
is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="subHeaderRole" type="n0:_AccessibleLandmarkRoleType">
<xsd:annotation>
<xsd:documentation>Landmark role of the subheader container of the corresponding &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If set to &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt;, no landmark will be added to the container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="subHeaderLabel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Texts which describes the landmark of the subheader container of the corresponding &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If not set (and a landmark different than &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt; is defined), a predefined text
is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="footerRole" type="n0:_AccessibleLandmarkRoleType">
<xsd:annotation>
<xsd:documentation>Landmark role of the footer container of the corresponding &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If set to &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt;, no landmark will be added to the container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="footerLabel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Texts which describes the landmark of the header container of the corresponding &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If not set (and a landmark different than &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt; is defined), a predefined text
is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.PagingButton'-->
<xsd:complexType name="_PagingButtonType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence/>
<xsd:attribute name="count" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Determines the total count of items/entities that the control navigates through.
The minimum number of items/entities is 1.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="position" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Determines the current position in the items/entities that the control navigates through.
Starting (minimum) number is 1.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="nextButtonTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the tooltip of the next button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="previousButtonTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the tooltip of the previous button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="positionChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the current position is changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Panel'-->
<xsd:complexType name="_PanelType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Determines the content of the Panel.
The content will be visible only when the Panel is expanded.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="headerToolbar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>This aggregation allows the use of a custom Toolbar as header for the Panel.
The "headerToolbar" is visible in both expanded and collapsed state.
Use it when you want to add extra controls for user interactions in the header.
Note: This aggregation overwrites "headerText" property.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Toolbar" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="infoToolbar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>This aggregation allows the use of a custom Toolbar as information bar for the Panel.
The "infoToolbar" is placed below the header and is visible only in expanded state.
Use it when you want to show extra information to the user.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Toolbar" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="headerText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This property is used to set the header text of the Panel.
The "headerText" is visible in both expanded and collapsed state.
Note: This property is overwritten by the "headerToolbar" aggregation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Determines the Panel width.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Determines the Panel height.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expandable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the control is expandable.
This allows for collapsing or expanding the infoToolbar (if available) and content of the Panel.
Note: If expandable is set to false, the Panel will always be rendered expanded.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expanded" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the Panel is expanded or not.
If expanded is set to true, then both the infoToolbar (if available) and the content are rendered.
If expanded is set to false, then only the headerText or headerToolbar is rendered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expandAnimation" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the transition between the expanded and the collapsed state of the control is animated.
By default the animation is enabled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundDesign" type="n1:_BackgroundDesignType">
<xsd:annotation>
<xsd:documentation>This property is used to set the background color of the Panel.
Depending on the theme you can change the state of the background from "Solid" over "Translucent" to "Transparent".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expand" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Indicates that the panel will expand or collapse</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.PlanningCalendar'-->
<xsd:complexType name="_PlanningCalendarType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="rows" minOccurs="0">
<xsd:annotation>
<xsd:documentation>rows of the &lt;code&gt;PlanningCalendar&lt;/code&gt;</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:PlanningCalendarRow" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="views" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Views of the &lt;code&gt;PlanningCalendar&lt;/code&gt;.

If not set, three default views are used to allow you to switch between hour, day and month granularity.
The default views have the keys defined in &lt;/code&gt;sap.ui.unified.CalendarIntervalType&lt;/code&gt;</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:PlanningCalendarView" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="specialDates" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Date range along with a type to visualize special days in the header calendar.
If one day is assigned to more than one type, only the first one will be used.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="null:DateTypeRange" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolbarContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content of the toolbar.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="startDate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Start date of the row, as JavaScript date object. As a default the current date is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="viewKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key of the &lt;code&gt;PlanningCalendarView&lt;/code&gt; used for the output. The default value uses a default view.
If you are using own views, the keys of these views must be used instead.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="singleSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set, only a single row can be selected</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of the &lt;code&gt;PlanningCalendar&lt;/code&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Height of the &lt;code&gt;PlanningCalendar&lt;/code&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showIntervalHeaders" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set, interval headers are shown like specified in &lt;code&gt;showEmptyIntervalHeaders&lt;/code&gt;.

If not set, no interval headers are shown even if &lt;code&gt;intervalHeaders&lt;/code&gt; are assigned.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showEmptyIntervalHeaders" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set, interval headers are shown even if no &lt;code&gt;intervalHeaders&lt;/code&gt; are assigned to the visible time frame.

If not set, no interval headers are shown if no &lt;code&gt;intervalHeaders&lt;/code&gt; are assigned.

&lt;b&gt;Note:&lt;/b&gt; This property is only used if &lt;code&gt;showIntervalHeaders&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showRowHeaders" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set, headers of the &lt;code&gt;PlanningCalendarRows&lt;/code&gt; are shown. This means the column with the headers is shown.

If not set, the header column is not shown at all, even if header information is provided.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="noDataText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This text is displayed when no rows are assigned.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="appointmentsReducedHeight" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set the appointments without text (only title) are rendered with a smaller height.

&lt;b&gt;Note:&lt;/b&gt; On phone devices this property is ignored, appointments are always rendered in full height
to allow touching.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minDate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Minimum date that can be shown and selected in the &lt;code&gt;PlanningCalendar&lt;/code&gt;. This must be a JavaScript date object.

&lt;b&gt;Note:&lt;/b&gt; If the &lt;code&gt;minDate&lt;/code&gt; is set to be after the &lt;code&gt;maxDate&lt;/code&gt;,
the &lt;code&gt;maxDate&lt;/code&gt; is set to the end of the month of the &lt;code&gt;minDate&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxDate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Maximum date that can be shown and selected in the &lt;code&gt;PlanningCalendar&lt;/code&gt;. This must be a JavaScript date object.

&lt;b&gt;Note:&lt;/b&gt; If the &lt;code&gt;maxDate&lt;/code&gt; is set to be before the &lt;code&gt;minDate&lt;/code&gt;,
the &lt;code&gt;minDate&lt;/code&gt; is set to the begin of the month of the &lt;code&gt;maxDate&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="appointmentSelect" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired if an appointment was selected</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="intervalSelect" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired if an interval was selected in the header calendar or in the row</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="rowSelectionChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when row selection is changed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="startDateChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>&lt;code&gt;startDate&lt;/code&gt; was changed while navigating in &lt;code&gt;PlanningCalendar&lt;/code&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="viewChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>&lt;code&gt;viewKey&lt;/code&gt; was changed by user interaction</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.PlanningCalendarRow'-->
<xsd:complexType name="_PlanningCalendarRowType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<xsd:element name="appointments" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Appointments to be displayed in the row. Appointments outside the visible time frame are not rendered.

&lt;b&gt;Note:&lt;/b&gt; For performance reasons only appointments in the visible time range or nearby should be assigned.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="null:CalendarAppointment" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="intervalHeaders" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Appointments to be displayed in the top of the intervals. The &lt;code&gt;intervalHeaders&lt;/code&gt; are used to visualize
public holidays and similar things.

Appointments outside the visible time frame are not rendered.

The &lt;code&gt;intervalHeaders&lt;/code&gt; always fill whole intervals. If they are shorter than one interval they are not displayed.

&lt;b&gt;Note:&lt;/b&gt; For performance reasons only appointments in the visible time range or nearby should be assigned.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="null:CalendarAppointment" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Title of the header (e.g. name of the person)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text of the header (e.g. department of the person)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon of the header (e.g. picture of the person)

URI of an image or an icon registered in sap.ui.core.IconPool.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="nonWorkingDays" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If set, the provided weekdays are displayed as non-working days.
Valid values inside the array are 0 to 6. (other values will just be ignored.)

If not set, the weekend defined in the locale settings is displayed as non-working days.

&lt;b&gt;Note:&lt;/b&gt; The non-working days are only visualized if &lt;code&gt;intervalType&lt;/code&gt; is set to day.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="nonWorkingHours" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If set, the provided hours are displayed as non-working hours.
Valid values inside the array are 0 to 23. (other values will just be ignored.)

&lt;b&gt;Note:&lt;/b&gt; The non-working hours are only visualized if &lt;code&gt;intervalType&lt;/code&gt; is set to hour.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selected" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines the selected state of the &lt;code&gt;PlanningCalendarRow&lt;/code&gt;.
&lt;b&gt;Note:&lt;/b&gt; Binding the &lt;code&gt;selected&lt;/code&gt; property in single selection modes may cause unwanted results if you have more than one selected row in your binding.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Can be used as an identifier of the row</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.PlanningCalendarView'-->
<xsd:complexType name="_PlanningCalendarViewType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key of the view. This must be set to identify the used view in the &lt;code&gt;PlanningCalendar&lt;/code&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="intervalType" type="null:_CalendarIntervalTypeType">
<xsd:annotation>
<xsd:documentation>Type of the intervals of the row. Default is Hour.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Description of the &lt;code&gt;PlanningCalendarView&lt;/code&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="intervalsS" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of intervals (defined with &lt;code&gt;intervalType&lt;/code&gt;) that are displayed on small size (phones).

&lt;b&gt;Note:&lt;/b&gt; It is not only the screen size which is used to determine the available space, the size of the &lt;code&gt;PlanningCalendar&lt;/code&gt; is used as well.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="intervalsM" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of intervals (defined with &lt;code&gt;intervalType&lt;/code&gt;) that are displayed on medium size (tablet)

&lt;b&gt;Note:&lt;/b&gt; It is not only the screen size which is used to determine the available space, the size of the &lt;code&gt;PlanningCalendar&lt;/code&gt; is used as well.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="intervalsL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of intervals (defined with &lt;code&gt;intervalType&lt;/code&gt;) that are displayed on large size (desktop)

&lt;b&gt;Note:&lt;/b&gt; It is not only the screen size which is used to determine the available space, the size of the &lt;code&gt;PlanningCalendar&lt;/code&gt; is used as well.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSubIntervals" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set subintervals are shown.

If the interval type is &lt;code&gt;Hour&lt;/code&gt;, quarter hours are shown.

If the interval type is &lt;code&gt;Day&lt;/code&gt;, hours are shown.

If the interval type is &lt;code&gt;Month&lt;/code&gt;, days are shown.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Popover'-->
<xsd:complexType name="_PopoverType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content inside the popover.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="customHeader" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Any control that needed to be displayed in the header area. When this is set, the showHeader property is ignored, and only this customHeader is shown on the top of popover.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="subHeader" minOccurs="0">
<xsd:annotation>
<xsd:documentation>When subHeader is assigned to Popover, it's rendered directly after the main header if there is, or at the beginning of Popover when there's no main header. SubHeader is out of the content area and won't be scrolled when content's size is bigger than the content area's size.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="footer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>This is optional footer which is shown on the bottom of the popover.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="beginButton" minOccurs="0">
<xsd:annotation>
<xsd:documentation>BeginButton is shown at the left side (right side in RTL mode) inside the header. When showHeader is set to false, the property is ignored.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="endButton" minOccurs="0">
<xsd:annotation>
<xsd:documentation>EndButton is always shown at the right side (left side in RTL mode) inside the header. When showHeader is set to false, the property is ignored.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="placement" type="n1:_PlacementTypeType">
<xsd:annotation>
<xsd:documentation>This is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal, sap.m.PlacementType.HorizontalPreferredLeft, sap.m.PlacementType.HorizontalPreferredRight, sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferredTop, sap.m.PlacementType.VerticalPreferredBottom, sap.m.PlacementType.Auto. The default value is sap.m.PlacementType.Right. Setting this property while popover is open won't cause any rerendering of the popover, but it will take effect when it's opened again.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showHeader" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If a header should be shown at the top of the popover.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Title text appears in the header. This property will be ignored when showHeader is set to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="modal" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If the popover will not be closed when tapping outside the popover. It also blocks any interaction with the background. The default value is false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="offsetX" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The offset for the popover placement in the x axis. It's with unit pixel.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="offsetY" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The offset for the popover placement in the y axis. It's with unit pixel.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showArrow" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether Popover arrow should be visible</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Set the width of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentMinWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the minimum width of the content area inside popover.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentHeight" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Set the height of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableScrolling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="verticalScrolling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property indicates if user can scroll vertically inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="horizontalScrolling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property indicates if user can scroll horizontally inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="bounce" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether bouncing is enabled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resizable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether resize option is enabled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="leftButton" type="xsd:string">
<xsd:annotation>
<xsd:documentation>LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="rightButton" type="xsd:string">
<xsd:annotation>
<xsd:documentation>RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialFocus" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Focus is set to the popover in the sequence of leftButton and rightButton when available. But if some other control neends to get the focus other than one of those two buttons, set the initialFocus with the control which should be focused on.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired after the popover is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired after the popover is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired before the popover is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired before the popover is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ProgressIndicator'-->
<xsd:complexType name="_ProgressIndicatorType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Switches enabled state of the control. Disabled fields have different colors, and cannot be focused.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="state" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Specifies the state of the bar. Enumeration sap.ui.core.ValueState provides Error (red), Warning (yellow), Success (green), None (blue) (default value).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayValue" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the text value to be displayed in the bar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="percentValue" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Specifies the numerical value in percent for the length of the progress bar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showValue" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the displayValue should be shown in the ProgressIndicator.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Specifies the width of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Specifies the height of the control. The default value depends on the theme. Suggested size for normal use is 2.5rem (40px). Suggested size for small size (like for use in ObjectHeader) is 1.375rem (22px).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Specifies the element's text directionality with enumerated options (RTL or LTR). By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.PullToRefresh'-->
<xsd:complexType name="_PullToRefreshType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Optional description. May be used to inform a user, for example, when the list has been updated last time.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showIcon" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set to true to display an icon/logo. Icon must be set either in the customIcon property or in the CSS theme for the PullToRefresh control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIcon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Provide a URI to a custom icon image to replace the SAP logo. Large images are scaled down to max 50px height.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is the key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="refresh" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event indicates that the user has requested new data</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.QuickView'-->
<xsd:complexType name="_QuickViewType">
<xsd:complexContent>
<xsd:extension base="n1:_QuickViewBaseType">
<xsd:attribute name="placement" type="n1:_PlacementTypeType">
<xsd:annotation>
<xsd:documentation>This property is reused from sap.m.Popover and only takes effect when running on desktop or tablet. Please refer the documentation of the placement property of sap.m.Popover.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width of the QuickView. The property takes effect only when running on desktop or tablet.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event fires after the QuickView is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event fires after the QuickView is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event fires before the QuickView is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event fires before the QuickView is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.QuickViewBase'-->
<xsd:complexType name="_QuickViewBaseType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'pages'-->
<xsd:element ref="n1:QuickViewPage" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="pages" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Displays a page header, object icon or image, object name with short description,
and object information divided in groups</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:QuickViewPage" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="navigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when navigation between two pages has been triggered.
The transition (if any) to the new page has not started yet.
This event can be aborted by the application with preventDefault(),
which means that there will be no navigation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when navigation between two pages has completed.
In case of animated transitions this event is fired with some delay
after the "navigate" event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.QuickViewCard'-->
<xsd:complexType name="_QuickViewCardType">
<xsd:complexContent>
<xsd:extension base="n1:_QuickViewBaseType">
<xsd:attribute name="showVerticalScrollBar" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the browser displays the vertical scroll bar or simply cuts the content of the QuickViewCard.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.QuickViewGroup'-->
<xsd:complexType name="_QuickViewGroupType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<!--default aggregation 'elements'-->
<xsd:element ref="n1:QuickViewGroupElement" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="elements" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A combination of one label and another control (Link or Text) associated to this label.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:QuickViewGroupElement" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the group is visible on the screen.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="heading" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The title of the group</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.QuickViewGroupElement'-->
<xsd:complexType name="_QuickViewGroupElementType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the element should be visible on the screen.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="label" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the text displayed below the associated label.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the text of the control that associates with the label.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="url" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the address of the QuickViewGroupElement link. Works only with QuickViewGroupElement of type link.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="target" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the target of the link – it works like the target property of the HTML &lt;a&gt; tag. Works only with QuickViewGroupElement of type link.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n1:_QuickViewGroupElementTypeType">
<xsd:annotation>
<xsd:documentation>Specifies the type of the displayed information – phone number, mobile number, e-mail, link, text or a link to another QuickViewPage. Default value is ‘text’.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="pageLinkId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the ID of the QuickViewPage, which is opened from the link in the QuickViewGroupElement.
Works only with QuickViewGroupElement of type pageLink.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emailSubject" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The subject of the email.
Works only with QuickViewGroupElement of type email.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.QuickViewPage'-->
<xsd:complexType name="_QuickViewPageType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'groups'-->
<xsd:element ref="n1:QuickViewGroup" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="groups" minOccurs="0">
<xsd:annotation>
<xsd:documentation>QuickViewGroup consists of a title (optional) and an entity of group elements.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:QuickViewGroup" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="pageId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Page id</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="header" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the text displayed in the header of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the text displayed in the header of the content section of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleUrl" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the URL which opens when the title or the thumbnail is clicked.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="crossAppNavCallback" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the application which provides target and param configuration  for cross-application navigation from the 'page header'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the text displayed under the header of the content section</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the URL of the icon displayed under the header of the page</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.RadioButton'-->
<xsd:complexType name="_RadioButtonType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies if the radio button is disabled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selected" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies the select state of the radio button</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="groupName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of the radio button group the current radio button belongs to. You can define a new name for the group.
If no new name is specified, this radio button belongs to the sapMRbDefaultGroup per default. Default behavior of a radio button in a group is that when one of the radio buttons in a group is selected, all others are unselected.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the text displayed next to the RadioButton</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of the Label</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activeHandling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This is a flag to switch on activeHandling. When it is switched off,
there will not be visual changes on active state. Default value is 'true'</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the user can select the radio button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Enumeration sap.ui.core.ValueState provides state values Error, Success, Warning, None</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Specifies the alignment of the radio button. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is triggered when the user makes a change on the radio button (selecting or unselecting it).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.RadioButtonGroup'-->
<xsd:complexType name="_RadioButtonGroupType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'buttons'-->
<xsd:element ref="n1:RadioButton" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="buttons" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Returns a list of the RadioButtons in a RadioButtonGroup</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:RadioButton" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Specifies the width of the RadioButtonGroup.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columns" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Specifies the maximum number of radio buttons displayed in one line.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the user can change the selected value of the RadioButtonGroup.
When the property is set to false, the control obtains visual styles
different from its visual styles for the normal and the disabled state.
Additionally, the control is no longer interactive, but can receive focus.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Тhe value state to be displayed for the radio button. Possible values are: sap.ui.core.ValueState.Error,
sap.ui.core.ValueState.Warning, sap.ui.core.ValueState.Success and sap.ui.core.ValueState.None.
Note: Setting this attribute to sap.ui.core.ValueState.Error when the accessibility feature is enabled,
sets the value of the invalid propery for the whole RadioButtonGroup to “true”.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedIndex" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Determines the index of the selected/checked RadioButton. Default is 0.
If no radio button is selected, the selectedIndex property will return -1.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Switches the enabled state of the control. All Radio Buttons inside a disabled group are disabled. Default value is “true”.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when selection is changed by user interaction.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.RangeSlider'-->
<xsd:complexType name="_RangeSliderType">
<xsd:complexContent>
<xsd:extension base="n1:_SliderType">
<xsd:attribute name="range" type="n0:_anyType">
<xsd:annotation>
<xsd:documentation>Determines the range in which the user can select values.

If the value is lower/higher than the allowed minimum/maximum,
a warning message will be output to the console.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.RatingIndicator'-->
<xsd:complexType name="_RatingIndicatorType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence/>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Value "true" is required to let the user rate with this control. It is recommended to set this parameter to "false" for the "Small" size which is meant for indicating a value only</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxValue" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The number of displayed rating symbols</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:float">
<xsd:annotation>
<xsd:documentation>The indicated value of the rating</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconSize" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The Size of the image or icon to be displayed. The default value depends on the theme. Please be sure that the size is corresponding to a full pixel value as some browsers don't support subpixel calculations. Recommended size is 1.375rem (22px) for normal, 1rem (16px) for small, and 2rem (32px) for large icons correspondingly.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconSelected" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The URI to the icon font icon or image that will be displayed for selected rating symbols. A star icon will be used if the property is not set</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconUnselected" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The URI to the icon font icon or image that will be displayed for all unselected rating symbols. A star icon will be used if the property is not set</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconHovered" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The URI to the icon font icon or image that will be displayed for hovered rating symbols. A star icon will be used if the property is not set</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visualMode" type="n1:_RatingIndicatorVisualModeType">
<xsd:annotation>
<xsd:documentation>Defines how float values are visualized: Full, Half (see enumeration RatingIndicatorVisualMode)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when the user has done a rating.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is triggered during the dragging period, each time the rating value changes.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ResponsivePopover'-->
<xsd:complexType name="_ResponsivePopoverType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Content is supported by both variants. Please see the documentation on sap.m.Popover#content and sap.m.Dialog#content</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="customHeader" minOccurs="0">
<xsd:annotation>
<xsd:documentation>CustomHeader is supported by both variants. Please see the documentation on sap.m.Popover#customHeader and sap.m.Dialog#customHeader</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="subHeader" minOccurs="0">
<xsd:annotation>
<xsd:documentation>SubHeader is supported by both variants. Please see the documentation on sap.m.Popover#subHeader and sap.m.Dialog#subHeader</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="beginButton" minOccurs="0">
<xsd:annotation>
<xsd:documentation>BeginButton is supported by both variants. It is always show in the left part (right part in RTL mode) of the footer which is located at the bottom of the ResponsivePopover. If buttons need to be displayed in header, please use customHeader instead.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="endButton" minOccurs="0">
<xsd:annotation>
<xsd:documentation>EndButton is supported by both variants. It is always show in the right part (left part in RTL mode) of the footer which is located at the bottom of the ResponsivePopover. If buttons need to be displayed in header, please use customHeader instead.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="placement" type="n1:_PlacementTypeType">
<xsd:annotation>
<xsd:documentation>This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#placement.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showHeader" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property is supported by both variants. Please see the documentation on sap.m.Popover#showHeader and sap.m.Dialog#showHeader</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This property is supported by both variants. Please see the documentation on sap.m.Popover#title and sap.m.Dialog#title</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>This property only takes effect  on phone. Please see the documentation sap.m.Dialog#icon.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="modal" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#modal.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="offsetX" type="xsd:int">
<xsd:annotation>
<xsd:documentation>This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetX.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="offsetY" type="xsd:int">
<xsd:annotation>
<xsd:documentation>This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetY.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>This property is supported by both variants. Please see the documentation on sap.m.Popover#contentWidth and sap.m.Dialog#contentWidth</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentHeight" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>This property is supported by both variants. Please see the documentation on sap.m.Popover#contentHeight and sap.m.Dialog#contentHeight</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="horizontalScrolling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property is supported by both variants. Please see the documentation on sap.m.Popover#horizontalScrolling and sap.m.Dialog#horizontalScrolling</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="verticalScrolling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property is supported by both variants. Please see the documentation on sap.m.Popover#verticalScrolling and sap.m.Dialog#verticalScrolling</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showCloseButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines if a close button should be inserted into the dialog's header dynamically to close the dialog. This property only takes effect on phone.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resizable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether resize option is enabled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialFocus" type="xsd:string">
<xsd:annotation>
<xsd:documentation>InitialFocus is supported by both variants. Please see the documentation on sap.m.Popover#initialFocus and sap.m.Dialog#initialFocus</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired before popover or dialog is open.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired after popover or dialog is open.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired before popover or dialog is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired after popover or dialog is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ScrollContainer'-->
<xsd:complexType name="_ScrollContainerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content of the ScrollContainer.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width of the ScrollContainer.
If not set, it consumes the complete available width, behaving like normal HTML block elements. If only vertical scrolling is enabled, make sure the content always fits or wraps.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The height of the ScrollContainer.
By default the height equals the content height. If only horizontal scrolling is used, do not set the height or make sure the height is always larger than the height of the content.

Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="horizontal" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether horizontal scrolling should be possible.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="vertical" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether vertical scrolling should be possible.

Note that this is off by default because typically a Page is used as fullscreen element which can handle vertical scrolling. If this is not the case and vertical scrolling is required, this flag needs to be set to "true".
Important: it is not supported to have nested controls that both enable scrolling into the same dimension.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="focusable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the scroll container can be focused.

Note that it should be set to "true" when there are no focusable elements inside or when keyboard interaction requires an additional tab stop on the container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.SearchField'-->
<xsd:complexType name="_SearchFieldType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'suggestionItems'-->
<xsd:element ref="n1:SuggestionItem" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="suggestionItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>&lt;code&gt;SuggestionItems&lt;/code&gt; are the items which will be shown in the suggestions list.
The following properties can be used:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt; is not displayed and may be used as internal technical field&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt; is displayed as normal suggestion text&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;description&lt;/code&gt; - additional text may be used to visually display search item type or category&lt;/li&gt;
&lt;/ul&gt;</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:SuggestionItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Input Value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the CSS width of the input. If not set, width is 100%.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Boolean property to enable the control (default is true).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Invisible inputs are not rendered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxLength" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Maximum number of characters. Value '0' means the feature is switched off.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="placeholder" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text shown when no value available. Default placeholder text is the word "Search" in the current local language (if supported) or in English.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showMagnifier" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set to false to hide the magnifier icon.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showRefreshButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set to true to display a refresh button in place of the search icon. By pressing the refresh button or F5 key on keyboard, the user can reload the results list without changing the search string.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="refreshButtonTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Tooltip text of the refresh button. If it is not set, the tooltip of the SearchField (if any) is displayed. Tooltips are not displayed on touch devices.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSearchButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set to true to show the search button with the magnifier icon.
If false, both the search and refresh buttons are not displayed even if the "showRefreshButton" property is true.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableSuggestions" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If true, a &lt;code&gt;suggest&lt;/code&gt; event is fired when user types in the input and when the input is focused.
On a phone device, a full screen dialog with suggestions is always shown even if the suggestions list is empty.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectOnFocus" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Normally, search text is selected for copy when the SearchField is focused by keyboard navigation. If an application re-renders the SearchField during the liveChange event, set this property to false to disable text selection by focus.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="search" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event which is fired when the user triggers a search.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the value of the search field is changed by a user - e.g. at each key press. Do not invalidate or re-render a focused search field, especially during the liveChange event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="suggest" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the search field is initially focused or its value is changed by the user.
This event means that suggestion data should be updated, in case if suggestions are used.
Use the value parameter to create new suggestions for it.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.SegmentedButton'-->
<xsd:complexType name="_SegmentedButtonType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'buttons'-->
<xsd:element ref="n1:Button" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="buttons" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The buttons of the SegmentedButton control. The items set in this aggregation are used as an interface for the buttons displayed by the control. Only the properties ID, icon, text, enabled and textDirections of the Button control are evaluated. Setting other properties of the button will have no effect. Alternatively, you can use the createButton method to add buttons.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Aggregation of items to be displayed. The items set in this aggregation are used as an interface for the buttons displayed by the control.
The "items" and "buttons" aggregations should NOT be used simultaneously as it causes the control to work incorrectly.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:SegmentedButtonItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the SegmentedButton control. If not set, it uses the minimum required width to make all buttons inside of the same size (based on the biggest button).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Disables all the buttons in the SegmentedButton control. When disabled all the buttons look grey and you cannot focus or click on them.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key of the selected item. If no item to this key is found in the items aggregation, no changes will apply. Only the items aggregation is affected. If duplicate keys exist, the first item matching the key is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedButton" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A reference to the currently selected button control. By default or if the association is set to false (null, undefined, "", false), the first button will be selected.
If the association is set to an invalid value (for example, an ID of a button that does not exist) the selection on the SegmentedButton will be removed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs, which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs, which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when the user selects a button, which returns the ID and button object.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.SegmentedButtonItem'-->
<xsd:complexType name="_SegmentedButtonItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:attribute name="icon" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The icon, which belongs to the button.
This can be an URI to an image or an icon font URI.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the button should be visible on the screen. If set to false, a placeholder is rendered instead of the real button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the width of the buttons.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when the user clicks on an individual button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Select'-->
<xsd:complexType name="_SelectType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Defines the items contained within this control.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name to be used in the HTML code (for example, for HTML forms that send data to the server via submit).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the user can change the selection.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the width of the control. The default width is derived from the widest item.
If the width defined is smaller than the widest item in the selection list, only the width of
the selection field will be changed: the list will keep the width of its widest item.
If the list is wider than the viewport, it is truncated and an ellipsis is displayed for each item.
For phones, the width of the list is always the same as the viewport.

&lt;b&gt;Note:&lt;/b&gt; This property is ignored if the &lt;code&gt;autoAdjustWidth&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the maximum width of the control.

&lt;b&gt;Note:&lt;/b&gt; This property is ignored if the &lt;code&gt;autoAdjustWidth&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key of the selected item.

&lt;b&gt;Note:&lt;/b&gt; If duplicate keys exist, the first item matching the key is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedItemId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>ID of the selected item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The URI to the icon that will be displayed only when using the &lt;code&gt;IconOnly&lt;/code&gt; type.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n1:_SelectTypeType">
<xsd:annotation>
<xsd:documentation>Type of a select. Possible values &lt;code&gt;Default&lt;/code&gt;, &lt;code&gt;IconOnly&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="autoAdjustWidth" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the width of the input field is determined by the selected item's content.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Sets the horizontal alignment of the text within the input field.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Specifies the direction of the text within the input field with enumerated options.
By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="forceSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the selection is restricted to one of the items in the list.
&lt;b&gt;Note:&lt;/b&gt; We strongly recommend that you always set this property to &lt;code&gt;false&lt;/code&gt; and bind
the &lt;code&gt;selectedKey&lt;/code&gt; property to the desired value for better interoperability with data binding.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets or retrieves the selected item from the aggregation named items.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs which label this control (see WAI-ARIA attribute &lt;code&gt;aria-labelledby&lt;/code&gt;).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the value in the selection field is changed in combination with one of
the following actions:
&lt;ul&gt;
	&lt;li&gt;The focus leaves the selection field&lt;/li&gt;
	&lt;li&gt;The &lt;i&gt;Enter&lt;/i&gt; key is pressed&lt;/li&gt;
	&lt;li&gt;The item is pressed&lt;/li&gt;
&lt;/ul&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.SelectDialog'-->
<xsd:complexType name="_SelectDialogType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n1:ListItemBase" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The items of the list shown in the search dialog. It is recommended to use a StandardListItem for the dialog but other combinations are also possible.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ListItemBase" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the title text that appears in the dialog header</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="noDataText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the text shown when the list has no data</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="multiSelect" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines if the user can select several options from the list</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="growingThreshold" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Determines the number of items initially displayed in the list. Also defines the number of items to be requested from the model for each grow.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Determines the content width of the inner dialog. For more information, see the dialog documentation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="rememberSelections" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This flag controls whether the dialog clears the selection after the confirm event has been fired. If the dialog needs to be opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentHeight" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Determines the content height of the inner dialog. For more information, see the dialog documentation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="confirm" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="search" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired when the search button has been clicked on the searchfield on the visual control</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired when the value of the search field is changed by a user - e.g. at each key press</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired when the cancel button is clicked</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.SelectList'-->
<xsd:complexType name="_SelectListType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Defines the items contained within this control.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the user can change the selection.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the width of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the maximum width of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key of the selected item.

&lt;b&gt;Note: &lt;/b&gt; If duplicate keys exist, the first item matching the key is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedItemId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>ID of the selected item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSecondaryValues" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the text values of the &lt;code&gt;additionalText&lt;/code&gt; property of a {@link sap.ui.core.ListItem} are shown.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="keyboardNavigationMode" type="n1:_SelectListKeyboardNavigationModeType">
<xsd:annotation>
<xsd:documentation>Defines the keyboard navigation mode.

&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;sap.m.SelectListKeyboardNavigationMode.None&lt;/code&gt; enumeration value, is only
intended for use in some composite controls that handles keyboard navigation by themselves.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets or retrieves the selected item from the aggregation named items.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs which label this control (see WAI-ARIA attribute &lt;code&gt;aria-labelledby&lt;/code&gt;).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the selection has changed.

&lt;b&gt;Note: &lt;/b&gt; The selection can be changed by pressing an non-selected item or
via keyboard and after the enter or space key is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="itemPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when an item is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Shell'-->
<xsd:complexType name="_ShellType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'app'-->
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="app" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A Shell contains an App or a SplitApp (they may be wrapped in a View). Other control types are not allowed.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the application title, which may or may not be displayed outside the actual application, depending on the available screen size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="logo" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Defines the logo to be displayed next to the App when the screen is sufficiently large.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showLogout" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the Logout button should be displayed. Currently, this only happens on very tall screens (1568px height), otherwise, it is always hidden.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="headerRightText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines texts, such as the name of the logged-in user, which should be displayed on the right side of the header (if there is enough space to display the header at all - this only happens on very tall screens (1568px height), otherwise, it is always hidden).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="appWidthLimited" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the width of the content (the aggregated App) should be limited or extended to the full screen width.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundColor" type="n0:_CSSColorType">
<xsd:annotation>
<xsd:documentation>Defines the background color of the Shell. If set, this color will override the default background defined by the theme. This should only be set when really required.
Any configured background image will be placed above this colored background.
Use the backgroundRepeat property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundImage" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Defines the background image of the Shell. If set, this image will override the default background defined by the theme. This should only be set when really required.
This background image will be placed above any color set for the background.
Use the backgroundRepeat property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundRepeat" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the background image (if configured) should be proportionally stretched to cover the whole Shell (false, default) or whether it should be tiled (true).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundOpacity" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Defines the opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 (fully opaque).
This can be used to improve readability of the Shell content by making the background image partly transparent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="homeIcon" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets the icon used for the mobile device home screen and the icon to be used for bookmarks by desktop browsers.

This property should be only set once, and as early as possible. Subsequent calls replace the previous icon settings and may lead to different behavior depending on the browser.

Different image sizes for device home screen need to be given as PNG images, an ICO file needs to be given as desktop browser bookmark icon (other file formats may not work in all browsers).
The &lt;code&gt;precomposed&lt;/code&gt; flag defines whether there is already a glow effect contained in the home screen images (or whether iOS should add such an effect). The given structure could look like this:
{
'phone':'phone-icon_57x57.png',
'phone@2':'phone-retina_114x114.png',
'tablet':'tablet-icon_72x72.png',
'tablet@2':'tablet-retina_144x144.png',
'precomposed':true,
'favicon':'favicon.ico'
}

See jQuery.sap.setIcons() for full documentation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="logout" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when the user presses the logout button/link.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.SlideTile'-->
<xsd:complexType name="_SlideTileType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="tiles" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The set of Generic Tiles to be shown in the control.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:GenericTile" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="displayTime" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The time of the slide display in milliseconds.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="transitionTime" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The time of the slide changing in milliseconds.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Slider'-->
<xsd:complexType name="_SliderType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the user can change the value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name property to be used in the HTML code for the slider (e.g. for HTML forms that send data to the server via submit).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="min" type="xsd:float">
<xsd:annotation>
<xsd:documentation>The minimum value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="max" type="xsd:float">
<xsd:annotation>
<xsd:documentation>The maximum value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="step" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Define the amount of units to change the slider when adjusting by drag and drop.

Defines the size of the slider's selection intervals. (e.g. min = 0, max = 10, step = 5 would result in possible selection of the values 0, 5, 10).

The step must be positive, if a negative number is provided, the default value will be used instead.
If the width of the slider converted to pixels is less than the range (max – min), the value will be rounded to multiples of the step size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="progress" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicate whether a progress bar indicator is shown.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Define the value.

If the value is lower/higher than the allowed minimum/maximum, the value of the properties &lt;code&gt;min&lt;code&gt;/&lt;code&gt;max&lt;/code&gt; are used instead.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showHandleTooltip" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicate whether the handle tooltip is shown.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs which label this control (see WAI-ARIA attribute &lt;code&gt;aria-labelledby&lt;/code&gt;).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is triggered after the end user finishes interacting, if there is any change.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is triggered during the dragging period, each time the slider value changes.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.SplitApp'-->
<xsd:complexType name="_SplitAppType">
<xsd:complexContent>
<xsd:extension base="n1:_SplitContainerType">
<xsd:attribute name="homeIcon" type="n0:_anyType">
<xsd:annotation>
<xsd:documentation>Represents the icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
Note that only the first attempt to set the homeIcon is executed, subsequent settings are ignored.
The icon must be in PNG format. The property can either store the URL of one single icon or an object holding icon URLs for the different required sizes.
Note that if single icon is used for all devices, when scaled, its quality can regress.
A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon.
For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting as the file can contain different images for different resolutions.

One example is:

app.setHomeIcon({
'phone':'phone-icon.png',
'phone@2':'phone-retina.png',
'tablet':'tablet-icon.png',
'tablet@2':'tablet-retina.png',
'icon':'desktop.ico'
});

The image size is 57/114 px for the phone and 72/144 px for the tablet.
If an object is given but one of the sizes is not given, the largest given icon will be used for this size.

On Android, these icons may or may not be used by the device. Chances can be improved by adding glare effect, rounded corners, setting the file name to end with "-precomposed.png", and setting the homeIconPrecomposed property to true.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="orientationChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when orientation (portrait/landscape) is changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.SplitContainer'-->
<xsd:complexType name="_SplitContainerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="masterPages" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Determines the content entities, between which the SplitContainer navigates in master area.
These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
These aggregated controls receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow},
they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="detailPages" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Determines the content entities, between which the SplitContainer navigates in detail area.
These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
These aggregated controls receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow},
they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="defaultTransitionNameDetail" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the type of the transition/animation to apply when to() is called without defining the
transition to use. The default is "slide", other options are "fade", "show", and the names of any registered custom transitions.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="defaultTransitionNameMaster" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the type of the transition/animation to apply when to() is called, without defining the
transition to use. The default is "slide", other options are "fade", "show", and the names of any registered custom transitions.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mode" type="n1:_SplitAppModeType">
<xsd:annotation>
<xsd:documentation>Defines whether the master page will always be displayed (in portrait and landscape mode - StretchCompressMode),
or if it should be hidden when in portrait mode (ShowHideMode). Default is ShowHideMode.
Other possible values are Hide (Master is always hidden) and Popover (master is displayed in popover).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="masterButtonText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the text displayed in master button, which has a default value "Navigation".
This text is only displayed in iOS platform and the icon from the current page in detail area is
displayed in the master button for the other platforms.
The master button is shown/hidden depending on the orientation of the device and whether
the master area is opened or not. SplitContainer manages the show/hide of the master button by itself
only when the pages added to the detail area are sap.m.Page with built-in header or sap.m.Page
with built-in header, which is wrapped by one or several sap.ui.core.mvc.View.
Otherwise, the show/hide of master button needs to be managed by the application.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundColor" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the background color of the SplitContainer. If set, this color overrides the default one,
which is defined by the theme (should only be used when really required).
Any configured background image will be placed above this colored background,
but any theme adaptation in the Theme Designer will override this setting.
Use the backgroundRepeat property to define whether this image should be stretched
to cover the complete SplitContainer or whether it should be tiled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundImage" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Sets the background image of the SplitContainer. When set, this image overrides
the default background defined by the theme (should only be used when really required).
This background image will be placed above any color set for the background,
but any theme adaptation in the Theme Designer will override this image setting.
Use the backgroundRepeat property to define whether this image should be stretched
to cover the complete SplitContainer or whether it should be tiled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundRepeat" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether the background image (if configured) is proportionally stretched
to cover the whole SplitContainer (false) or whether it should be tiled (true).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundOpacity" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Defines the opacity of the background image - between 0 (fully transparent) and 1 (fully opaque).
This can be used to improve the content visibility by making the background image partly transparent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialDetail" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets the initial detail page, which is displayed on application launch.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialMaster" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets the initial master page, which is displayed on application launch.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="masterNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet.
This event can be aborted by the application with preventDefault(), which means that there will be no navigation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterMasterNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when navigation between two pages in master area has completed.
NOTE: In case of animated transitions this event is fired with some delay after the navigate event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="masterButton" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitContainer control does not handle the placement of the master button automatically.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeMasterOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires before the master area is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterMasterOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when the master area is fully opened after animation if any.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeMasterClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires before the master area is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterMasterClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when the master area is fully closed after the animation (if any).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="detailNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when navigation between two pages in detail area has been triggered.
The transition (if any) to the new page has not started yet.
NOTE: This event can be aborted by the application with preventDefault(), which means that there will be no navigation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterDetailNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when navigation between two pages in detail area has completed.
NOTE: In case of animated transitions this event is fired with some delay after the "navigate" event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.StandardListItem'-->
<xsd:complexType name="_StandardListItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the title of the list item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the additional information for the title.
&lt;b&gt;Note:&lt;/b&gt; This is only visible when the &lt;code&gt;title&lt;/code&gt; property is not empty.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Defines the list item icon.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconInset" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines the indentation of the icon. If set to &lt;code&gt;false&lt;/code&gt;, the icon will not be shown as embedded. Instead it will take the full height of the list item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, one or more requests are sent to get the density perfect version of the icon if the given version of the icon doesn't exist on the server.
&lt;b&gt;Note:&lt;b&gt; If bandwidth is a key factor for the application, set this value to &lt;code&gt;false&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activeIcon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Defines the icon that is shown while the list item is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="info" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines an additional information text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="infoState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Defines the state of the information text, e.g. &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;Warning&lt;/code&gt;, &lt;code&gt;Success&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="adaptTitleSize" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, the title size adapts to the available space and gets bigger if the description is empty. If you have list items with and without descriptions, this results in titles with different sizes. In this case, it can be better to switch the size adaption off by setting this property to &lt;code&gt;false&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Defines the &lt;code&gt;title&lt;/code&gt; text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="infoTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Defines the &lt;code&gt;info&lt;/code&gt; directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.StandardTile'-->
<xsd:complexType name="_StandardTileType">
<xsd:complexContent>
<xsd:extension base="n1:_TileType">
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the title of the StandardTile.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="info" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the description of the StandardTile.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Defines the icon of the StandardTile.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activeIcon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Defines the active icon of the StandardTile.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="number" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the number field of the StandardTile.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="numberUnit" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the number units qualifier of the StandardTile.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="infoState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Defines the color of the info text. Possible values are Error, Warning, Success and so on.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n1:_StandardTileTypeType">
<xsd:annotation>
<xsd:documentation>Defines the type of the StandardTile.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs, which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.SuggestionItem'-->
<xsd:complexType name="_SuggestionItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:attribute name="icon" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The icon belonging to this list item instance.
This can be an URI to an image or an icon font URI.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Additional text of type string, optionally to be displayed along with this item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Switch'-->
<xsd:complexType name="_SwitchType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="state" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>A boolean value indicating whether the switch is on or off.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customTextOn" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Custom text for the "ON" state.

"ON" translated to the current language is the default value.
Beware that the given text will be cut off after three characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customTextOff" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Custom text for the "OFF" state.

"OFF" translated to the current language is the default value.
Beware that the given text will be cut off after three characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the switch is enabled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name to be used in the HTML code for the switch (e.g. for HTML forms that send data to the server via submit).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n1:_SwitchTypeType">
<xsd:annotation>
<xsd:documentation>Type of a Switch. Possibles values "Default", "AcceptReject".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Triggered when a switch changes the state.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.TabContainer'-->
<xsd:complexType name="_TabContainerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The items displayed in the &lt;code&gt;TabContainer&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:TabContainerItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="showAddNewButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether an &lt;code&gt;Add New Tab&lt;/code&gt; button is displayed in the TabStrip.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets or retrieves the selected item from the aggregation named items.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="itemClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when an item is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="itemSelect" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when an item is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="addNewButtonPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when &lt;code&gt;Add New Tab&lt;/code&gt; button is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.TabContainerItem'-->
<xsd:complexType name="_TabContainerItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content displayed for this item.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the text to be displayed for the item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the name of the item. Can be used as input for subsequent actions.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="modified" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Shows if a control is edited (default is false). Items that are marked as modified have a * symbol to indicate that they haven't been saved.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="itemPropertyChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sends information that some of the properties have changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.TabStripSelectList'-->
<xsd:complexType name="_TabStripSelectListType">
<xsd:complexContent>
<xsd:extension base="n1:_SelectListType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Table'-->
<xsd:complexType name="_TableType">
<xsd:complexContent>
<xsd:extension base="n1:_ListBaseType">
<xsd:sequence>
<xsd:element name="columns" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Defines the columns of the table.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Column" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="backgroundDesign" type="n1:_BackgroundDesignType">
<xsd:annotation>
<xsd:documentation>Sets the background style of the table. Depending on the theme, you can change the state of the background from &lt;code&gt;Solid&lt;/code&gt; to &lt;code&gt;Translucent&lt;/code&gt; or to &lt;code&gt;Transparent&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fixedLayout" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines the algorithm to be used to layout the table cells, rows, and columns.
By default, a table is rendered with fixed layout algorithm. This means the horizontal layout only depends on the table's width and the width of the columns, not the contents of the cells. Cells in subsequent rows do not affect column widths. This allows a browser to layout the table faster than the auto table layout since the browser can begin to display the table once the first row has been analyzed.

When this property is set to &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;sap.m.Table&lt;/code&gt; is rendered with auto layout algorithm. This means, the width of the table and its cells depends on the contents of the cells. The column width is set by the widest unbreakable content inside the cells. This can make the rendering slow, since the browser needs to read through all the content in the table before determining the final layout.
&lt;b&gt;Note:&lt;/b&gt; Since &lt;code&gt;sap.m.Table&lt;/code&gt; does not have its own scrollbars, setting &lt;code&gt;fixedLayout&lt;/code&gt; to false can force the table to overflow, which may cause visual problems. It is suggested to use this property when a table has a few columns in wide screens or within the horizontal scroll container (e.g &lt;code&gt;sap.m.Dialog&lt;/code&gt;) to handle overflow.
In auto layout mode the &lt;code&gt;width&lt;/code&gt; property of &lt;code&gt;sap.m.Column&lt;/code&gt; is taken into account as a minimum width.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showOverlay" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Setting this property to &lt;code&gt;true&lt;/code&gt; will show an overlay on top of the table content and prevents the user interaction with it.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.TableSelectDialog'-->
<xsd:complexType name="_TableSelectDialogType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n1:ColumnListItem" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The items of the table.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ColumnListItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="columns" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The columns bindings.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Column" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the title text in the dialog header.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="noDataText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the text displayed when the table has no data.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="multiSelect" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables the user to select several options from the table.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="growingThreshold" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Determines the number of items initially displayed in the table.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Determines the content width of the inner dialog. For more information, see the Dialog documentation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="rememberSelections" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls whether the dialog clears the selection or not. When the dialog is opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true". When the dialog should reset the selection to allow for a new selection each time set it to "false"
Note: This property must be set before the Dialog is opened to have an effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentHeight" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Specifies the content height of the inner dialog. For more information, see the Dialog documentation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="confirm" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when the dialog is confirmed by selecting an item in single-selection mode or by pressing the confirmation button in multi-selection mode. The items being selected are returned as event parameters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="search" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when the search button has been clicked on dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when the value of the search field is changed by a user (for example at each key press).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when the Cancel button is clicked.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Text'-->
<xsd:complexType name="_TextType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the text to be displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Available options for the text direction are LTR and RTL. By default the control inherits the text direction from its parent control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="wrapping" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables text wrapping.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Sets the horizontal alignment of the text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the width of the Text control. By default, the Text control uses the full width available. Set this property to restrict the width to a custom value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxLines" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Limits the number of lines for wrapping texts.

Note: The multi-line overflow indicator depends on the browser line clamping support. For such browsers, this will be shown as ellipsis, for the other browsers the overflow will just be hidden.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.TextArea'-->
<xsd:complexType name="_TextAreaType">
<xsd:complexContent>
<xsd:extension base="n1:_InputBaseType">
<xsd:attribute name="rows" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Defines the number of visible text lines for the control.
&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;height&lt;/code&gt; property wins over the &lt;code&gt;rows&lt;/code&gt; property, if both are set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cols" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Defines the visible width of the control, in average character widths.
&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;width&lt;/code&gt; property wins over the &lt;code&gt;cols&lt;/code&gt; property, if both are set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the height of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxLength" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Defines the maximum number of characters that the &lt;code&gt;value&lt;/code&gt; can be.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="wrapping" type="n0:_WrappingType">
<xsd:annotation>
<xsd:documentation>Indicates how the control wraps the text, e.g. &lt;code&gt;Soft&lt;/code&gt;, &lt;code&gt;Hard&lt;/code&gt;, &lt;code&gt;Off&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueLiveUpdate" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates when the &lt;code&gt;value&lt;/code&gt; property gets updated with the user changes. Setting it to &lt;code&gt;true&lt;/code&gt; updates the &lt;code&gt;value&lt;/code&gt; property whenever the user has modified the text shown on the text area.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="growing" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates the ability of the control to automatically grow and shrink dynamically with its content.
&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;height&lt;/code&gt; property is ignored, if this property set to &lt;code&gt;true&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="growingMaxLines" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Defines the maximum number of lines that the control can grow.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Is fired whenever the user has modified the text shown on the text area.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Tile'-->
<xsd:complexType name="_TileType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="removable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the tile is movable within the surrounding tile container. The remove event is fired by the tile container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Tap event is raised if the user taps or clicks the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.TileContainer'-->
<xsd:complexType name="_TileContainerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'tiles'-->
<xsd:element ref="n1:Tile" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="tiles" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The Tiles to be displayed by the TileContainer.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Tile" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the TileContainer in px.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the height of the TileContainer in px.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the TileContainer is editable so you can move, delete or add tiles.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="allowAdd" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the user is allowed to add Tiles in Edit mode (editable = true).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tileMove" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires if a Tile is moved.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tileDelete" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires if a Tile is deleted in Edit mode.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tileAdd" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when a Tile is added.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.TileContent'-->
<xsd:complexType name="_TileContentType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The switchable view that depends on the tile type.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="footer" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The footer text of the tile.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="size" type="n1:_SizeType">
<xsd:annotation>
<xsd:documentation>Updates the size of the tile. If it is not set, then the default size is applied based on the device tile.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="unit" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The percent sign, the currency symbol, or the unit of measure.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="disabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Disables control if true.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="frameType" type="n1:_FrameTypeType">
<xsd:annotation>
<xsd:documentation>The frame type: 1x1 or 2x1.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Title'-->
<xsd:complexType name="_TitleType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the text which should be displayed as a title.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="level" type="n0:_TitleLevelType">
<xsd:annotation>
<xsd:documentation>Defines the semantic level of the title.
This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.
Depending on this setting either a HTML h1-h6 element is used or when using level &lt;code&gt;Auto&lt;/code&gt; no explicit level information is written (HTML5 header element).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleStyle" type="n0:_TitleLevelType">
<xsd:annotation>
<xsd:documentation>Defines the style of the title.
When using the &lt;code&gt;Auto&lt;/code&gt; styling, the appearance of the title depends on the current position of the title and the defined level.
This automatism can be overridden by setting a different style explicitly.
The actual appearance of the title and the different styles always depends on the theme being used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the title.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Defines the alignment of the text within the title. &lt;b&gt;Note:&lt;/b&gt; This property only has an effect if the overall width of the title control is
larger than the displayed text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines a relationship to a generic title description.
If such a title element is associated, the properties text, level and tooltip (text only) of this element are consumed.
The corresponding properties of the title control are ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ToggleButton'-->
<xsd:complexType name="_ToggleButtonType">
<xsd:complexContent>
<xsd:extension base="n1:_ButtonType">
<xsd:attribute name="pressed" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The property is “true” when the control is toggled. The default state of this property is "false".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Token'-->
<xsd:complexType name="_TokenType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence/>
<xsd:attribute name="selected" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates the current selection status of the token.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key of the token.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Displayed text of the token.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates the editable status of the token. If it is set to &lt;code&gt;true&lt;/code&gt;, token displays a delete icon.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="delete" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired if the user clicks the token's delete icon.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the user clicks on the token.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the token gets selected.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Tokenizer'-->
<xsd:complexType name="_TokenizerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'tokens'-->
<xsd:element ref="n1:Token" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="tokens" minOccurs="0">
<xsd:annotation>
<xsd:documentation>the currently displayed tokens</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Token" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>true if tokens shall be editable otherwise false</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the Tokenizer.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tokenChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>fired when the tokens aggregation changed (add / remove token)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Toolbar'-->
<xsd:complexType name="_ToolbarType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content of the toolbar.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the control.
By default, Toolbar is a block element. If the the width is not explicitly set, the control will assume its natural size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="active" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that the whole toolbar is clickable. The Press event is fired only if Active is set to true.
Note: This property should be used when there are no interactive controls inside the toolbar and the toolbar itself is meant to be interactive.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Sets the enabled property of all controls defined in the content aggregation.
Note: This property does not apply to the toolbar itself, but rather to its items.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the height of the control.
Note: By default, the Height property depends on the used theme and the Design property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="design" type="n1:_ToolbarDesignType">
<xsd:annotation>
<xsd:documentation>Defines the toolbar design.
Note: Design settings are theme-dependent. They also determine the default height of the toolbar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the user clicks on the toolbar, if the Active property is set to "true".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ToolbarLayoutData'-->
<xsd:complexType name="_ToolbarLayoutDataType">
<xsd:complexContent>
<xsd:extension base="n0:_LayoutDataType">
<xsd:attribute name="shrinkable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the control, when in a toolbar, is shrinkable or not. For controls with fixed width (100px, 5rem, etc...) this property is ignored.

Note: Nested layout controls should not be shrinkable.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the minimum width of the toolbar item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the maximum width of the toolbar item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ToolbarSeparator'-->
<xsd:complexType name="_ToolbarSeparatorType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ToolbarSpacer'-->
<xsd:complexType name="_ToolbarSpacerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the horizontal space.
Note: Empty("") value makes the space flexible which means it covers the remaining space between toolbar items.
This feature can be used to push next item to the edge of the toolbar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.UploadCollection'-->
<xsd:complexType name="_UploadCollectionType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n1:UploadCollectionItem" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Uploaded items.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:UploadCollectionItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="headerParameters" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Specifies the header parameters for the FileUploader that are submitted only with XHR requests.
Header parameters are not supported by Internet Explorer 8 and 9.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:UploadCollectionParameter" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="parameters" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Specifies the parameters for the FileUploader that are rendered as a hidden input field.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:UploadCollectionParameter" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolbar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Specifies the toolbar.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:OverflowToolbar" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="fileType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the allowed file types for the upload.
The chosen files will be checked against an array of file types.
If at least one file does not fit the file type requirements, the upload is prevented.  Example: ["jpg", "png", "bmp"].</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maximumFilenameLength" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Specifies the maximum length of a file name.
If the maximum file name length is exceeded, the corresponding event 'filenameLengthExceed' is triggered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maximumFileSize" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Specifies a file size limit in megabytes that prevents the upload if at least one file exceeds the limit.
This property is not supported by Internet Explorer 8 and 9.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mimeType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the allowed MIME types of files to be uploaded.
The chosen files will be checked against an array of MIME types.
If at least one file does not fit the MIME type requirements, the upload is prevented.
This property is not supported by Internet Explorer 8 and 9. Example: mimeType ["image/png", "image/jpeg"].</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="multiple" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Lets the user select multiple files from the same folder and then upload them.
Internet Explorer 8 and 9 do not support this property.
Please note that the various operating systems for mobile devices can react differently to the property so that fewer upload functions may be available in some cases.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="noDataText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Allows you to set your own text for the 'No data' label.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="sameFilenameAllowed" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Allows the user to use the same name for a file when editing the file name. 'Same name' refers to an already existing file name in the list.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSeparators" type="n1:_ListSeparatorsType">
<xsd:annotation>
<xsd:documentation>Defines whether separators are shown between list items.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uploadEnabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables the upload of a file.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uploadUrl" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the URL where the uploaded files have to be stored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="instantUpload" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If false, no upload is triggered when a file is selected. In addition, if a file was selected, a new FileUploader instance is created to ensure that multiple files from multiple folders can be chosen.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="numberOfAttachmentsText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets the title text in the toolbar of the list of attachments.
To show as well the number of attachments in brackets like the default text does. The number of attachments could be retrieved via "getItems().length".
If a new title is set, the default is deactivated.
The default value is set to language-dependent "Attachments (n)".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mode" type="n1:_ListModeType">
<xsd:annotation>
<xsd:documentation>Defines the selection mode of the control (e.g. None, SingleSelect, MultiSelect, SingleSelectLeft, SingleSelectMaster).
Since the UploadCollection reacts like a list for attachments, the API is close to the ListBase Interface.
sap.m.ListMode.Delete mode is not supported and will be automatically set to sap.m.ListMode.None.
In addition, if instant upload is set to false the mode sap.m.ListMode.MultiSelect is not supported and will be automatically set to sap.m.ListMode.None.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is triggered when files are selected in the FileUploader dialog. Applications can set parameters and headerParameters which will be dispatched to the embedded FileUploader control.
Limitation: parameters and headerParameters are not supported by Internet Explorer 9.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fileDeleted" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is triggered when an uploaded attachment is selected and the Delete button is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filenameLengthExceed" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is triggered when the name of a chosen file is longer than the value specified with the maximumFilenameLength property (only if provided by the application).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fileRenamed" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is triggered when the file name is changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fileSizeExceed" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is triggered when the file size of an uploaded file is exceeded (only if the maxFileSize property was provided by the application).
This event is not supported by Internet Explorer 9.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="typeMissmatch" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is triggered when the file type or the MIME type don't match the permitted types (only if the fileType property or the mimeType property are provided by the application).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uploadComplete" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is triggered as soon as the upload request is completed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uploadTerminated" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is triggered as soon as the upload request was terminated by the user.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeUploadStarts" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is triggered before the actual upload starts. An event is fired per file. All the necessary header parameters should be set here.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when selection is changed via user interaction inside the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.UploadCollectionItem'-->
<xsd:complexType name="_UploadCollectionItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<!--default aggregation 'attributes'-->
<xsd:element ref="n1:ObjectAttribute" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="attributes" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Attributes of an uploaded item, for example, 'Uploaded By', 'Uploaded On', 'File Size'
attributes are displayed after an item has been uploaded.
Additionally, the Active property of sap.m.ObjectAttribute is supported.&lt;br&gt;
Note that if one of the deprecated properties contributor, fileSize or UploadedDate is filled in addition to this attribute, two attributes with the same title
are displayed as these properties get displayed as an attribute.
Example: An application passes the property ‘contributor’ with the value ‘A’ and the aggregation attributes ‘contributor’: ‘B’. As a result, the attributes
‘contributor’:’A’ and ‘contributor’:’B’ are displayed. To make sure the title does not appear twice, check if one of the properties is filled.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ObjectAttribute" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="statuses" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Statuses of an uploaded item
Statuses will be displayed after an item has been uploaded</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ObjectStatus" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="contributor" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the name of the user who uploaded the file.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="documentId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies a unique identifier of the file (created by the application).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fileName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the name of the uploaded file.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fileSize" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Specifies the size of the uploaded file (in megabytes).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mimeType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the MIME type of the file.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="thumbnailUrl" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the URL where the thumbnail of the file is located.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uploadedDate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the date on which the file was uploaded.
The application has to define the date format.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="url" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the URL where the file is located.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableEdit" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables/Disables the Edit button.
If the value is true, the Edit button is enabled and the edit function can be used.
If the value is false, the edit function is not available.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableDelete" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables/Disables the Edit button.
If the value is true, the Edit button is enabled and the edit function can be used.
If the value is false, the edit function is not available.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleEdit" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Show/Hide the Edit button.
If the value is true, the Edit button is visible.
If the value is false, the Edit button is not visible.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleDelete" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Show/Hide the Delete button.
If the value is true, the Delete button is visible.
If the value is false, the Delete button is not visible.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelForPicture" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Aria label for the icon (or for the image).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selected" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines the selected state of the UploadCollectionItem.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fileUploader" type="xsd:string">
<xsd:annotation>
<xsd:documentation>ID of the FileUploader instance
since version 1.30</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.UploadCollectionParameter'-->
<xsd:complexType name="_UploadCollectionParameterType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the name of the parameter.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the value of the parameter.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.UploadCollectionToolbarPlaceholder'-->
<xsd:complexType name="_UploadCollectionToolbarPlaceholderType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.VBox'-->
<xsd:complexType name="_VBoxType">
<xsd:complexContent>
<xsd:extension base="n1:_FlexBoxType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ViewSettingsCustomItem'-->
<xsd:complexType name="_ViewSettingsCustomItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ViewSettingsItemType">
<xsd:sequence>
<xsd:element name="customControl" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A custom control for the filter field. It can be used for complex filtering mechanisms.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="filterCount" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The number of currently active filters for this custom filter item. It will be displayed in the filter list of the ViewSettingsDialog to represent the filter state of the custom control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ViewSettingsCustomTab'-->
<xsd:complexType name="_ViewSettingsCustomTabType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:sequence>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content of this Custom tab</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Custom tab button icon</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Custom tab title</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ViewSettingsDialog'-->
<xsd:complexType name="_ViewSettingsDialogType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="sortItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The list of items with key and value that can be sorted over (for example, a list of columns for a table).</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ViewSettingsItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="groupItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The list of items with key and value that can be grouped on (for example, a list of columns for a table).</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ViewSettingsItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="filterItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The list of items with key and value that can be filtered on (for example, a list of columns for a table). A filterItem is associated with one or more detail filters.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ViewSettingsItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="presetFilterItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The list of preset filter items that allows the selection of more complex or custom filters. These entries are displayed at the top of the filter tab.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ViewSettingsItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="customTabs" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The list of all the custom tabs.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ViewSettingsCustomTab" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the title of the dialog. If not set and there is only one active tab, the dialog uses the default "View" or "Sort", "Group", "Filter" respectively.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="sortDescending" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the sort order is descending or ascending (default).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="groupDescending" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the group order is descending or ascending (default).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedSortItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The sort item that is selected. It can be set by either passing a key or the item itself to the function setSelectedSortItem.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedGroupItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The group item that is selected. It can be set by either passing a key or the item itself to the function setSelectedGroupItem.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedPresetFilterItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The preset filter item that is selected. It can be set by either passing a key or the item itself to the function setSelectedPresetFilterItem. Note that either a preset filter OR multiple detail filters can be active at the same time.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="confirm" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Indicates that the user has pressed the OK button and the selected sort, group, and filter settings should be applied to the data on this page.
&lt;/br&gt;&lt;/br&gt;&lt;b&gt;Note:&lt;/b&gt; Custom tabs are not converted to event parameters automatically. For custom tabs, you have to read the state of your controls inside the callback of this event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Called when the Cancel button is pressed. It can be used to set the state of custom filter controls.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resetFilters" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Called when the reset filters button is pressed. It can be used to clear the state of custom filter controls.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filterDetailPageOpened" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the filter detail page is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ViewSettingsFilterItem'-->
<xsd:complexType name="_ViewSettingsFilterItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ViewSettingsItemType">
<xsd:sequence>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Items that are logically grouped under this filter item. They are used to display filter details in the ViewSettingsDialog.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ViewSettingsItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="multiSelect" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to (true), multi selection will be allowed for the items aggregation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filterDetailItemsAggregationChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Let the outside world know that the filter detail aggregation was changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ViewSettingsItem'-->
<xsd:complexType name="_ViewSettingsItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:attribute name="selected" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Selected state of the item. If set to "true", the item will be displayed as selected in the view settings dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="itemPropertyChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Let the outside world know that some of its properties has changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Wizard'-->
<xsd:complexType name="_WizardType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'steps'-->
<xsd:element ref="n1:WizardStep" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="steps" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The wizard steps to be included in the content of the control.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:WizardStep" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Determines the width of the Wizard.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Determines the height of the Wizard.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showNextButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the next button. The developers can choose to control the flow of the
steps either through the API (with &lt;code&gt;nextStep&lt;/code&gt; and &lt;code&gt;previousStep&lt;/code&gt; methods) or let the user click
the next button, and control it with &lt;code&gt;validateStep&lt;/code&gt; or &lt;code&gt;invalidateStep&lt;/code&gt; methods.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="finishButtonText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Changes the text of the finish button for the last step.
This property can be used only if &lt;code&gt;showNextButton&lt;/code&gt; is set to true.
By default the text of the button is "Review".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableBranching" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables the branching functionality of the Wizard.
Branching gives the developer the ability to define multiple routes a user
is able to take based on the input in the current step.
It is up to the developer to programatically check for what is the input in the
current step and set a concrete next step amongs the available subsequent steps.
Note: If this property is set to false, &lt;code&gt;next&lt;/code&gt; and &lt;code&gt;subSequentSteps&lt;/code&gt;
associations of the WizardStep control are ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="stepActivate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The StepActivated event is fired every time a new step is activated.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="complete" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The complete event is fired when the user clicks the finish button of the Wizard.
The finish button is only available on the last step of the Wizard.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.WizardStep'-->
<xsd:complexType name="_WizardStepType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content of the Wizard Step.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the title of the step.
The title is visualized in the Wizard control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Determines the icon that is displayed for this step.
The icon is visualized in the progress navigation part of the Wizard control.
&lt;b&gt;Note:&lt;/b&gt; In order for the icon to be displayed, each step in the Wizard should have
this property defined, otherwise the default numbering will be displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="validated" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether or not the step is validated.
When a step is validated a Next button is visualized in the Wizard control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="subsequentSteps" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This association is used only when the &lt;code&gt;enableBranching&lt;/code&gt; property of the Wizard is set to true.
Use the association to store the next steps that are about to come after the current.
If this is going to be a final step - leave this association empty.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="nextStep" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The next step to be taken after the step is completed.
Set this association value in the complete event of the current WizardStep.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="complete" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after the user presses the Next button in the Wizard,
or on &lt;code&gt;nextStep&lt;/code&gt; method call from the app developer.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired on next step activation from the Wizard.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.AddAction'-->
<xsd:complexType name="_AddActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.CancelAction'-->
<xsd:complexType name="_CancelActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.DeleteAction'-->
<xsd:complexType name="_DeleteActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.DetailPage'-->
<xsd:complexType name="_DetailPageType">
<xsd:complexContent>
<xsd:extension base="n1:_ShareMenuPageType">
<xsd:sequence>
<xsd:element name="addAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Add action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:AddAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="mainAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Main action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:MainAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="positiveAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Positive action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:PositiveAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="negativeAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Negative action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:NegativeAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="forwardAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Negative action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ForwardAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="editAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Edit action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:EditAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="saveAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Save action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:SaveAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="deleteAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Delete action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:DeleteAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="cancelAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Cancel action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:CancelAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="flagAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Flag action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:FlagAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="favoriteAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Favorite action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:FavoriteAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="openInAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>OpenIn action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:OpenInAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="discussInJamAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>DiscussInJam action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:DiscussInJamAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="shareInJamAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>ShareInJam action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ShareInJamAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendEmailAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>SendEmail action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:SendEmailAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendMessageAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>SendMessage action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:SendMessageAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="printAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Print action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:PrintAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="messagesIndicator" minOccurs="0">
<xsd:annotation>
<xsd:documentation>MessagesIndicator</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:MessagesIndicator" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="saveAsTileAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>SaveAsTile button</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="pagingAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Paging action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:PagingButton" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="draftIndicator" minOccurs="0">
<xsd:annotation>
<xsd:documentation>DraftIndicator</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:DraftIndicator" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.DiscussInJamAction'-->
<xsd:complexType name="_DiscussInJamActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.EditAction'-->
<xsd:complexType name="_EditActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.FavoriteAction'-->
<xsd:complexType name="_FavoriteActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticToggleButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.FilterAction'-->
<xsd:complexType name="_FilterActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.FilterSelect'-->
<xsd:complexType name="_FilterSelectType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticSelectType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.FlagAction'-->
<xsd:complexType name="_FlagActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticToggleButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.ForwardAction'-->
<xsd:complexType name="_ForwardActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.FullscreenPage'-->
<xsd:complexType name="_FullscreenPageType">
<xsd:complexContent>
<xsd:extension base="n1:_ShareMenuPageType">
<xsd:sequence>
<xsd:element name="addAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Add action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:AddAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="mainAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Main action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:MainAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="positiveAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Positive action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:PositiveAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="negativeAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Negative action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:NegativeAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="forwardAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Negative action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ForwardAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="editAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Edit action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:EditAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="saveAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Save action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:SaveAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="deleteAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Delete action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:DeleteAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="cancelAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Cancel action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:CancelAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="flagAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Flag action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:FlagAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="favoriteAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Favorite action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:FavoriteAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="openInAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>OpenIn action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:OpenInAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="discussInJamAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>DiscussInJam action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:DiscussInJamAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="shareInJamAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>ShareInJam action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ShareInJamAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendEmailAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>SendEmail action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:SendEmailAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendMessageAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>SendMessage action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:SendMessageAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="printAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Print action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:PrintAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="messagesIndicator" minOccurs="0">
<xsd:annotation>
<xsd:documentation>MessagesIndicator</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:MessagesIndicator" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="saveAsTileAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>SaveAsTile button</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="pagingAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Paging action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:PagingButton" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="draftIndicator" minOccurs="0">
<xsd:annotation>
<xsd:documentation>DraftIndicator</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:DraftIndicator" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.GroupAction'-->
<xsd:complexType name="_GroupActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.GroupSelect'-->
<xsd:complexType name="_GroupSelectType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticSelectType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.MainAction'-->
<xsd:complexType name="_MainActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticButtonType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Button text</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.MasterPage'-->
<xsd:complexType name="_MasterPageType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticPageType">
<xsd:sequence>
<xsd:element name="addAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Add action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:AddAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="mainAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Main action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:MainAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="positiveAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Positive action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:PositiveAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="negativeAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Negative action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:NegativeAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="multiSelectAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>MultiSelect action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:MultiSelectAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="forwardAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Forward action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ForwardAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="editAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Edit action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:EditAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="saveAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Save action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:SaveAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="deleteAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Delete action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:DeleteAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="cancelAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Cancel action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:CancelAction" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sort" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Sort action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="filter" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Filter action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="group" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Group action</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="messagesIndicator" minOccurs="0">
<xsd:annotation>
<xsd:documentation>MessagesIndicator</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:MessagesIndicator" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.MessagesIndicator'-->
<xsd:complexType name="_MessagesIndicatorType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.MultiSelectAction'-->
<xsd:complexType name="_MultiSelectActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticToggleButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.NegativeAction'-->
<xsd:complexType name="_NegativeActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticButtonType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Button text</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.OpenInAction'-->
<xsd:complexType name="_OpenInActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.PositiveAction'-->
<xsd:complexType name="_PositiveActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticButtonType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Button text</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.PrintAction'-->
<xsd:complexType name="_PrintActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.SaveAction'-->
<xsd:complexType name="_SaveActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.SemanticButton'-->
<xsd:complexType name="_SemanticButtonType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticControlType">
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>See {@link sap.m.Button#enabled}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>See {@link sap.m.Button#press}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.SemanticControl'-->
<xsd:complexType name="_SemanticControlType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence/>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>See {@link sap.ui.core.Control#visible}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.SemanticPage'-->
<xsd:complexType name="_SemanticPageType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="subHeader" minOccurs="0">
<xsd:annotation>
<xsd:documentation>See {@link sap.m.Page#subHeader}</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>See {@link sap.m.Page#content}</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="customHeaderContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Custom header buttons</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="customFooterContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Custom footer buttons</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="landmarkInfo" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Accessible landmark settings to be applied to the containers of the &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If not set, no landmarks will be written.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:PageAccessibleLandmarkInfo" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>See {@link sap.m.Page#title}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleLevel" type="n0:_TitleLevelType">
<xsd:annotation>
<xsd:documentation>See {@link sap.m.Page#titleLevel}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showNavButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>See {@link sap.m.Page#showNavButton}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSubHeader" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>See {@link sap.m.Page#showSubHeader}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableScrolling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>See {@link sap.m.Page#enableScrolling}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showFooter" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Hides or shows the page footer</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navButtonPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>See {@link sap.m.Page#navButtonPress}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.SemanticSelect'-->
<xsd:complexType name="_SemanticSelectType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>See {@link sap.m.Select#items}</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>See {@link sap.m.Select#enabled}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>See {@link sap.m.Select#selectedKey}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>See {@link sap.m.Select#selectedItem}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>See {@link sap.m.Select#change}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.SemanticToggleButton'-->
<xsd:complexType name="_SemanticToggleButtonType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticButtonType">
<xsd:attribute name="pressed" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The property is “true” when the control is toggled. The default state of this property is "false".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.SendEmailAction'-->
<xsd:complexType name="_SendEmailActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.SendMessageAction'-->
<xsd:complexType name="_SendMessageActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.ShareInJamAction'-->
<xsd:complexType name="_ShareInJamActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.ShareMenuPage'-->
<xsd:complexType name="_ShareMenuPageType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticPageType">
<xsd:sequence>
<xsd:element name="customShareMenuContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Custom share menu buttons</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.SortAction'-->
<xsd:complexType name="_SortActionType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.semantic.SortSelect'-->
<xsd:complexType name="_SortSelectType">
<xsd:complexContent>
<xsd:extension base="n1:_SemanticSelectType"/>
</xsd:complexContent>
</xsd:complexType>
<xsd:simpleType name="_BackgroundDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Solid">
<xsd:annotation>
<xsd:documentation>A solid background color dependent on the theme.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Transparent">
<xsd:annotation>
<xsd:documentation>Transparent background.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Translucent">
<xsd:annotation>
<xsd:documentation>A translucent background depending on the opacity value of the theme.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_BarDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Auto">
<xsd:annotation>
<xsd:documentation>The Bar can be inserted into other controls and if the design is "Auto" then it inherits the design from parent control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Header">
<xsd:annotation>
<xsd:documentation>The bar will be styled like a header of the page.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SubHeader">
<xsd:annotation>
<xsd:documentation>The bar will be styled like a subheader of the page.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Footer">
<xsd:annotation>
<xsd:documentation>The bar will be styled like a footer of the page.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ButtonTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Default">
<xsd:annotation>
<xsd:documentation>default type (no special styling)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Back">
<xsd:annotation>
<xsd:documentation>back type (back navigation button for header)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Accept">
<xsd:annotation>
<xsd:documentation>accept type (blue button)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Reject">
<xsd:annotation>
<xsd:documentation>reject style (red button)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Transparent">
<xsd:annotation>
<xsd:documentation>transparent type</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Up">
<xsd:annotation>
<xsd:documentation>up type (up navigation button for header)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Unstyled">
<xsd:annotation>
<xsd:documentation>Unstyled type (no styling)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Emphasized">
<xsd:annotation>
<xsd:documentation>emphasized type</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_DateTimeInputTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Date">
<xsd:annotation>
<xsd:documentation>An input control for specifying a date value. The user can select a month, day of the month, and year.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="DateTime">
<xsd:annotation>
<xsd:documentation>An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Time">
<xsd:annotation>
<xsd:documentation>An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_DeviationIndicatorType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Up">
<xsd:annotation>
<xsd:documentation>The actual value is more than the target value.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Down">
<xsd:annotation>
<xsd:documentation>The actual value is less than the target value.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="None">
<xsd:annotation>
<xsd:documentation>No value.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_DialogTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Standard">
<xsd:annotation>
<xsd:documentation>This is the default value for Dialog type. Stardard dialog in iOS has a header on the top and the left, right buttons are put inside the header. In android, the left, right buttons are put to the bottom of the Dialog.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Message">
<xsd:annotation>
<xsd:documentation>Dialog with type Message looks the same as the Stardard Dialog in Android. And it puts the left, right buttons to the bottom of the Dialog in iOS.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_DraftIndicatorStateType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Clear">
<xsd:annotation>
<xsd:documentation>This is the default value for DraftIndicatorState type. This state has no visual information displayed.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Saving">
<xsd:annotation>
<xsd:documentation>Indicates that the draft currently is being saved</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Saved">
<xsd:annotation>
<xsd:documentation>Indicates that the draft is already saved</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_FacetFilterListDataTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Date">
<xsd:annotation>
<xsd:documentation>An input control for specifying a date value. The user can select a month, day of the month, and year.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="DateTime">
<xsd:annotation>
<xsd:documentation>An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Time">
<xsd:annotation>
<xsd:documentation>An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Integer">
<xsd:annotation>
<xsd:documentation>&gt;An input control for specifying a Integer value</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Float">
<xsd:annotation>
<xsd:documentation>&gt;An input control for specifying a Float value</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="String">
<xsd:annotation>
<xsd:documentation>&gt;An input control for specifying a String value</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Boolean">
<xsd:annotation>
<xsd:documentation>&gt;An input control for specifying a Boolean value</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_FacetFilterTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Simple">
<xsd:annotation>
<xsd:documentation>Forces FacetFilter to display facet lists as a row of buttons, one button per facet. The FacetFilter will automatically adapt to the Light type when it detects smart phone sized displays.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Light">
<xsd:annotation>
<xsd:documentation>Forces FacetFilter to display in light mode.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_FlexAlignContentType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Start">
<xsd:annotation>
<xsd:documentation>Lines are packed toward the start of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="End">
<xsd:annotation>
<xsd:documentation>Lines are packed toward the end of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Center">
<xsd:annotation>
<xsd:documentation>Line are packed toward the center of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SpaceBetween">
<xsd:annotation>
<xsd:documentation>Lines are evenly distributed in the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SpaceAround">
<xsd:annotation>
<xsd:documentation>Lines are evenly distributed in the line, with half-size spaces on either end.
&lt;b&gt;Note:&lt;/b&gt; This value behaves like SpaceBetween in Internet Explorer 10.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Stretch">
<xsd:annotation>
<xsd:documentation>Lines stretch to take up the remaining space.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Inherit">
<xsd:annotation>
<xsd:documentation>Inherits the value from its parent.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_FlexAlignItemsType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Start">
<xsd:annotation>
<xsd:documentation>The cross-start margin edges of the flex items are placed flush with the cross-start edge of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="End">
<xsd:annotation>
<xsd:documentation>The cross-start margin edges of the flex items are placed flush with the cross-end edge of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Center">
<xsd:annotation>
<xsd:documentation>The flex item's margin boxes are centered in the cross axis within the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Baseline">
<xsd:annotation>
<xsd:documentation>If the flex item's inline axes are the same as the cross axis, this value is identical to "Start". Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Stretch">
<xsd:annotation>
<xsd:documentation>Make the cross size of the item's margin boxes as close to the same size as the line as possible.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Inherit">
<xsd:annotation>
<xsd:documentation>Inherits the value from its parent.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_FlexAlignSelfType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Auto">
<xsd:annotation>
<xsd:documentation>Takes up the value of alignItems from the parent FlexBox</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Start">
<xsd:annotation>
<xsd:documentation>The cross-start margin edges of the flex item is placed flush with the cross-start edge of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="End">
<xsd:annotation>
<xsd:documentation>The cross-start margin edges of the flex item is placed flush with the cross-end edge of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Center">
<xsd:annotation>
<xsd:documentation>The flex item's margin box is centered in the cross axis within the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Baseline">
<xsd:annotation>
<xsd:documentation>If the flex item's inline axis is the same as the cross axis, this value is identical to "Start". Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Stretch">
<xsd:annotation>
<xsd:documentation>Make the cross size of the item's margin box as close to the same size as the line as possible.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Inherit">
<xsd:annotation>
<xsd:documentation>Inherits the value from its parent.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_FlexDirectionType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Row">
<xsd:annotation>
<xsd:documentation>Flex items are laid out along the direction of the inline axis (text direction).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Column">
<xsd:annotation>
<xsd:documentation>Flex items are laid out along the direction of the block axis (usually top to bottom).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="RowReverse">
<xsd:annotation>
<xsd:documentation>Flex items are laid out along the reverse direction of the inline axis (against the text direction).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ColumnReverse">
<xsd:annotation>
<xsd:documentation>Flex items are laid out along the reverse direction of the block axis (usually bottom to top).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Inherit">
<xsd:annotation>
<xsd:documentation>Inherits the value from its parent.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_FlexJustifyContentType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Start">
<xsd:annotation>
<xsd:documentation>Flex items are packed toward the start of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="End">
<xsd:annotation>
<xsd:documentation>Flex items are packed toward the end of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Center">
<xsd:annotation>
<xsd:documentation>Flex items are packed toward the center of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SpaceBetween">
<xsd:annotation>
<xsd:documentation>Flex items are evenly distributed in the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SpaceAround">
<xsd:annotation>
<xsd:documentation>Flex items are evenly distributed in the line, with half-size spaces on either end.
&lt;b&gt;Note:&lt;/b&gt; This value behaves like SpaceBetween in Internet Explorer 10.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Inherit">
<xsd:annotation>
<xsd:documentation>Inherits the value from its parent.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_FlexRendertypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Div">
<xsd:annotation>
<xsd:documentation>The UI5 controls are wrapped in DIV elements</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="List">
<xsd:annotation>
<xsd:documentation>The UI5 controls are wrapped in LI elements, the entire Flex Box is an unordered list (UL)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_FlexWrapType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="NoWrap">
<xsd:annotation>
<xsd:documentation>The flex container is single-line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Wrap">
<xsd:annotation>
<xsd:documentation>The flex container is multi-line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="WrapReverse">
<xsd:annotation>
<xsd:documentation>The flex container is multi-line with the cross-axis start and end being swapped.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_FrameTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="OneByOne">
<xsd:annotation>
<xsd:documentation>The 1x1 frame type.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="TwoByOne">
<xsd:annotation>
<xsd:documentation>The 2x1 frame type.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="TwoThirds">
<xsd:annotation>
<xsd:documentation>The 2/3 frame type.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Auto">
<xsd:annotation>
<xsd:documentation>The Auto frame type that adjusts the size of the control to the content.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_GenericTileModeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="ContentMode">
<xsd:annotation>
<xsd:documentation>Default mode (Two lines for the header and one line for the subtitle).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="HeaderMode">
<xsd:annotation>
<xsd:documentation>Header mode (Four lines for the header and one line for the subtitle).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_HeaderLevelType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="H1">
<xsd:annotation>
<xsd:documentation>Header level 1</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="H2">
<xsd:annotation>
<xsd:documentation>Header level 2</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="H3">
<xsd:annotation>
<xsd:documentation>Header level 3</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="H4">
<xsd:annotation>
<xsd:documentation>Header level 4</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="H5">
<xsd:annotation>
<xsd:documentation>Header level 5</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="H6">
<xsd:annotation>
<xsd:documentation>Header level 6</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_IBarHTMLTagType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Div">
<xsd:annotation>
<xsd:documentation>Renders as a div element.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Header">
<xsd:annotation>
<xsd:documentation>Renders as a header element.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Footer">
<xsd:annotation>
<xsd:documentation>Renders as a footer element.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_IconTabFilterDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Horizontal">
<xsd:annotation>
<xsd:documentation>A horizontally layouted design providing more space for texts.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Vertical">
<xsd:annotation>
<xsd:documentation>A vertically layouted design using minimum horizontal space.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ImageModeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Image">
<xsd:annotation>
<xsd:documentation>The image is rendered with 'img' tag and the 'src' property is set to the src attribute on the output DOM element.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Background">
<xsd:annotation>
<xsd:documentation>The image is rendered with 'span' tag and the 'src' property is set to the 'background-image' CSS style on the output DOM element</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_InputTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Text">
<xsd:annotation>
<xsd:documentation>default (text)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Date">
<xsd:annotation>
<xsd:documentation>An input control for specifying a date value. The user can select a month, day of the month, and year.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Datetime">
<xsd:annotation>
<xsd:documentation>An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="DatetimeLocale">
<xsd:annotation>
<xsd:documentation>An input control for specifying a date and time value where the format depends on the locale.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Email">
<xsd:annotation>
<xsd:documentation>A text field for specifying an email address. Brings up a keyboard optimized for email address entry.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Month">
<xsd:annotation>
<xsd:documentation>An input control for selecting a month.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Number">
<xsd:annotation>
<xsd:documentation>A text field for specifying a number. Brings up a number pad keyboard. Specifying an input type of \d* or [0-9]* is equivalent to using this type.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Tel">
<xsd:annotation>
<xsd:documentation>A text field for specifying a phone number. Brings up a phone pad keyboard.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Time">
<xsd:annotation>
<xsd:documentation>An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Url">
<xsd:annotation>
<xsd:documentation>A text field for specifying a URL. Brings up a keyboard optimized for URL entry.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Week">
<xsd:annotation>
<xsd:documentation>An input control for selecting a week.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Password">
<xsd:annotation>
<xsd:documentation>Password input where the user entry cannot be seen.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_LabelDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Bold">
<xsd:annotation>
<xsd:documentation>Displays the label in bold.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Standard">
<xsd:annotation>
<xsd:documentation>Displays the label in normal mode.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ListHeaderDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Standard">
<xsd:annotation>
<xsd:documentation>Standard header style</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Plain">
<xsd:annotation>
<xsd:documentation>Plain header style</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ListKeyboardModeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Navigation">
<xsd:annotation>
<xsd:documentation>This default mode is suitable if the number of items is unlimited or if there is no editable field within the item.
While the last/first interactive element within an item has the focus, pressing tab/shift+tab moves the focus to the next/previous element in the tab chain after/before the &lt;code&gt;sap.m.List&lt;/code&gt; or &lt;code&gt;sap.m.Table&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Edit">
<xsd:annotation>
<xsd:documentation>This mode is suitable if the number of items is limited and if there are editable fields within the item.
While the last/first interactive element within an item has the focus, pressing tab/shift+tab moves the focus to the next/previous element in the tab chain after/before the item &lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ListModeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="None">
<xsd:annotation>
<xsd:documentation>Default mode (no selection).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SingleSelect">
<xsd:annotation>
<xsd:documentation>Right-positioned single selection mode (only one list item can be selected).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SingleSelectLeft">
<xsd:annotation>
<xsd:documentation>Left-positioned single selection mode (only one list item can be selected).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SingleSelectMaster">
<xsd:annotation>
<xsd:documentation>Selected item is highlighted but no selection control is visible (only one list item can be selected).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="MultiSelect">
<xsd:annotation>
<xsd:documentation>Multi selection mode (more than one list item can be selected).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Delete">
<xsd:annotation>
<xsd:documentation>Delete mode (only one list item can be deleted via provided delete button)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ListSeparatorsType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="All">
<xsd:annotation>
<xsd:documentation>Separators between the items including the last and the first one.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Inner">
<xsd:annotation>
<xsd:documentation>Separators between the items.
&lt;b&gt;Note:&lt;/b&gt; This enumeration depends on the theme.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="None">
<xsd:annotation>
<xsd:documentation>No item separators.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ListTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Inactive">
<xsd:annotation>
<xsd:documentation>Indicates the list item does not have any active feedback when item is pressed.
&lt;b&gt;Note:&lt;/b&gt; &lt;code&gt;Inactive&lt;/code&gt; type cannot be used to disable list items.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Detail">
<xsd:annotation>
<xsd:documentation>Enables detail button of the list item that fires &lt;code&gt;detailPress&lt;/code&gt; event.
Also see {@link sap.m.ListBase#attachDetailPress}.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Navigation">
<xsd:annotation>
<xsd:documentation>Indicates the list item is navigable to show extra information about the item.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Active">
<xsd:annotation>
<xsd:documentation>Indicates that the item is clickable via active feedback when item is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="DetailAndActive">
<xsd:annotation>
<xsd:documentation>Enables {@link sap.m.ListType#Detail} and {@link sap.m.ListType#Active} enumerations together.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_LoadStateType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Loading">
<xsd:annotation>
<xsd:documentation>The control is loading.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Loaded">
<xsd:annotation>
<xsd:documentation>The control has loaded.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Failed">
<xsd:annotation>
<xsd:documentation>The control failed to load.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Disabled">
<xsd:annotation>
<xsd:documentation>The control is disabled.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_MenuButtonModeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Regular">
<xsd:annotation>
<xsd:documentation>Default regular type (Menu button appears as a regular button, pressing opens a menu)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Split">
<xsd:annotation>
<xsd:documentation>Split type (Menu button appears as a split button, pressing fires the default action a menu,
pressing the arrow part opens a menu)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ObjectMarkerTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Flagged">
<xsd:annotation>
<xsd:documentation>Flagged type</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Favorite">
<xsd:annotation>
<xsd:documentation>Favorite type</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Draft">
<xsd:annotation>
<xsd:documentation>Draft type</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Locked">
<xsd:annotation>
<xsd:documentation>Locked type</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Unsaved">
<xsd:annotation>
<xsd:documentation>Unsaved type</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ObjectMarkerVisibilityType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="IconOnly">
<xsd:annotation>
<xsd:documentation>Shows only icon</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="TextOnly">
<xsd:annotation>
<xsd:documentation>Shows only text</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="IconAndText">
<xsd:annotation>
<xsd:documentation>Shows icon and text</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_OverflowToolbarPriorityType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="NeverOverflow">
<xsd:annotation>
<xsd:documentation>NeverOverflow priority forces OverflowToolbar items to remain always in the toolbar</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="High">
<xsd:annotation>
<xsd:documentation>High priority OverflowToolbar items overflow after the items with lower priority</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Low">
<xsd:annotation>
<xsd:documentation>Low priority  OverflowToolbar items overflow before the items with higher priority such as High priority items</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Disappear">
<xsd:annotation>
<xsd:documentation>Disappear priority  OverflowToolbar items overflow before the items with higher priority such as Low and High priority items and remain hidden in the overflow area</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="AlwaysOverflow">
<xsd:annotation>
<xsd:documentation>AlwaysOverflow priority forces OverflowToolbar items to remain always in the overflow area</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_P13nPanelTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="sort">
<xsd:annotation>
<xsd:documentation>Panel type for sorting.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="filter">
<xsd:annotation>
<xsd:documentation>Panel type for filtering.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="group">
<xsd:annotation>
<xsd:documentation>Panel type for grouping.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="columns">
<xsd:annotation>
<xsd:documentation>Panel type for column settings.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="dimeasure">
<xsd:annotation>
<xsd:documentation>Panel type for dimension and measure settings.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_PageBackgroundDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Standard">
<xsd:annotation>
<xsd:documentation>Standard Page background color.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="List">
<xsd:annotation>
<xsd:documentation>Page background color when a List is set as the Page content.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Solid">
<xsd:annotation>
<xsd:documentation>A solid background color dependent on the theme.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Transparent">
<xsd:annotation>
<xsd:documentation>Transparent background for the page.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_PlacementTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Left">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the left side of the reference control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Right">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the right side of the reference control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Top">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the top of the reference control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Bottom">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the bottom of the reference control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Vertical">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the top or bottom of the reference control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="VerticalPreferedTop">
<xsd:annotation>
<xsd:documentation>Deprecated - use &lt;code&gt;sap.m.PlacementType.VerticalPreferredTop&lt;/code&gt; type.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="VerticalPreferredTop">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the top or bottom of the reference control but will try to position on the
top side if the space is greater than the Popover's height.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="VerticalPreferedBottom">
<xsd:annotation>
<xsd:documentation>Deprecated - use &lt;code&gt;sap.m.PlacementType.VerticalPreferredBottom&lt;/code&gt; type.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="VerticalPreferredBottom">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the top or bottom of the reference control but will try to position on the
bottom side if the space is greater than the Popover's height.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Horizontal">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the right or left side of the reference control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="HorizontalPreferedRight">
<xsd:annotation>
<xsd:documentation>Deprecated - use &lt;code&gt;sap.m.PlacementType.HorizontalPreferredRight&lt;/code&gt; type.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="HorizontalPreferredRight">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the right or left side of the reference control but will try to position on the
right side if the space is greater than the Popover's width.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="HorizontalPreferedLeft">
<xsd:annotation>
<xsd:documentation>Deprecated - use &lt;code&gt;sap.m.PlacementType.HorizontalPreferredLeft&lt;/code&gt; type.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="HorizontalPreferredLeft">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the right or left side of the reference control but will try to position on the
left side if the space is greater than the Popover's width.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="PreferredLeftOrFlip">
<xsd:annotation>
<xsd:documentation>Popover will be placed to the left of the reference control. If the available space is less than the Popover's width,
it will appear to the right of the same reference control left border.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="PreferredRightOrFlip">
<xsd:annotation>
<xsd:documentation>Popover will be placed to the right of the reference control. If the available space is less than the Popover's width,
it will appear to the left of the same reference control right border.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="PreferredTopOrFlip">
<xsd:annotation>
<xsd:documentation>Popover will be placed to the top of the reference control. If the available space is less than the Popover's height,
it will appear to the bottom of the same reference control top border.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="PreferredBottomOrFlip">
<xsd:annotation>
<xsd:documentation>Popover will be placed to the bottom of the reference control. If the available space is less than the Popover's height,
it will appear to the top of the same reference control bottom border.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Auto">
<xsd:annotation>
<xsd:documentation>Popover will be placed automatically at the reference control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_PopinDisplayType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Block">
<xsd:annotation>
<xsd:documentation>Inside the table popin, header is displayed at the first line and cell content is displayed at the next line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Inline">
<xsd:annotation>
<xsd:documentation>Inside the table popin, cell content is displayed next to the header in the same line. Note: If there is not enough space for the cell content then it jumps to the next line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="WithoutHeader">
<xsd:annotation>
<xsd:documentation>Inside the table popin, only the cell content will be visible.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_QuickViewGroupElementTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="phone">
<xsd:annotation>
<xsd:documentation>Displays a phone number link for direct dialing</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="mobile">
<xsd:annotation>
<xsd:documentation>Displays a phone number link for direct dialing and an icon for sending a text message</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="email">
<xsd:annotation>
<xsd:documentation>Displays an e-mail link</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="link">
<xsd:annotation>
<xsd:documentation>Displayes a regular HTML link</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="text">
<xsd:annotation>
<xsd:documentation>Dislpays text</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="pageLink">
<xsd:annotation>
<xsd:documentation>Dislpays a link for navigating to another QuickViewPage</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_RatingIndicatorVisualModeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Full">
<xsd:annotation>
<xsd:documentation>Values are rounded to the nearest integer value (e.g. 1.7 -&gt; 2).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Half">
<xsd:annotation>
<xsd:documentation>Values are rounded to the nearest half value (e.g. 1.7 -&gt; 1.5).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ScreenSizeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Phone">
<xsd:annotation>
<xsd:documentation>240px wide</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Tablet">
<xsd:annotation>
<xsd:documentation>600px wide</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Desktop">
<xsd:annotation>
<xsd:documentation>1024px wide</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="XXSmall">
<xsd:annotation>
<xsd:documentation>240px wide</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="XSmall">
<xsd:annotation>
<xsd:documentation>320px wide</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Small">
<xsd:annotation>
<xsd:documentation>480px wide</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Medium">
<xsd:annotation>
<xsd:documentation>560px wide</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Large">
<xsd:annotation>
<xsd:documentation>768px wide</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="XLarge">
<xsd:annotation>
<xsd:documentation>960px wide</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="XXLarge">
<xsd:annotation>
<xsd:documentation>1120px wide</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_SelectListKeyboardNavigationModeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="None">
<xsd:annotation>
<xsd:documentation>Keyboard navigation is disabled.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Delimited">
<xsd:annotation>
<xsd:documentation>Keyboard navigation is delimited at the last item or first item of the list.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_SelectTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Default">
<xsd:annotation>
<xsd:documentation>Will show the text.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="IconOnly">
<xsd:annotation>
<xsd:documentation>Will show only the specified icon.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_SizeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="XS">
<xsd:annotation>
<xsd:documentation>Extra small size.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="S">
<xsd:annotation>
<xsd:documentation>Small size.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="M">
<xsd:annotation>
<xsd:documentation>Medium size.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="L">
<xsd:annotation>
<xsd:documentation>Large size.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Auto">
<xsd:annotation>
<xsd:documentation>The size of the tile depends on the device it is running on. It is medium size for desktop and tablet and small size for phone.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_SplitAppModeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="ShowHideMode">
<xsd:annotation>
<xsd:documentation>Master will automatically be hidden in portrait mode.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="StretchCompressMode">
<xsd:annotation>
<xsd:documentation>Master will always be shown but in a compressed version when in portrait mode.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="PopoverMode">
<xsd:annotation>
<xsd:documentation>Master will be shown inside a Popover when in portrait mode</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="HideMode">
<xsd:annotation>
<xsd:documentation>Master area is hidden initially both in portrait and landscape. Master area can be opened by clicking on the top left corner button or swiping right. Swipe is only enabled on mobile devices. Master will keep the open state when changing the orientation of the device.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_StandardTileTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Create">
<xsd:annotation>
<xsd:documentation>Tile representing that something needs to be created</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Monitor">
<xsd:annotation>
<xsd:documentation>Monitor tile</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="None">
<xsd:annotation>
<xsd:documentation>Default type</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_SwipeDirectionType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="LeftToRight">
<xsd:annotation>
<xsd:documentation>Swipe from left to right</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="RightToLeft">
<xsd:annotation>
<xsd:documentation>Swipe from right to left.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Both">
<xsd:annotation>
<xsd:documentation>Both directions (left to right or right to left)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_SwitchTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Default">
<xsd:annotation>
<xsd:documentation>Will show "ON" and "OFF" translated to the current language or the custom text if provided</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="AcceptReject">
<xsd:annotation>
<xsd:documentation>Switch with accept and reject icons</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ThreeColumnLayoutTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="EndColumnEmphasized">
<xsd:annotation>
<xsd:documentation>Emphasized last column (endColumn) - column layout 25/25/50</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="MidColumnEmphasized">
<xsd:annotation>
<xsd:documentation>Emphasized middle column (midColumn) - column layout 25/50/25</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ToolbarDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Auto">
<xsd:annotation>
<xsd:documentation>The toolbar can be inserted into other controls and if the design is "Auto" then it inherits the design from parent control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Transparent">
<xsd:annotation>
<xsd:documentation>The toolbar and its content will be displayed transparent.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Info">
<xsd:annotation>
<xsd:documentation>The toolbar appears smaller than the regular size to show information(e.g: text, icon).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Solid">
<xsd:annotation>
<xsd:documentation>The toolbar has a solid background. Its content will be rendered in a standard way.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ValueCSSColorType">
<xsd:restriction base="xsd:string">
<xsd:pattern value="#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})|rgb\(\s*((1?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))|([0-9]?[0-9](\.[0-9]+)?|100(\.0+)?)%)\s*(,\s*((1?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))|([0-9]?[0-9](\.[0-9]+)?|100(\.0+)?)%)\s*){2}\)|rgba\((\s*((1?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))|([0-9]?[0-9](\.[0-9]+)?|100(\.0+)?)%)\s*,){3}\s*(0(\.[0-9]+)?|1(\.0+)?)\s*\)|hsl\(\s*([0-2]?[0-9]?[0-9]|3([0-5][0-9]|60))\s*(,\s*(([0-9]?[0-9](\.[0-9]+)?|100(\.0+)?)%)\s*){2}\)|hsla\(\s*([0-2]?[0-9]?[0-9]|3([0-5][0-9]|60))\s*,(\s*(([0-9]?[0-9](\.[0-9]+)?|100(\.0+)?)%)\s*,){2}\s*(0(\.[0-9]+)?|1(\.0+)?)\s*\)|aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coralcornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silverskyblue|slateblue|slategray|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen|transparent|inherit|Neutral|Good|Critical|Error|"/>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ValueColorType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Neutral">
<xsd:annotation>
<xsd:documentation>Neutral value color.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Good">
<xsd:annotation>
<xsd:documentation>Good value color.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Critical">
<xsd:annotation>
<xsd:documentation>Critical value color.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Error">
<xsd:annotation>
<xsd:documentation>Error value color.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_VerticalPlacementTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Top">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the top of the reference control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Bottom">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the bottom of the reference control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Vertical">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the top or bottom of the reference control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
</xsd:schema>
